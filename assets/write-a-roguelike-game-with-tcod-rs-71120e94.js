import{_ as u}from"./ValaxyMain.vue_vue_type_style_index_0_lang-40050c3d.js";import{_ as h,c,w as l,o as _,b as e,d as t,e as o,a as g,r as s,f as p,p as m}from"./app-025bdceb.js";import"./YunFooter.vue_vue_type_script_setup_true_lang-dd4500d1.js";import"./YunCard.vue_vue_type_style_index_0_lang-c0980680.js";import"./YunPageHeader.vue_vue_type_script_setup_true_lang-870a2da2.js";const ie=JSON.parse('{"title":"用 tcod-rs 写个游戏，所以……","description":"","frontmatter":{"title":"用 tcod-rs 写个游戏，所以……","tags":["游戏","Rust"],"categories":["奇怪的知识增加了"],"date":"2022-05-15T23:45:35.000Z","updated":"2022-05-15T23:45:35.000Z"},"headers":[{"level":2,"title":"为什么写了这个么东西呢？","slug":"为什么写了这个么东西呢？","link":"#为什么写了这个么东西呢？","children":[]},{"level":2,"title":"什么是 Roguelike？","slug":"什么是-roguelike？","link":"#什么是-roguelike？","children":[]},{"level":2,"title":"游戏的逻辑","slug":"游戏的逻辑","link":"#游戏的逻辑","children":[{"level":3,"title":"游戏里的各种物体——组装！","slug":"游戏里的各种物体——组装！","link":"#游戏里的各种物体——组装！","children":[]},{"level":3,"title":"游戏循环——性能黑洞？","slug":"游戏循环——性能黑洞？","link":"#游戏循环——性能黑洞？","children":[]}]},{"level":2,"title":"关于 Rust 本身","slug":"关于-rust-本身","link":"#关于-rust-本身","children":[{"level":3,"title":"derive","slug":"derive","link":"#derive","children":[]},{"level":3,"title":"所有权，所有权，还是所有权","slug":"所有权，所有权，还是所有权","link":"#所有权，所有权，还是所有权","children":[]}]}],"relativePath":"pages/posts/learning/write-a-roguelike-game-with-tcod-rs.md","path":"/home/runner/work/charliedu2000.github.io/charliedu2000.github.io/pages/posts/learning/write-a-roguelike-game-with-tcod-rs.md","lastUpdated":1699970883000}'),n=JSON.parse('{"title":"用 tcod-rs 写个游戏，所以……","description":"","frontmatter":{"title":"用 tcod-rs 写个游戏，所以……","tags":["游戏","Rust"],"categories":["奇怪的知识增加了"],"date":"2022-05-15T23:45:35.000Z","updated":"2022-05-15T23:45:35.000Z"},"headers":[{"level":2,"title":"为什么写了这个么东西呢？","slug":"为什么写了这个么东西呢？","link":"#为什么写了这个么东西呢？","children":[]},{"level":2,"title":"什么是 Roguelike？","slug":"什么是-roguelike？","link":"#什么是-roguelike？","children":[]},{"level":2,"title":"游戏的逻辑","slug":"游戏的逻辑","link":"#游戏的逻辑","children":[{"level":3,"title":"游戏里的各种物体——组装！","slug":"游戏里的各种物体——组装！","link":"#游戏里的各种物体——组装！","children":[]},{"level":3,"title":"游戏循环——性能黑洞？","slug":"游戏循环——性能黑洞？","link":"#游戏循环——性能黑洞？","children":[]}]},{"level":2,"title":"关于 Rust 本身","slug":"关于-rust-本身","link":"#关于-rust-本身","children":[{"level":3,"title":"derive","slug":"derive","link":"#derive","children":[]},{"level":3,"title":"所有权，所有权，还是所有权","slug":"所有权，所有权，还是所有权","link":"#所有权，所有权，还是所有权","children":[]}]}],"relativePath":"pages/posts/learning/write-a-roguelike-game-with-tcod-rs.md","path":"/home/runner/work/charliedu2000.github.io/charliedu2000.github.io/pages/posts/learning/write-a-roguelike-game-with-tcod-rs.md","lastUpdated":1699970883000}'),f={name:"pages/posts/learning/write-a-roguelike-game-with-tcod-rs.md",data(){return{data:n,frontmatter:n.frontmatter}},setup(){m("pageData",n)}},k=e("p",null,[e("s",null,"这是一篇水文。")],-1),v={id:"为什么写了这个么东西呢？",tabindex:"-1"},b=e("p",null,"那么，一知半解的 Rust + Roguelike 游戏之旅就这么拉开了序幕。",-1),R=e("p",null,[e("em",null,"当然不会贴具体的代码和过程，毕竟基本上是按教程做的，不会有太多差异。")],-1),w={id:"什么是-roguelike？",tabindex:"-1"},$=e("p",null,"根据维基百科的描述，Roguelike 游戏有一些明确的特点，包括随机生成地牢、使用永久死亡机制和回合制等等（柏林准则）。在最直观的元素——画面上，早期的 Roguelike 游戏往往使用一连串的 ASCII 或者 ANSI 字符来表示。其他的也没必要说太多，知道这些就够用了。",-1),N=e("p",null,"不过看了才知道，像 Hades 这样的游戏已经比传统的 Roguelike 简单了很多。这算是降低了一点门槛吧。",-1),C={id:"游戏的逻辑",tabindex:"-1"},T=e("p",null,"真正上手做游戏之前最大的困惑就是游戏的运行逻辑该如何实现，各种元素应该如何放到代码里面组成想要的那个东西。趁着现在还没忘完，来梳理一下。",-1),x={id:"游戏里的各种物体——组装！",tabindex:"-1"},S=e("p",null,"游戏里最直观的就是能看到、能互动的各种物体了。它们会有很多不同，比如一个敌人单位和一个友好的 NPC 的属性、行为等当然会不一样。但是它们也会有很多相同之处，比方说敌人和 NPC 都可能会移动，这部分代码很可能一样，不太可能把它们分别写好几遍。怎么在代码层面描述这些不同和共同之处？",-1),V=e("p",null,"之前尝试用 Java 写的时候，可以利用面向对象的特点，把一些共同的部分——例如 move ——抽象成接口，不同的物体就可以分别实现这些接口，实现各种功能自由组合的直观效果。然而 Rust 似乎没有一般意义上的面向对象这个概念（它甚至都不是个面向对象的语言），所幸通过结构体的一些操作能实现一样的效果。利用特性可以实现一些接口，在子类中定义父类的实例可以变相实现继承。",-1),y=e("p",null,[t("比方说有一个具有战斗相关属性的类型 "),e("code",null,"Fighter"),t("，如果是 Java 就可以把它写成接口，放在子类里面实现，而 Rust 要直接写出实现，在 "),e("code",null,"Object"),t(" 里定义一个 "),e("code",null,"Option<Fighter>"),t("，当这个 "),e("code",null,"Fighter"),t(" 有确定的实例时它就是一个战斗单位（玩家、敌人等）。像是用各种零件组装出一个完整的机器一样。")],-1),A=e("p",null,"这样一来就清楚了，可以把各种功能属性单独包装起来，用这种组合的方式实现具有复杂属性的类型。",-1),B={id:"游戏循环——性能黑洞？",tabindex:"-1"},D=e("p",null,"看过一些有关游戏实现的文章之后，我悟了：游戏可以在一个循环中进行，尤其是这种玩家行动-怪物行动的模式，实在是再合适不过了。",-1),J=e("p",null,"开始游戏其实就是进入程序的主循环，我按照教程做下来，主循环会依次完成这些任务：",-1),O=e("ol",null,[e("li",null,"清除前一帧"),e("li",null,"检测、记录鼠标键盘输入事件"),e("li",null,"重新绘制画面"),e("li",null,"计算经验值"),e("li",null,"根据玩家行动退出游戏或使怪物行动")],-1),P=e("p",null,"具体每一步怎么实现就不赘述了，展示信息、修改属性数值什么的还算比较常规。",-1),Z=e("p",null,[t("按照这样的思路，游戏的每一次循环都会对所有数据来一次检查，如果是比较复杂的游戏，计算量应该会很大。"),e("s",null,"游戏吃性能的原因之一？")],-1),F={id:"关于-rust-本身",tabindex:"-1"},I=e("p",null,"在整个实现过程中我又把之前忘掉的 Rust 相关的注意事项稍微拾起了一点，见识到了之前没来得及看的更高级操作，果然要把工具用得更好就是要多用。",-1),q={id:"derive",tabindex:"-1"},H=e("p",null,[t("按照比较官方的说法，derive 应该是用来自动实现一些 trait （特性？），比方说用了 "),e("code",null,"#[derive(Debug)]"),t("，就不用再为结构体手动写 "),e("code",null,"std::fmt::Debug"),t(" 的实现，算是非常方便了。还可以自己写 derive 宏。")],-1),M={id:"所有权，所有权，还是所有权",tabindex:"-1"},U=e("p",null,"Rust 对变量的生命周期控制得很严格，之前没怎么写 Rust 的我刚上手写这个游戏时总是碰一鼻子灰。回头又看了看 Rust “圣经”里面关于所有权和生命周期的章节，Rust 中变量与数据的交互包括移动和克隆，值得注意。不过这方面的错误应该过不了编译器那一关，多写写自然也就不会犯了。",-1),j=e("p",null,[t("关于所有权，比较有意思的还有 "),e("code",null,"Copy"),t(" trait、返回值转移所有权以及引用借用等。")],-1),z=e("p",null,"话说为什么对所有权有这么多规定呢？可能和内存管理有关？先按下不表，之后再说（懒癌发作）。",-1),G=e("p",null,"那么就先到这里，写这篇水文距离我跟着教程做完已经有一段时间了，也忘了很多想写进来的东西，有一点遗憾。",-1);function L(i,W,E,K,a,Q){const r=p,d=u;return _(),c(d,{frontmatter:a.frontmatter,data:a.data},{"main-content-md":l(()=>[k,e("h2",v,[t("为什么写了这个么东西呢？ "),o(r,{class:"header-anchor",href:"#为什么写了这个么东西呢？","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),e("p",null,[t("这是个好问题，动机永远是关键。第一点呢，我这个人玩心很重，能不做任务就绝对不会做，用一切时间来玩（或者睡），在玩的过程中逐渐有了自己做个游戏的想法。正巧托室友的福，我发现了这个项目合集："),o(r,{href:"https://github.com/codecrafters-io/build-your-own-x",target:"_blank",rel:"noreferrer"},{default:l(()=>[t("Build your own x")]),_:1}),t("，里面有好几个小游戏的实现教程。至于第二点，我最近对 Rust 比较感兴趣，还心血来潮用它写了个课程实验。看到合集里有 Rust 的游戏，我觉得有点惊喜，就选了一个跟着做一下。")]),g(" more "),e("p",null,[t("就是"),o(r,{href:"https://tomassedovic.github.io/roguelike-tutorial/index.html",target:"_blank",rel:"noreferrer"},{default:l(()=>[t("这个")]),_:1}),t("，用 tcod-rs 来做的 Roguelike。之前玩 Hades 很上头，发现了 Roguelike 的吸引力，就它了。")]),b,R,e("h2",w,[t("什么是 Roguelike？ "),o(r,{class:"header-anchor",href:"#什么是-roguelike？","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),e("blockquote",null,[e("p",null,[o(r,{href:"https://zh.wikipedia.org/wiki/Roguelike",target:"_blank",rel:"noreferrer"},{default:l(()=>[t("Roguelike - 维基百科")]),_:1})])]),$,N,e("h2",C,[t("游戏的逻辑 "),o(r,{class:"header-anchor",href:"#游戏的逻辑","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),T,e("h3",x,[t("游戏里的各种物体——组装！ "),o(r,{class:"header-anchor",href:"#游戏里的各种物体——组装！","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),S,V,y,A,e("h3",B,[t("游戏循环——性能黑洞？ "),o(r,{class:"header-anchor",href:"#游戏循环——性能黑洞？","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),D,J,O,P,Z,e("h2",F,[t("关于 Rust 本身 "),o(r,{class:"header-anchor",href:"#关于-rust-本身","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),I,e("h3",q,[t("derive "),o(r,{class:"header-anchor",href:"#derive","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),H,e("blockquote",null,[e("p",null,[t("备注："),o(r,{href:"https://doc.rust-lang.org/book/ch19-06-macros.html",target:"_blank",rel:"noreferrer"},{default:l(()=>[t("Macros")]),_:1})])]),e("h3",M,[t("所有权，所有权，还是所有权 "),o(r,{class:"header-anchor",href:"#所有权，所有权，还是所有权","aria-hidden":"true"},{default:l(()=>[t("#")]),_:1})]),U,j,z,G]),"main-header":l(()=>[s(i.$slots,"main-header")]),"main-header-after":l(()=>[s(i.$slots,"main-header-after")]),"main-nav":l(()=>[s(i.$slots,"main-nav")]),"main-content":l(()=>[s(i.$slots,"main-content")]),"main-content-after":l(()=>[s(i.$slots,"main-content-after")]),"main-nav-before":l(()=>[s(i.$slots,"main-nav-before")]),"main-nav-after":l(()=>[s(i.$slots,"main-nav-after")]),comment:l(()=>[s(i.$slots,"comment")]),footer:l(()=>[s(i.$slots,"footer")]),aside:l(()=>[s(i.$slots,"aside")]),"aside-custom":l(()=>[s(i.$slots,"aside-custom")]),default:l(()=>[s(i.$slots,"default")]),_:3},8,["frontmatter","data"])}const re=h(f,[["render",L]]);export{ie as __pageData,re as default};
