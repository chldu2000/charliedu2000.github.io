<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>愚人而已</title>
  
  <subtitle>以愚者之名攀上顶峰</subtitle>
  <link href="https://afool.top/atom.xml" rel="self"/>
  
  <link href="https://afool.top/"/>
  <updated>2022-11-24T15:17:58.137Z</updated>
  <id>https://afool.top/</id>
  
  <author>
    <name>零歌</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深度学习入门：卷积神经网络</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-cnn/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-cnn/</id>
    <published>2022-11-24T14:52:03.000Z</published>
    <updated>2022-11-24T15:17:58.137Z</updated>
    
    <content type="html"><![CDATA[<p><strong>施工中</strong></p><p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li><li><a href="https://github.com/oreilly-japan/deep-learning-from-scratch">上述书籍作者提供的代码</a></li></ul><h2 id="CNN（卷积神经网络）是什么样的？"><a href="#CNN（卷积神经网络）是什么样的？" class="headerlink" title="CNN（卷积神经网络）是什么样的？"></a>CNN（卷积神经网络）是什么样的？</h2><p>之前用到的神经网络中，相邻层所有的神经元之间都有连接，那么这些层就是所谓的<strong>全连接层</strong>。前面的全连接的神经网络中的每层可以看作是由 Affine 层和激活函数 ReLU&#x2F;Sigmoid 层组成的，而最后是由 Softmax 层输出结果，整体的结构就像这样：</p><p><img src="https://s2.loli.net/2022/11/24/K1lrG2doEiOvzfT.png" alt="基于全连接层（Affine 层）的网络的例子" loading="lazy"></p><p>而 CNN 的结构就像是这样：</p><p><img src="https://s2.loli.net/2022/11/24/9itHWlSMq85uswc.png" alt="CNN 的例子" loading="lazy"></p><p>引入了卷积层（Convolution）和池化层（Pooling），Affine-ReLU 的连接方式被换成了 Convolution-ReLU-Pooling（不过有时会省略池化层）。</p><p><em>接近输出的位置有时也会使用全连接层的那种结构。</em></p><p><del>那么就从新引入的两种层结构讲起吧。</del></p><h2 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h2><p>为什么要引入卷积层呢？这是因为全连接层（Affine）存在一些问题。比如前面使用 MNIST 数据集的例子，图像本来是1通道、高28像素、长28像素的（1, 28, 28）三维形状，但输入时却<em>被排成一列，以784个数据的形式输入到最开始的 Affine 层</em>。对于图像而言，邻近的像素之间可能存在某种关联性，但是全连接层忽视了图像数据原本的形状，显然丢掉了这种信息。</p><p>而卷积层不会有这个问题，它能按图像数据原本的三维形式接收它们，并以同样的形式传到下一层。这样就有可能找出藏在图像形状里的信息。</p><h3 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;施工中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oreilly-japan/deep-le</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="卷积神经网络" scheme="https://afool.top/tags/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门：与学习相关的技巧</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-some-tricks-related-with-learning/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-some-tricks-related-with-learning/</id>
    <published>2022-11-04T15:36:13.000Z</published>
    <updated>2022-11-10T14:06:53.190Z</updated>
    
    <content type="html"><![CDATA[<p><strong>施工中</strong></p><p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li><li><a href="https://github.com/oreilly-japan/deep-learning-from-scratch">上述书籍作者提供的代码</a></li></ul><h2 id="参数的更新"><a href="#参数的更新" class="headerlink" title="参数的更新"></a>参数的更新</h2><p>实际问题中参数空间可能非常复杂，很难快速找到最优解。</p><h3 id="SGD"><a href="#SGD" class="headerlink" title="SGD"></a>SGD</h3><p>SGD 的策略很好理解，就是沿着梯度方向更新参数，寻找使损失函数值尽可能小的参数。可以写成如下式子：</p><p>$$ \boldsymbol{W} \leftarrow \boldsymbol{W} - \eta \frac{\partial L}{\partial \boldsymbol{W}} $$</p><p>其中 $\boldsymbol{W}$ 表示要更新的权重参数，$\frac{\partial L}{\partial \boldsymbol{W}}$ 是损失函数关于 $\boldsymbol{W}$ 的梯度，$\eta$ 表示学习率（一般取0.1或0.01等事先确定的值）。</p><p>将 SGD 的方法用类的形式实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SGD</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr  <span class="token comment"># 学习率</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">,</span> grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre><p><code>SGD</code> 可以作为代码中的 <code>optimizer</code> 来进行参数更新。只要不同的最优化方法都实现 <code>update(params, grads)</code>，就可以用 <code>optimizer.update(params, grads)</code> 的形式在代码中完成更新参数的步骤。</p><p>从上面可以看出，SGD 的实现也很简单。然而在某些情况下（比如梯度并没有指向最小值的方向），SGD 的效率并不理想。例如，对于函数 $f(x, y) &#x3D; \frac{1}{20} x^2 + y^2$，它的函数图形和等高线如图所示：</p><p><img src="https://s2.loli.net/2022/11/05/1cVihLHDPk8z3K2.png" alt="f(x, y) 的图像和等高线" loading="lazy"></p><p>梯度如图所示：</p><p><img src="https://s2.loli.net/2022/11/05/Cdzb3iq8xgp4m9M.png" alt="f(x, y) 的梯度" loading="lazy"></p><p>显然函数在 $(x, y) &#x3D; (0, 0)$ 处取得最小值，但是在很多地方，梯度并不指向 $(0, 0)$。对这个函数使用 SGD，比方说从 $(x, y) &#x3D; (-7.0, -2.0)$ 处开始搜索，更新路径会像这样：</p><p><img src="https://s2.loli.net/2022/11/05/7NsIKoBmYT4R6x2.png" alt="更新路径" loading="lazy"></p><p>由于很多地方的梯度不指向 $(0, 0)$，这个更新路径呈“之”字形，显然不是很理想，效率不高。所以我们需要其他的更新方法。</p><h3 id="Momentum"><a href="#Momentum" class="headerlink" title="Momentum"></a>Momentum</h3><p>Momentum 方法引入了“速度”，“速度”的更新可以看作物体在梯度方向上受力：</p><p>$$ \boldsymbol{v} \leftarrow \alpha \boldsymbol{v} - \eta \frac{\partial L}{\partial \boldsymbol{W}} $$</p><p>$$ \boldsymbol{W} \leftarrow \boldsymbol{W} + \boldsymbol{v} $$</p><p>$\alpha \boldsymbol{v}$ 在物体不受力时会使速度衰减（$\alpha$ 一般取零点几的值），可以看作空气等带来的阻力。</p><p>Momentum 方法的代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Momentum</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> momentum<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>momentum <span class="token operator">=</span> momentum        self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">,</span> grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>v <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>val<span class="token punctuation">)</span>  <span class="token comment"># “速度”的形状与参数相同</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>keys<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>momentum <span class="token operator">*</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> self<span class="token punctuation">.</span>v<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre><p>对于之前的问题，Momentum 方法的更新路径：</p><p><img src="https://s2.loli.net/2022/11/05/AT4OMalyiK5mEJ3.png" alt="Momentum 方法的更新路径" loading="lazy"></p><h3 id="AdaGrad"><a href="#AdaGrad" class="headerlink" title="AdaGrad"></a>AdaGrad</h3><p>AdaGrad 方法基于“学习率衰减”的想法：随着学习的进行，使学习率逐渐减小。实际上，AdaGrad 方法在学习过程中会为参数的每个元素调整学习率。</p><p>$$ \boldsymbol{h} \leftarrow \boldsymbol{h} + \frac{\partial L}{\partial \boldsymbol{W}} \odot \frac{\partial L}{\partial \boldsymbol{W}} $$</p><p>$$ \boldsymbol{W} \leftarrow \boldsymbol{W} - \eta \frac{1}{\sqrt{\boldsymbol{h}}} \frac{\partial L}{\partial \boldsymbol{W}} $$</p><p>$\odot$ 表示对应矩阵元素的乘法，$\boldsymbol{h}$ 表示以前所有梯度值的平方和。显然参数中变动较大的元素的学习率会变得更小（准确地说是学习率会被乘以一个更小的因数）。</p><p>实现过程：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AdaGrad</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>lr <span class="token operator">=</span> lr        self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> params<span class="token punctuation">,</span> grads<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>h <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>h <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> params<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>val<span class="token punctuation">)</span>        <span class="token keyword">for</span> key <span class="token keyword">in</span> params<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">+=</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">*</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span>            params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> self<span class="token punctuation">.</span>lr <span class="token operator">*</span> grads<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token punctuation">(</span>np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span>  <span class="token comment"># 1e-7避免将0用作除数</span></code></pre><p>这个方法在 $f(x, y)$ 中的更新路径：</p><p><img src="https://s2.loli.net/2022/11/05/4dN1YzWqM8vLkyn.png" alt="AdaGrad 方法的更新路径" loading="lazy"></p><p>因为 <code>y</code> 方向的更新幅度较大，在这个方向上的学习率衰减也就更明显。</p><p>当然还有别的方法，比如融合了 Momentum 和 AdaGrad 的 Adam 方法，就不再说明了。<del>（因为原书中也只给了相关论文和代码实现。）</del></p><p>使用不同的方法可以得到不同的更新路径，对于前面的问题来说 AdaGrad 能得到比较理想的路径，但如果换一个问题，可能其他方法会有更好的结果。<del>（那是自然。）</del></p><h2 id="权重的初始值"><a href="#权重的初始值" class="headerlink" title="权重的初始值"></a>权重的初始值</h2><h3 id="初始值可以为0吗"><a href="#初始值可以为0吗" class="headerlink" title="初始值可以为0吗"></a>初始值可以为0吗</h3><p><strong>权值衰减</strong>是一种抑制过拟合的技巧，它以减小权重参数的值为目的进行学习。如果想减小权重，最好的方法是一开始就把权重设定为较小的值。那把权重的初始值设为0（说到更普遍的情况，其实是把权重初始值设置为一样的值）呢？</p><p>考虑误差反向传播就可以发现，将权重初始值设置为一样的值，反向传播时也会被更新为一样的值。都是一样的值的话神经网络为什么要有许多权重呢？</p><p><del>原来如此，所以必须随机生成初始值！</del></p><h3 id="隐藏层的激活函数层的分布"><a href="#隐藏层的激活函数层的分布" class="headerlink" title="隐藏层的激活函数层的分布"></a>隐藏层的激活函数层的分布</h3><p><del>这里书上举的例子就不那么详细地复述了……</del></p><p>向一个5层神经网络传入随机生成的输入数据，激活函数使用 sigmoid 函数，权重使用标准差为1的高斯分布随机生成，用直方图绘制出各层激活值（激活函数的输出）的分布：</p><p><img src="https://s2.loli.net/2022/11/10/d9TXaiqe3nrFLGv.png" alt="使用标准差为1的高斯分布作为权重初始值时的各层激活值的分布" loading="lazy"></p><p>可以发现，各层的激活值都集中在0和1附近。对于 sigmoid 函数，在0和1附近的导数都比较接近0，那么这样的数据会造成反向传播中梯度的值不断变小，也就是所谓“<strong>梯度消失</strong>”</p><p>如果将权重的标准差设为0.01，各层的激活值分布就会变成：</p><p><img src="https://s2.loli.net/2022/11/10/wzlvkH3OnQyoBGJ.png" alt="使用标准差为1的高斯分布作为权重初始值时的各层激活值的分布" loading="lazy"></p><p>激活值集中在0.5附近，不会有梯度消失的问题，但是分布太过集中。显然不能让几乎所有的神经元都输出一样的值，实际应用中一般使用“Xavier 初始值”，可以避免这些问题。</p><p>Xavier 初始值控制权重尺度（标准差）的方式是：如果前一层的节点数为n，则初始值使用标准差为 $\frac{1}{\sqrt{n}}$ 的分布。</p><p>实现方式可以是：</p><pre class="language-python" data-language="python"><code class="language-python">pre_node_num <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment"># 前一层的节点数</span>w <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>pre_node_num<span class="token punctuation">,</span> node_num<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>pre_node_num<span class="token punctuation">)</span></code></pre><p>使用 Xavier 初始值得到的各层激活值分布：</p><p><img src="https://s2.loli.net/2022/11/10/vRxCPo5d1pUENQm.png" alt="使用 Xavier 初始值作为权重初始值时的各层激活值的分布" loading="lazy"></p><p>比之前的分布更有广度。</p><blockquote><p>如果用 tanh 函数（双曲线函数）代替 sigmoid 函数，可以改善后面的层激活值歪斜的问题。</p></blockquote><h3 id="ReLU-的权重初始值"><a href="#ReLU-的权重初始值" class="headerlink" title="ReLU 的权重初始值"></a>ReLU 的权重初始值</h3><blockquote><p>Xavier 初始值是以激活函数是线性函数为前提而推导出来的。因为 sigmoid 函数和 tanh 函数左右对称，且中央附近可以视作线性函数，所以适合使用 Xavier 初始值。但当激活函数使用 ReLU 时，一般推荐使用 ReLU 专用的初始值，也就是 Kaiming He 等人推荐的初始值，也称为“He 初始值”。当前一层的节点数为 n 时，He 初始值使用标准差为 $\sqrt{\frac{2}{n}}$ 的高斯分布。当 Xavier 初始值是 $\sqrt{\frac{1}{n}}$ 时，（直观上）可以解释为，因为 ReLU 的负值区域的值为0，为了使它更有广度，所以需要2倍的系数。</p></blockquote><p>用作者给出的 <code>ch06/weight_init_compare.py</code> 可以比较使用不同权重初始值时神经网络的学习情况。</p><h2 id="Batch-Normalization"><a href="#Batch-Normalization" class="headerlink" title="Batch Normalization"></a>Batch Normalization</h2><p>前面调整权重的初始值是为了使各层的激活值分布有合适的广度，还有一种办法可以“强制性”地调整激活值的分布来达到这个目的。</p><h3 id="Batch-Norm-算法（前向传播）"><a href="#Batch-Norm-算法（前向传播）" class="headerlink" title="Batch Norm 算法（前向传播）"></a>Batch Norm 算法（前向传播）</h3><blockquote><p>Batch Norm有以下优点。</p><ul><li>可以使学习快速进行（可以增大学习率）。</li><li>不那么依赖初始值（对于初始值不用那么神经质）。</li><li>抑制过拟合（降低Dropout等的必要性）。</li></ul></blockquote><p>Batch Norm 的思路是调整各层的激活值分布使其拥有适当的广度，为此需要在神经网络中插入对数据分布进行正规化的层（Batch Norm层）：</p><p><img src="https://s2.loli.net/2022/11/10/4HlIvRQusAUzOqk.png" alt="使用了 Batch Normalization 的神经网络的例子" loading="lazy"></p><p>Batch Norm 是以学习时的 mini-batch 为单位，按 mini-batch 进行正规化，数学式表示：</p><p>$$ \mu_B \leftarrow \frac{1}{m} \sum_{i &#x3D; 1}^m x_i $$</p><p>$$ \sigma_B^2 \leftarrow \frac{1}{m} \sum_{i &#x3D; 1}^m (x_i - \mu_B)^2 $$</p><p>$$ \hat{x}_i \leftarrow \frac{x_i - \mu_B}{\sqrt{\sigma_B^2 + \epsilon}} $$</p><p>对 mini-batch 的 m 个输入数据的集合 $B &#x3D; { x_1, x_2, … , x_m }$ 求均值和方差 。然后，对输入数据进行均值为0、方差为1（合适的分布）的正规化。其中 $\epsilon$ 是一个微小值。</p><p>Batch Norm 层会将正规化后的数据进行缩放和平移的变换：</p><p>$$ y_i \leftarrow \gamma \hat{x}_i + \beta $$</p><p>一开始参数 $\gamma &#x3D; 1$，$\beta &#x3D; 0$，可以通过学习调整到合适的值。</p><h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h3 id="过拟合"><a href="#过拟合" class="headerlink" title="过拟合"></a>过拟合</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;施工中&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oreilly-japan/deep-le</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门：误差反向传播法</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-error-back-propagation/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-error-back-propagation/</id>
    <published>2022-10-17T15:06:12.000Z</published>
    <updated>2022-11-09T12:40:26.324Z</updated>
    
    <content type="html"><![CDATA[<p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li><li><a href="https://github.com/oreilly-japan/deep-learning-from-scratch">上述书籍作者提供的代码</a></li></ul><p>之前成功实现了一个神经网络的学习过程，但是实际开始计算就会发现整个过程实在是太慢了……对所有参数都要计算梯度，而且要计算很多遍，显然我们需要一种能更快地计算出权重参数梯度的方法。</p><h2 id="关于计算图"><a href="#关于计算图" class="headerlink" title="关于计算图"></a>关于计算图</h2><p>计算图能够将计算过程用图形（数据结构图，用多个节点和边表示）表示出来。</p><h3 id="计算图与反向传播"><a href="#计算图与反向传播" class="headerlink" title="计算图与反向传播"></a>计算图与反向传播</h3><p>使用计算图是为了直观理解反向传播法，那至少应该能先看懂计算图才行。</p><p>书上的例题1：太郎在超市买了2个100日元一个的苹果，消费税是10%，请计算支付金额。过程很简单，先算出2个苹果的价格，再算出加上消费税之后的花销。用图表示：</p><p><img src="https://s2.loli.net/2022/10/18/4hJ7QlSEdDjKzn3.png" alt="基于计算图的答案" loading="lazy"></p><p>在这张图中，苹果单价流到“$\times 2$”节点，又被传递给“$\times 1.1$”节点，得出最后的价格。图中“$\times 2$”和“$\times 1.1$”是作为一个运算的整体，也可以只用 $\circ$ 表示乘法，将“2”和“1.1”等作为变量标在外面：</p><p><img src="https://s2.loli.net/2022/10/18/iW1Ge4oqmv9Pb27.png" alt="基于计算图的答案-将“苹果的个数”和“消费税”标在外面" loading="lazy"></p><p>依此类推，其他问题也可以用这个方法表示，比方说太郎再买若干橘子，可以把橘子个数和单价传给乘法的节点，再把算出的橘子价格和苹果价格都传到一个加法节点，将总的价格拿去算消费税。用计算图解题的步骤可以归纳为：</p><ol><li>构建计算图；</li><li>在计算图上从左到右进行计算。</li></ol><p>上面“从左到右进行计算”的过程就是所谓<strong>正向传播</strong>，那么从图上从右向左就是<strong>反向传播</strong>。</p><h3 id="局部计算与其他"><a href="#局部计算与其他" class="headerlink" title="局部计算与其他"></a>局部计算与其他</h3><p>尽管问题的全局可能非常复杂，但是计算图能够分节点将整个计算过程分解成简单的计算。</p><p>此外，可以借助计算图反向传播高效计算导数。比方说前面计算了购买2个苹果时加上消费税最终需要支付的金额，如果想知道道苹果价格的上涨会在多大程度上影响最终的支付金额（即支付金额关于苹果价格的导数），可以看这张图：</p><p><img src="https://s2.loli.net/2022/10/20/RlpfhqoJxEeiCaH.png" alt="基于反向传播的导数的传递" loading="lazy"></p><p>反向传播传递“局部导数”，在这个例子中反向传播从右向左传递导数的值（1、1.1、2.2），由此可知支付金额关于苹果价格的导数值是2.2。</p><p>使用这种方法，中间求得的导数结果可以被共享，从而提升计算效率。</p><h2 id="链式法则"><a href="#链式法则" class="headerlink" title="链式法则"></a>链式法则</h2><p>反向传播传递局部导数的原理是基于<strong>链式法则</strong>的，它如何对应计算图上的反向传播呢？</p><h3 id="计算图的反向传播"><a href="#计算图的反向传播" class="headerlink" title="计算图的反向传播"></a>计算图的反向传播</h3><p>假设有 $y&#x3D;f(x)$，它的反向传播：</p><p><img src="https://s2.loli.net/2022/10/20/QnoPifB5gbxHaW1.png" alt="计算图的反向传播-沿着反方向乘上局部导数" loading="lazy"></p><p>如图所示，反向传播的计算顺序是将上游传过来的值（信号 $E$）乘以节点的局部导数（这里是 $y$ 关于 $x$ 的导数 $\frac{\partial y}{\partial x}$）再传给下一个节点。</p><h3 id="链式法则的原理"><a href="#链式法则的原理" class="headerlink" title="链式法则的原理"></a>链式法则的原理</h3><p>链式法则要先从复合函数说起，复合函数就是由多个函数构成的函数。例如 $z &#x3D; (x+y)^2$ 是由下面两个式子构成的：</p><p>$$ z &#x3D; t^2 $$</p><p>$$ t &#x3D; x + y $$</p><p>链式法则的定义：<em>如果某个函数由复合函数表示，则该复合函数的导数可以用构成复合函数的各个函数的导数的乘积表示</em>。也就是说，对于上面的复合函数，有：</p><p>$$ \frac{\partial z}{\partial x} &#x3D; \frac{\partial z}{\partial t} \frac{\partial t}{\partial x} $$</p><p>尝试使用链式法则求 $\frac{\partial z}{\partial x}$，有：</p><p>$$ \frac{\partial z}{\partial t} &#x3D; 2 t $$</p><p>$$ \frac{\partial t}{\partial x} &#x3D; 1 $$</p><p>那么：</p><p>$$ \frac{\partial z}{\partial x} &#x3D; \frac{\partial z}{\partial t} \frac{\partial t}{\partial x} &#x3D; 2t \cdot 1 &#x3D; 2 (x + y) $$</p><h3 id="链式法则和计算图"><a href="#链式法则和计算图" class="headerlink" title="链式法则和计算图"></a>链式法则和计算图</h3><p>用计算图表示上面的计算过程：</p><p><img src="https://s2.loli.net/2022/10/20/a6QUWR3ypTjJqDm.png" alt="计算图表示链式法则的计算过程，**2表示平方" loading="lazy"></p><p>以“**2”节点为例，正向传播时输入为 $t$，输出为 $z$，所以局部导数为 $\frac{\partial z}{\partial t}$，反向传播时的输入为 $\frac{\partial z}{\partial z}$（1），将其乘以局部导数再传给下一个节点。最终代入各个局部导数可以得到结果。</p><h2 id="反向传播"><a href="#反向传播" class="headerlink" title="反向传播"></a>反向传播</h2><h3 id="加法节点的反向传播"><a href="#加法节点的反向传播" class="headerlink" title="加法节点的反向传播"></a>加法节点的反向传播</h3><p>以 $z &#x3D; x + y$ 为例，它的导数：</p><p>$$ \frac{\partial z}{\partial x} &#x3D; 1 $$</p><p>$$ \frac{\partial z}{\partial y} &#x3D; 1 $$</p><p>用计算图表示（$\frac{\partial L}{\partial z}$ 表示反向传播时上游传过来的导数）：</p><p><img src="https://s2.loli.net/2022/10/20/EM6uPf52a3kHmCc.png" alt="加法节点的反向传播" loading="lazy"></p><p>在本例中，因为 $\frac{\partial z}{\partial x}$ 和 $\frac{\partial z}{\partial y}$ 都是1，加法节点就是把上游传过来的导数乘以1再传给下一个节点。</p><h3 id="乘法节点的反向传播"><a href="#乘法节点的反向传播" class="headerlink" title="乘法节点的反向传播"></a>乘法节点的反向传播</h3><p>以 $z &#x3D; x y$ 为例，它的导数：</p><p>$$ \frac{\partial z}{\partial x} &#x3D; y $$</p><p>$$ \frac{\partial z}{\partial y} &#x3D; x $$</p><p>画出计算图：</p><p><img src="https://s2.loli.net/2022/10/20/5Qo7dfV9tECyL1M.png" alt="乘法节点的反向传播" loading="lazy"></p><p>如果正向的时候信号是 $x$，反向的时候局部导数就是 $y$；正向的时候信号是 $y$，反向的时候局部导数就是 $x$。表现为一种“翻转”的关系。乘法节点需要保留正向传播时传入的参数信息。</p><h2 id="简单层的实现"><a href="#简单层的实现" class="headerlink" title="简单层的实现"></a>简单层的实现</h2><p>知道了反向传播是怎么回事，不妨再来看看怎么用代码实现相关的乘法和加法节点（“层”）。</p><h3 id="乘法层的实现"><a href="#乘法层的实现" class="headerlink" title="乘法层的实现"></a>乘法层的实现</h3><p>对于 $z &#x3D; x y$，有实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MulLayer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        self<span class="token punctuation">.</span>y <span class="token operator">=</span> y        out <span class="token operator">=</span> x <span class="token operator">*</span> y        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> self<span class="token punctuation">.</span>y  <span class="token comment"># 翻转 x 和 y</span>        dy <span class="token operator">=</span> dout <span class="token operator">*</span> self<span class="token punctuation">.</span>x        <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dy</code></pre><p>用这个乘法层实现最开始说的买苹果的问题，计算图如下：</p><p><img src="https://s2.loli.net/2022/10/20/IJtF3jzyrCfnOQ9.png" alt="买两个苹果" loading="lazy"></p><p>正向传播的计算过程：</p><pre class="language-python" data-language="python"><code class="language-python">apple <span class="token operator">=</span> <span class="token number">100</span>apple_num <span class="token operator">=</span> <span class="token number">2</span>tax <span class="token operator">=</span> <span class="token number">1.1</span>mul_apple_layer <span class="token operator">=</span> MulLayer<span class="token punctuation">(</span><span class="token punctuation">)</span>mul_tax_layer <span class="token operator">=</span> MulLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 正向传播过程</span>apple_price <span class="token operator">=</span> mul_apple_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>apple<span class="token punctuation">,</span> apple_num<span class="token punctuation">)</span>price <span class="token operator">=</span> mul_tax_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>apple_price<span class="token punctuation">,</span> tax<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>  <span class="token comment"># 结果是220.00000000000003</span></code></pre><p>反向传播求过程中各个变量的导数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 反向传播过程</span>dprice <span class="token operator">=</span> <span class="token number">1</span>dapple_price<span class="token punctuation">,</span> dtax <span class="token operator">=</span> mul_tax_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dprice<span class="token punctuation">)</span>dapple<span class="token punctuation">,</span> dapple_num <span class="token operator">=</span> mul_apple_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dapple_price<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dapple<span class="token punctuation">,</span> dapple_num<span class="token punctuation">,</span> dtax<span class="token punctuation">)</span>  <span class="token comment"># 结果是 2.2 110.00000000000001 200</span></code></pre><h3 id="加法层的实现"><a href="#加法层的实现" class="headerlink" title="加法层的实现"></a>加法层的实现</h3><p>对于 $z &#x3D; x + y$，加法层有实现如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">AddLayer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> x <span class="token operator">+</span> y        <span class="token keyword">return</span> out     <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> <span class="token number">1</span>        dy <span class="token operator">=</span> dout <span class="token operator">*</span> <span class="token number">1</span>        <span class="token keyword">return</span> dx<span class="token punctuation">,</span> dy</code></pre><p>要解决的问题是买2个苹果和3个橘子，计算图如下：</p><p><img src="https://s2.loli.net/2022/10/21/KieElhcZmUMOJCQ.png" alt="买2个苹果和3个橘子" loading="lazy"></p><p>正向传播和反向传播的过程：</p><pre class="language-python" data-language="python"><code class="language-python">apple <span class="token operator">=</span> <span class="token number">100</span>apple_num <span class="token operator">=</span> <span class="token number">2</span>orange <span class="token operator">=</span> <span class="token number">150</span>orange_num <span class="token operator">=</span> <span class="token number">3</span>tax <span class="token operator">=</span> <span class="token number">1.1</span>mul_apple_layer <span class="token operator">=</span> MulLayer<span class="token punctuation">(</span><span class="token punctuation">)</span>mul_orange_layer <span class="token operator">=</span> MulLayer<span class="token punctuation">(</span><span class="token punctuation">)</span>add_apple_orange_layer <span class="token operator">=</span> AddLayer<span class="token punctuation">(</span><span class="token punctuation">)</span>mul_tax_layer <span class="token operator">=</span> MulLayer<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 前向传播过程</span>apple_price <span class="token operator">=</span> mul_apple_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>apple<span class="token punctuation">,</span> apple_num<span class="token punctuation">)</span>  <span class="token comment">#(1)</span>orange_price <span class="token operator">=</span> mul_orange_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>orange<span class="token punctuation">,</span> orange_num<span class="token punctuation">)</span>  <span class="token comment">#(2)</span>all_price <span class="token operator">=</span> add_apple_orange_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>apple_price<span class="token punctuation">,</span> orange_price<span class="token punctuation">)</span>  <span class="token comment">#(3)</span>price <span class="token operator">=</span> mul_tax_layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>all_price<span class="token punctuation">,</span> tax<span class="token punctuation">)</span>  <span class="token comment">#(4)</span><span class="token comment"># 反向传播过程，要注意与正向传播的计算顺序相反</span>dprice <span class="token operator">=</span> <span class="token number">1</span>dall_price<span class="token punctuation">,</span> dtax <span class="token operator">=</span> mul_tax_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dprice<span class="token punctuation">)</span>  <span class="token comment">#(4)</span>dapple_price<span class="token punctuation">,</span> dorange_price <span class="token operator">=</span> add_apple_orange_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dall_price<span class="token punctuation">)</span>  <span class="token comment">#(3)</span>dorange<span class="token punctuation">,</span> dorange_num <span class="token operator">=</span> mul_orange_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dorange_price<span class="token punctuation">)</span>  <span class="token comment">#(2)</span>dapple<span class="token punctuation">,</span> dapple_num <span class="token operator">=</span> mul_apple_layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dapple_price<span class="token punctuation">)</span>  <span class="token comment">#(1)</span><span class="token keyword">print</span><span class="token punctuation">(</span>price<span class="token punctuation">)</span>  <span class="token comment"># 结果是715.0000000000001</span><span class="token keyword">print</span><span class="token punctuation">(</span>dapple_num<span class="token punctuation">,</span> dapple<span class="token punctuation">,</span> dorange<span class="token punctuation">,</span> dorange_num<span class="token punctuation">,</span>      dtax<span class="token punctuation">)</span>  <span class="token comment"># 结果是110.00000000000001 2.2 3.3000000000000003 165.0 650</span></code></pre><p>与计算图对照，显然能得到正确结果。</p><h2 id="激活函数层的实现"><a href="#激活函数层的实现" class="headerlink" title="激活函数层的实现"></a>激活函数层的实现</h2><p>既然简单的乘法加法等节点能用代码以层的形式实现，那么神经网络中的节点应该也可以，毕竟也没有复杂太多。把构成神经网络的层实现为一个类。先来实现激活函数的 ReLU 层和 Sigmoid 层。</p><h3 id="ReLU-层"><a href="#ReLU-层" class="headerlink" title="ReLU 层"></a>ReLU 层</h3><p>ReLU 函数：</p><p>$$ y &#x3D; \begin{cases} x &amp; (x \gt 0) \\ 0 &amp; (x \le 0) \end{cases} $$</p><p>$y$ 关于 $x$ 的导数：</p><p>$$ \frac{\partial y}{\partial x} &#x3D; \begin{cases} 1 &amp; (x \gt 0) \\ 0 &amp; (x \le 0) \end{cases} $$</p><p>那么，ReLU 层的计算图：</p><p><img src="https://s2.loli.net/2022/10/21/LCrvOc4AmQhdpgz.png" alt="ReLU 层的计算图" loading="lazy"></p><p>代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Relu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># mask 是由 bool 值组成的 numpy 数组</span>        out <span class="token operator">=</span> x<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>        out<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 小于等于0的项置0</span>        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dout<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mask<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 正向传播时输入小于等于0的项对应导数是0</span>        dx <span class="token operator">=</span> dout        <span class="token keyword">return</span> dx</code></pre><h3 id="Sigmoid-层"><a href="#Sigmoid-层" class="headerlink" title="Sigmoid 层"></a>Sigmoid 层</h3><p>Sigmoid 函数：</p><p>$$ y &#x3D; \frac{1}{1 + exp(-x)} $$</p><p>用计算图表示正向传播过程：</p><p><img src="https://s2.loli.net/2022/10/21/TZjQGdIFMoLEUvO.png" alt="Sigmoid 函数的正向传播" loading="lazy"></p><p>Sigmoid 函数的计算过程中出现了新的节点，需要看一看它们如何进行反向传播。</p><p>最后的“&#x2F;”节点表示 $y &#x3D; \frac{1}{x}$，它的导数可以解析性地表示为：</p><p>$$ \begin{aligned} \frac{\partial y}{\partial x} &amp;&#x3D; - \frac{1}{x^2} \\ &amp;&#x3D; - y^2 \end{aligned} $$</p><p>也就是说，反向传播时会将上游传过来的值乘以 $-y^2$（$y$ 是正向传播时该节点的输出）再传给下游。</p><p>这个加法节点反向传播时显然是将上游传过来的值直接传过去。</p><p>“exp” 节点表示 $y &#x3D; exp(x)$，导数如下：</p><p>$$ \frac{\partial y}{\partial x} &#x3D; exp(x) $$</p><p>正向传播时传入的是 $-x$，反向传播时就把上游传过来的值乘以 $exp(-x)$ 再传给下游。</p><p>乘法节点是 $x$ 与 $1$ 相乘，所以反向传播时传给 $x$ 方向的应该是上游的值乘以 $-1$。</p><p>包含反向传播的计算图如下：</p><p><img src="https://s2.loli.net/2022/10/21/Zwpf3F4E8xglh1u.png" alt="Sigmoid 函数的计算图" loading="lazy"></p><p>由图可知反向传播的输出是 $\frac{\partial L}{\partial y} y^2 exp(-x)$，只根据正向传播的输入 $x$ 和输出 $y$ 就能得出，所以计算图可以简化：</p><p><img src="https://s2.loli.net/2022/10/21/f2YUTkF5xceru6M.png" alt="简化后 Sigmoid 函数的计算图" loading="lazy"></p><p>又因为 $y &#x3D; \frac{1}{1 + exp(-x)}$，$\frac{\partial L}{\partial y} y^2 exp(-x)$ 可以被简化为：</p><p>$$ \begin{aligned} \frac{\partial L}{\partial y} y^2 exp(-x) &amp;&#x3D; \frac{\partial L}{\partial y} \frac{1}{(1 + exp(-x))^2} exp(-x) \\ &amp;&#x3D; \frac{\partial L}{\partial y} \frac{1}{1 + exp(-x)} \frac{exp(-x)}{1 + exp(-x)} \\ &amp;&#x3D; \frac{\partial L}{\partial y} y(1 - y) \end{aligned} $$</p><p>也就是说，Sigmoid 层的反向传播的输出，根据它正向传播时的输出就能算出来。</p><p>Sigmoid 层的代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Sigmoid</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        out <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>out <span class="token operator">=</span> out        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> dout <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1.0</span> <span class="token operator">-</span> self<span class="token punctuation">.</span>out<span class="token punctuation">)</span> <span class="token operator">*</span> self<span class="token punctuation">.</span>out  <span class="token comment"># 根据正向传播的输出计算反向传播的结果</span>        <span class="token keyword">return</span> dx</code></pre><h2 id="Affine-x2F-Softmax-层"><a href="#Affine-x2F-Softmax-层" class="headerlink" title="Affine&#x2F;Softmax 层"></a>Affine&#x2F;Softmax 层</h2><p><del>Affine 层进行仿射变换，也就是矩阵乘积？（实际上还要算上与偏置之和？）</del></p><p>用层的方式实现矩阵乘积和 Softmax 节点。</p><h3 id="Affine-层"><a href="#Affine-层" class="headerlink" title="Affine 层"></a>Affine 层</h3><p>矩阵相乘时对应维度的元素个数必须一致，比如：</p><p><img src="https://s2.loli.net/2022/10/23/kD8buZ2w9QaBOor.png" alt="矩阵相乘时对应维度的元素个数应该一致" loading="lazy"></p><p>求加权信号的和包括计算矩阵乘积以及与偏置求和。用计算图表示这些运算，其中用“dot”节点表示矩阵乘积：</p><p><img src="https://s2.loli.net/2022/10/23/ngJBVy6RGq2o4x3.png" alt="计算图-求加权信号之和" loading="lazy"></p><p>各个节点间传播的是矩阵。</p><p>考虑上图“dot”节点的反向传播，有：</p><p>$$ \frac{\partial L}{\partial \boldsymbol{X}} &#x3D; \frac{\partial L}{\partial \boldsymbol{Y}} \cdot \boldsymbol{W}^T $$</p><p>$$ \frac{\partial L}{\partial \boldsymbol{W}} &#x3D; \boldsymbol{X}^T \cdot \frac{\partial L}{\partial \boldsymbol{Y}} $$</p><p>那么上面计算图的反向传播：</p><p><img src="https://s2.loli.net/2022/10/28/wgac9kBEe8UbGQs.png" alt="计算图的反向传播" loading="lazy"></p><p>如果输入数据不是单个数据而是批，反向传播时矩阵形状会有所不同：</p><p><img src="https://s2.loli.net/2022/10/28/F3Yjm1lEyh2nNVP.png" alt="计算图的反向传播-batch" loading="lazy"></p><p>一种代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Affine</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>W <span class="token operator">=</span> W        self<span class="token punctuation">.</span>b <span class="token operator">=</span> b        self<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> <span class="token boolean">None</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x        out <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">)</span> <span class="token operator">+</span> self<span class="token punctuation">.</span>b        <span class="token keyword">return</span> out    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token punctuation">)</span><span class="token punctuation">:</span>        dx <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>dout<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">.</span>T<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dW <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">.</span>T<span class="token punctuation">,</span> dout<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>db <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>dout<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dx</code></pre><h3 id="Softmax-with-loss-层"><a href="#Softmax-with-loss-层" class="headerlink" title="Softmax-with-loss 层"></a>Softmax-with-loss 层</h3><p>最后是输出层的 softmax 函数，考虑作为损失函数的交叉熵误差。</p><p>假设要进行3类分类，从前面的层接收3个输入。Softmax 层将输入 $(a_1, a_2, a_3)$ 正规化，输出 $(y_1, y_2, y_3)$。Cross Entropy Error 层接收 Softmax 的输出和监督数据 $(t_1,<br>t_2, t_3)$，输出损失 $L$。简化后的计算图：</p><p><img src="https://s2.loli.net/2022/10/30/cjdiZV8CTMteoYR.png" alt="简化后的 Softmax-with-loss 层的计算图" loading="lazy"></p><p>实现过程：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SoftmaxWithLoss</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 损失</span>        self<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># softmax 的输出</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> <span class="token boolean">None</span>  <span class="token comment"># 监督数据（one-hot vector）</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>t <span class="token operator">=</span> t        self<span class="token punctuation">.</span>y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> cross_entropy_error<span class="token punctuation">(</span>self<span class="token punctuation">.</span>y<span class="token punctuation">,</span> self<span class="token punctuation">.</span>t<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>loss    <span class="token keyword">def</span> <span class="token function">backward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> dout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        batch_size <span class="token operator">=</span> self<span class="token punctuation">.</span>t<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        dx <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>y <span class="token operator">-</span> self<span class="token punctuation">.</span>t<span class="token punctuation">)</span> <span class="token operator">/</span> batch_size  <span class="token comment"># 单个数据的误差</span>        <span class="token keyword">return</span> dx</code></pre><h2 id="误差反向传播法的实现"><a href="#误差反向传播法的实现" class="headerlink" title="误差反向传播法的实现"></a>误差反向传播法的实现</h2><p>已经知道神经网络学习的步骤如下：</p><blockquote><ul><li><strong>前提</strong><ul><li>神经网络存在合适的权重和偏置，调整权重和偏置以便拟合训练数据的过程称为“学习”。神经网络的学习分成下面4个步骤。</li></ul></li><li><strong>步骤1（mini-batch）</strong><ul><li>从训练数据中随机选出一部分数据。</li></ul></li><li><strong>步骤2（计算梯度）</strong><ul><li>求出各个权重参数的梯度。</li></ul></li><li><strong>步骤3（更新参数）</strong><ul><li>将权重参数沿梯度方向进行微小更新。</li></ul></li><li><strong>步骤4（重复）</strong><ul><li>重复步骤1、步骤2、步骤3</li></ul></li></ul></blockquote><p>误差反向传播法在第二步中出现。之前计算梯度是通过数值微分求的，实现简单，不过计算起来要花费比较长的时间，用误差反向传播法可以改善这一点。</p><p>我们已经将网络中的节点表示成了“层”，网络获取结果和计算梯度的过程可以由层之间的传递完成。对应误差反向传播法的2层网络的实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> common<span class="token punctuation">.</span>layers <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> common<span class="token punctuation">.</span>gradient <span class="token keyword">import</span> numerical_gradient<span class="token keyword">from</span> collections <span class="token keyword">import</span> OrderedDict  <span class="token comment"># 有序字典</span><span class="token keyword">class</span> <span class="token class-name">TwoLayerNet</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 input_size<span class="token punctuation">,</span>                 hidden_size<span class="token punctuation">,</span>                 output_size<span class="token punctuation">,</span>                 weight_init_std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化权重</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_init_std <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>            input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_init_std <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>            hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>output_size<span class="token punctuation">)</span>        <span class="token comment"># 生成层</span>        self<span class="token punctuation">.</span>layers <span class="token operator">=</span> OrderedDict<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Affine<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'ReLU'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Relu<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Affine<span class="token punctuation">(</span>self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>lastLayer <span class="token operator">=</span> SoftmaxWithLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> layer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> x    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>lastLayer<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span>  <span class="token comment"># 算出交叉熵误差</span>    <span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> t<span class="token punctuation">.</span>ndim <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>t<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> accuracy    <span class="token keyword">def</span> <span class="token function">numerical_gradient</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_W <span class="token operator">=</span> <span class="token keyword">lambda</span> W<span class="token punctuation">:</span> self<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment"># 对每层的参数求梯度</span>        grads <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grads    <span class="token keyword">def</span> <span class="token function">gradient</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 前向传播</span>        self<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment"># 反向</span>        dout <span class="token operator">=</span> <span class="token number">1</span>        dout <span class="token operator">=</span> self<span class="token punctuation">.</span>lastLayer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dout<span class="token punctuation">)</span>        layers <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        layers<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> layer <span class="token keyword">in</span> layers<span class="token punctuation">:</span>            dout <span class="token operator">=</span> layer<span class="token punctuation">.</span>backward<span class="token punctuation">(</span>dout<span class="token punctuation">)</span>        grads <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dW        grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>db        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dW        grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>layers<span class="token punctuation">[</span><span class="token string">'Affine2'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>db        <span class="token keyword">return</span> grads</code></pre><h3 id="误差反向传播法的梯度确认"><a href="#误差反向传播法的梯度确认" class="headerlink" title="误差反向传播法的梯度确认"></a>误差反向传播法的梯度确认</h3><p>像上面这样通过反向传播，使用解析性的方法计算梯度，虽然免去了数值微分的大量计算，但是实现比较复杂（各层分别实现，都不能出错），还是需要经常比较数值微分的结果和误差反向传播法的结果，以确认误差反向传播法的结果是否正确。这个“确认”的操作就是<strong>梯度确认</strong>。</p><p>实现如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token keyword">from</span> two_layer_net <span class="token keyword">import</span> TwoLayerNet<span class="token comment"># 读入数据</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                  one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>t_batch <span class="token operator">=</span> t_train<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span>grad_numerical <span class="token operator">=</span> network<span class="token punctuation">.</span>numerical_gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>grad_backprop <span class="token operator">=</span> network<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span><span class="token comment"># 每个权重梯度的绝对误差平均值</span><span class="token keyword">for</span> key <span class="token keyword">in</span> grad_numerical<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    diff <span class="token operator">=</span> np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">abs</span><span class="token punctuation">(</span>grad_backprop<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-</span> grad_numerical<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">':'</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>diff<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>只要 <code>diff</code> 的值是一个接近0的很小的值就说明误差反向传播法的计算没有错误。</p><h3 id="使用误差反向传播法的学习"><a href="#使用误差反向传播法的学习" class="headerlink" title="使用误差反向传播法的学习"></a>使用误差反向传播法的学习</h3><p>与<a href="https://afool.top/learning/deep-learning-from-scratch-learning-of-neural-network/">上一篇</a>里的方法相比，不同之处就在于使用误差反向传播法来求梯度。实现如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> two_layer_net <span class="token keyword">import</span> TwoLayerNet<span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token comment"># print('Load mnist dataset...')</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                  one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># print('Initialize network...')</span>network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 超参数</span>iters_num <span class="token operator">=</span> <span class="token number">10000</span>  <span class="token comment"># 梯度法更新次数</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 训练集大小</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># batch 大小</span>learning_rate <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 学习率</span>train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>train_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>test_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 平均每个 epoch 的重复次数</span>iter_per_epoch <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>train_size <span class="token operator">/</span> batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取 mini-batch</span>    <span class="token comment"># print(i, ': choose mini-batch...')</span>    batch_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>    x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    t_batch <span class="token operator">=</span> t_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    <span class="token comment"># 计算梯度</span>    <span class="token comment"># print(i, ': calculate grads...')</span>    <span class="token comment"># grad = network.numerical_gradient(x_batch, t_batch)</span>    grad <span class="token operator">=</span> network<span class="token punctuation">.</span>gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>  <span class="token comment"># 误差反向传播法</span>    <span class="token comment"># 更新参数</span>    <span class="token comment"># print(i, ': update params...')</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> grad<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment"># 记录学习过程</span>    loss <span class="token operator">=</span> network<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>    <span class="token comment"># print(i, 'loss: ', loss)</span>    train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token comment"># 每个 epoch 完成后计算识别精度</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> iter_per_epoch <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        train_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span>        test_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span>        train_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>        test_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train acc, test acc | '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 画出图像</span><span class="token comment"># markers = &#123;'train': 'o', 'test': 's'&#125;</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>train_acc_list<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 生成 x 坐标</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> train_acc_list<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'train acc'</span><span class="token punctuation">)</span>  <span class="token comment"># 训练集识别精度</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> test_acc_list<span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'test acc'</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>  <span class="token comment"># 测试集识别精度，虚线</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">"epochs"</span><span class="token punctuation">)</span>  <span class="token comment"># 横轴单位</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span>  <span class="token comment"># 纵轴单位</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token string">'lower right'</span><span class="token punctuation">)</span>  <span class="token comment"># 右下角图例</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果立竿见影，比之前的快了不是一点半点。那就这样~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oreilly-japan/deep-learning-from-scratch&quot;&gt;上述书籍作者提</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门：神经网络的学习</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-learning-of-neural-network/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-learning-of-neural-network/</id>
    <published>2022-10-07T15:18:35.000Z</published>
    <updated>2022-11-07T08:43:40.831Z</updated>
    
    <content type="html"><![CDATA[<p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li><li><a href="https://github.com/oreilly-japan/deep-learning-from-scratch">上述书籍作者提供的代码</a></li></ul><p>之前实现了神经网络的前向传播过程，但是用到的权重参数是预先准备好的，那么接下来的目标自然就是“学习”——从训练数据中自动获取最优权重参数。</p><h2 id="从数据中学习"><a href="#从数据中学习" class="headerlink" title="从数据中学习"></a>从数据中学习</h2><p>机器学习是以数据为核心的，尝试从数据中发现答案和模式。<em>神经网络或深度学习则比以往的机器学习方法更能避免人为介入</em>。</p><p>要理解上面这些描述还是要从具体的问题开始，比如要实现数字“5”的识别该用什么算法呢？人很容易认出来眼前的是不是5，这可以说是基于经验和某些规律得出的结果，但是机器怎么知道这些经验或者规律是什么呢？与其想办法用算法表示这些规律（显然很难），不如想办法让机器从数据中直接获取需要的“规律”。现有的一种方案是先从图像中提取<strong>特征量</strong>，再用机器学习来学习这些特征量的模式。</p><blockquote><p>这里所说的“特征量”是指可以从输入数据（输入图像）中准确地提取本质数据（重要的数据）的转换器。图像的特征量通常表示为向量的形式。在计算机视觉领域，常用的特征量包括SIFT、SURF和HOG等。使用这些特征量将图像数据转换为向量，然后对转换后的向量使用机器学习中的SVM、KNN等分类器进行学习。</p></blockquote><p>在上面所说的方法中，将图像转换为向量时所用的特征量仍是人为设计的，对于不同的问题需要考虑不同的特征量。在深度学习中，这里所说的特征量也是由机器来学习的。</p><p><img src="https://s2.loli.net/2022/10/08/jr6XuH83fihJRdU.png" alt="从人工设计规则转变为由机器从数据中学习" loading="lazy"></p><p>书上给出的这幅图说明了识别的方法，从这里也能看出所谓“机器学习”和“深度学习”之间的一些区别。</p><blockquote><p>深度学习有时也称为端到端机器学习（end-to-end machine learning）。这里所说的端到端是指从一端到另一端的意思，也就是从原始数据（输入）中获得目标结果（输出）的意思。</p></blockquote><p><del>就是说中间的过程不需要人为干预吗……</del></p><h3 id="一些注意事项：-训练数据和测试数据"><a href="#一些注意事项：-训练数据和测试数据" class="headerlink" title="一些注意事项： 训练数据和测试数据"></a>一些注意事项： 训练数据和测试数据</h3><p>很明显，<strong>训练数据</strong>就是用来学习、寻找最优参数所用的那部分数据，而<strong>测试数据</strong>（监督数据）的作用是评价模型的泛化能力，自然不可缺少。如果只用已有的数据来学习和评价，可能会造成模型无法正确处理其他数据集，也就是出现<strong>过拟合</strong>现象。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p><strong>损失函数</strong>可以表示神经网络的“状态”，神经网络就参考这个状态指标来寻找最优权重参数。这里说的损失函数表示的“状态”是指当前神经网络神经网络对监督数据在多大程度上不拟合、不一致，或者说性能有多坏（当然，为损失函数乘上一个负值就可以表示性能有多好）。损失函数一般用均方误差和交叉熵误差等。</p><h3 id="均方误差"><a href="#均方误差" class="headerlink" title="均方误差"></a>均方误差</h3><p>均方误差的公式如下：</p><p>$$ E &#x3D; \frac{1}{2} \sum \limits_k (y_k - t_k)^2 $$</p><p>其中 $y_k$ 表示神经网络的输出，$t_k$ 表示监督数据，$k$ 表示数据的维数。比方说在之前的手写数字识别的例子中，$y_k$、$t_k$ 就是由10个元素构成的数据：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; y &#x3D; [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]&gt;&gt;&gt; t &#x3D; [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]</code></pre><p><code>y</code> 是 <code>softmax</code> 函数的输出，<code>t</code> 是监督数据的独热编码形式，均方误差会计算 <code>y</code> 和 <code>t</code> 的各个对应元素之差的平方，再求总和。实现方式可以是：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 均方误差</span><span class="token keyword">def</span> <span class="token function">mean_squared_error</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span>y <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>均方误差得出的结果越小，说明结果与监督数据之间的误差越小。</p><h3 id="交叉熵误差"><a href="#交叉熵误差" class="headerlink" title="交叉熵误差"></a>交叉熵误差</h3><p>公式如下：</p><p>$$ E &#x3D; - \sum \limits_k t_k \log y_k $$</p><p>其中 $\log$ 表示 $\log_e$，$y_k$ 是神经网络的输出，$t_k$ 是正确解的标签（独热编码）。显然上式只会计算正确解标签的输出的自然对数（因为只有正确解标签的索引为1），也就是说交叉熵误差的值是由正确解标签所对应的输出结果决定的。</p><p>自然对数 $y &#x3D; \log x$ 的图像如下：</p><p><img src="https://s2.loli.net/2022/10/09/3dHoWFkPCrpvBGh.png" alt="自然对数 y = log x 的图像" loading="lazy"></p><p>那么可以看出正确解标签对应的输出为1时，交叉熵误差的输出为0，输出越小，交叉熵误差的结果越大。</p><p>实现方式：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 交叉熵误差</span><span class="token keyword">def</span> <span class="token function">cross_entropy_error</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    delta <span class="token operator">=</span> <span class="token number">1e-7</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>t <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y <span class="token operator">+</span> delta<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 防止出现 log(0) 无限大</span></code></pre><p>计算例子：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; t &#x3D; [0, 0, 1, 0, 0, 0, 0, 0, 0, 0]&gt;&gt;&gt; y &#x3D; [0.1, 0.05, 0.6, 0.0, 0.05, 0.1, 0.0, 0.1, 0.0, 0.0]&gt;&gt;&gt; cross_entropy_error(np.array(y), np.array(t))0.51082545709933802&gt;&gt;&gt;&gt;&gt;&gt; y &#x3D; [0.1, 0.05, 0.1, 0.0, 0.05, 0.1, 0.0, 0.6, 0.0, 0.0]&gt;&gt;&gt; cross_entropy_error(np.array(y), np.array(t))2.3025840929945458</code></pre><h3 id="mini-batch-学习"><a href="#mini-batch-学习" class="headerlink" title="mini-batch 学习"></a>mini-batch 学习</h3><p>所谓使用训练数据进行学习，就是针对训练数据计算损失函数的值，找出使该值尽可能小的参数。计算损失函数时必须将所有的训练数据作为对象，考虑所有训练数据的损失函数的总和。</p><p>以交叉熵误差为例，如果要计算所有训练数据的损失函数的总和，可以这样：</p><p>$$ E &#x3D; - \frac{1}{N} \sum \limits_n \sum \limits_k t_{nk} \log y_{nk} $$</p><p>N 自然是数据个数，$y_{nk}$ 是神经网络的输出中第 n 个数据的第 k 个元素的值，$t_{nk}$ 则是对应的监督数据。观察可以发现这里其实就是把单个数据的损失函数的公式扩大到了 N 个数据，随后除以 N 正规化处理。这个式子也可以说是“平均损失函数”。</p><p>在数据集比较大的情况下（比如之前用到的 MNIST 数据集，训练数据就有60000个），根据所有的训练数据来算损失函数的和代价就太大了。实际操作中一般是从全部数据中选出一部分作为全部数据的“近似”（<strong>mini-batch</strong>），用这些数据进行学习（mini-batch 学习）。比方说从60000个训练数据中随机选择100笔，在用这100笔数据进行学习。</p><p>（按我的理解，书上这里的说法应该是用样本代表整体。搜到的比较多的说法是将一批所有数据再分成若干份，称作 mini-batch，训练时一次更新一个 mini-batch，整个数据集会更新多次，最终还是使用了所有数据。）</p><p>随机抽取数据时可以利用 <code>np.random.choice()</code>，像这样：</p><pre class="language-python" data-language="python"><code class="language-python">train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 对于 MNIST 的训练数据，是60000</span>batch_size <span class="token operator">=</span> <span class="token number">10</span>batch_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>  <span class="token comment"># 在0到59999之间随机选择10个数，得到包含被选数据的索引的数组</span>x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>  <span class="token comment"># 被选测试数据</span>t_batch <span class="token operator">=</span> t_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>  <span class="token comment"># 被选测试数据的标签</span></code></pre><p>如果要实现 mini-batch 的交叉熵误差，可以这样：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">cross_entropy_error</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 只有一个数据的时候改变数据形状</span>    <span class="token keyword">if</span> y<span class="token punctuation">.</span>ndim <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> t<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>size<span class="token punctuation">)</span>        y <span class="token operator">=</span> y<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">.</span>size<span class="token punctuation">)</span>     batch_size <span class="token operator">=</span> y<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment"># 如果监督数据不是独热形式而是正常的标签表示</span>    <span class="token comment"># return -np.sum(np.log(y[np.arange(batch_size), t] + 1e-7)) / batch_size</span>    <span class="token keyword">return</span> <span class="token operator">-</span>np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>t <span class="token operator">*</span> np<span class="token punctuation">.</span>log<span class="token punctuation">(</span>y <span class="token operator">+</span> <span class="token number">1e-7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> batch_size</code></pre><p>应该可以根据独热编码1值的索引拿到对应标签，这样不论监督数据是哪种形式都可以写在一个实现里。</p><h3 id="为什么需要损失函数"><a href="#为什么需要损失函数" class="headerlink" title="为什么需要损失函数"></a>为什么需要损失函数</h3><p>按说学习的目标是使神经网络的识别精度足够高，那么用识别精度作为评判标准就好了，为什么还需要损失函数呢？</p><p>从前面的内容可以看出，寻找最优参数其实也是寻找使损失函数值尽可能小的参数的过程，为了找到损失函数的“最低点”，需要算出参数的导数（准确地说是梯度），根据导数反映出的变化趋势继续更新参数（对权重参数的损失函数求导，就表示如果稍微改变权重参数，损失函数将如何变化）。而识别精度很明显是离散值，很多时候微调参数后识别精度也不变化，这就导致在很多地方参数的导数会变为0，无法反映识别精度的变化趋势，也就无法继续进行神经网络的学习。</p><p>在激活函数上也是同样的道理，阶跃函数只在某个地方突变，其他地方导数都是0，无法体现参数改变带来的变化。而 sigmoid 函数的输出和曲线斜率（导数）都是连续变化的（且导数始终不为0），能保证神经网络的学习正确进行。</p><p><del>暂且记下，更“深”的理解可能还要我接着学吧……</del></p><h2 id="数值微分"><a href="#数值微分" class="headerlink" title="数值微分"></a>数值微分</h2><p><del>这里引入数值微分的方法，用它计算导数和偏导数。</del></p><h3 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h3><p>导数的概念应该不用多说，就算高数渣如我也应该有所认识……简单来说就是“瞬间的变化量”。</p><p>求函数的导数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">numerical_diff</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> <span class="token number">1e-4</span> <span class="token comment"># 0.0001，避免使用过小的值</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>f<span class="token punctuation">(</span>x<span class="token operator">+</span>h<span class="token punctuation">)</span> <span class="token operator">-</span> f<span class="token punctuation">(</span>x<span class="token operator">-</span>h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>h<span class="token punctuation">)</span> <span class="token comment"># 使用中心差分来计算</span></code></pre><p>使用例，有函数 $f(x) &#x3D; 0.01 x^2 + 0.1 x$：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">function_1</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">0.01</span><span class="token operator">*</span>x<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token operator">*</span>x  <span class="token comment"># 0.01x^2 + 0.1x</span></code></pre><p>求其在 $x&#x3D;x_0$ 处的导数：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; numerical_diff(function_1, x0)</code></pre><blockquote><p>利用微小的差分求导数的过程称为数值微分，而基于数学式的推导求导数的过程，则用“解析性”（analytic）一词，称为“解析性求解”或者“解析性求导”。</p></blockquote><h3 id="偏导数"><a href="#偏导数" class="headerlink" title="偏导数"></a>偏导数</h3><p>一个多变量的函数，关于其中一个变量求导数，其他变量恒定。<del>应该不用再解释……</del></p><p>计算偏导的例子，有函数 $f(x_0, x_1) &#x3D; x_0^2 + x_1^2$：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">function_2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>求 $x_0 &#x3D; 3$，$x_1 &#x3D; 4$ 时，关于 $x_0$ 的偏导数 $\frac{\partial f}{\partial x_0}$：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; def function_tmp1(x0):...     return x0*x0 + 4.0**2.0...&gt;&gt;&gt; numerical_diff(function_tmp1, 3.0)</code></pre><p><del>求关于 $x_1$ 的偏导数也是差不多的方法。</del></p><h2 id="梯度"><a href="#梯度" class="headerlink" title="梯度"></a>梯度</h2><p>前面按变量分别求偏导，如果把全部变量的偏导数汇总成向量，就是<strong>梯度</strong>。求梯度的实现方法可以是这样，非批处理：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 求梯度</span><span class="token keyword">def</span> <span class="token function">numerical_gradient</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    h <span class="token operator">=</span> <span class="token number">1e-4</span>  <span class="token comment"># 0.0001</span>    grad <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros_like<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 生成和 x 形状相同、元素都为0的数组</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp_val <span class="token operator">=</span> x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token comment"># 计算 f(x+h)</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_val <span class="token operator">+</span> h        fxh1 <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># 计算 f(x-h)</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_val <span class="token operator">-</span> h        fxh2 <span class="token operator">=</span> f<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token comment"># 算出偏导，还原 x</span>        grad<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>fxh1 <span class="token operator">-</span> fxh2<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>h<span class="token punctuation">)</span>        x<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> tmp_val    <span class="token keyword">return</span> grad</code></pre><p>这里求梯度用的方法其实和前面求单个变量的数值微分所用的方法没有什么区别……按照<a href="https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/ch04/gradient_2d.py">作者给出的方法</a>（里面实现了批处理计算梯度）可以画出 $f(x_0, x_1) &#x3D; x_0^2 + x_1^2$ 的负梯度：</p><p><img src="https://s2.loli.net/2022/10/14/XjxmfqakndbtHrc.png" alt="函数的负梯度" loading="lazy"></p><p><del>函数图像可看做下凹的曲面，负梯度会指向最低点，更好理解梯度在这里的作用吧……</del>在这个图中，离函数最小值越远，梯度向量的模就越大（变化越快），且向量都指向了“最低处”。而一般来说，“梯度”指向该点处函数值减小最多的方向。</p><h3 id="梯度法"><a href="#梯度法" class="headerlink" title="梯度法"></a>梯度法</h3><p>神经网络需要在学习过程中找到最优参数（权重和偏置），也就是使损失函数取最小值时的参数。损失函数很复杂的时候就难以找到最小值所在的“点”，但是可以根据梯度表示的“变化快慢”来寻找尽可能小的值。不过梯度反映的是各点处函数值减小最多的方向，并不一定能找到最小值：梯度为0的点除了最小值还有极小值和鞍点。尽管如此，沿着梯度方向也能最大限度地减小函数值，所以可以沿着梯度方向寻找尽可能小的值。</p><blockquote><p>在梯度法中，函数的取值从当前位置沿着梯度方向前进一定距离，然后在新的地方重新求梯度，再沿着新梯度方向前进，如此反复，不断地沿梯度方向前进。像这样，通过不断地沿梯度方向前进，逐渐减小函数值的过程就是<strong>梯度法</strong>（gradient method）。梯度法是解决机器学习中最优化问题的常用方法，特别是在神经网络的学习中经常被使用。</p></blockquote><p>寻找最小值的梯度法叫做梯度下降法，寻找最大值的梯度法叫做梯度上升法。反转损失函数的符号，两类问题就可以互相转化。在神经网络中，梯度法主要指梯度下降法。</p><p>对于函数 $f(x_0, x_1) &#x3D; x_0^2 + x_1^2$，用数学式表示梯度法：</p><p>$$ x_0 &#x3D; x_0 - \eta \frac{\partial f}{\partial x_0} \\ \\ x_1 &#x3D; x_1 - \eta \frac{\partial f}{\partial x_1} $$</p><p>上式中 $\eta$ 表示更新量（<strong>学习率</strong>），它决定了在一次学习中应该学习多少以及应该在多大程度上更新参数。这组式子表示更新一次，学习时反复执行这个步骤减小函数值。变量数量增加后方法也是类似的。</p><p>学习率需要事先确定，过大或过小都无法取得理想的结果。在学习过程中一般会一边改变学习率，一边观察学习是否正确进行。</p><p>使用梯度下降法的例子（<code>numerical_gradient</code> 的实现参考<a href="https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/ch04/gradient_2d.py">这里</a>）：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> sys<span class="token keyword">import</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> ch04<span class="token punctuation">.</span>gradient_2d <span class="token keyword">import</span> numerical_gradient<span class="token keyword">def</span> <span class="token function">function_2</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">+</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">**</span><span class="token number">2</span><span class="token comment"># f: 函数</span><span class="token comment"># init_x: 初始值</span><span class="token comment"># lr: 学习率</span><span class="token comment"># step_num： 梯度法重复次数</span><span class="token keyword">def</span> <span class="token function">gradient_descent</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> init_x<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">,</span> step_num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> init_x    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>step_num<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 反复执行更新</span>        grad <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>f<span class="token punctuation">,</span> x<span class="token punctuation">)</span>        x <span class="token operator">-=</span> lr <span class="token operator">*</span> grad    <span class="token keyword">return</span> xinit_x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3.0</span><span class="token punctuation">,</span> <span class="token number">4.0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gradient_descent<span class="token punctuation">(</span>function_2<span class="token punctuation">,</span> init_x<span class="token operator">=</span>init_x<span class="token punctuation">,</span> lr<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">,</span> step_num<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>-6.11110793e-10  <span class="token number">8</span>.14814391e-10<span class="token punctuation">]</span></code></pre><p>上面设初始值为 <code>(-3.0, 4.0)</code>，用梯度法寻找最小值，得到的结果很接近函数的最小值点 <code>(0, 0)</code>。如果学习率不合适，得到的结果就会偏离更远。事实上，学习率过大时结果会过度发散，学习率太小时参数更新幅度太小，也很难得到合适的结果。</p><blockquote><p>像学习率这样的参数称为超参数。这是一种和神经网络的参数（权重和偏置）性质不同的参数。相对于神经网络的权重参数是通过训练数据和学习算法自动获得的，学习率这样的超参数则是人工设定的。一般来说，超参数需要尝试多个值，以便找到一种可以使学习顺利进行的设定。</p></blockquote><h3 id="神经网络的梯度"><a href="#神经网络的梯度" class="headerlink" title="神经网络的梯度"></a>神经网络的梯度</h3><p>神经网络的学习需要用到损失函数关于权重参数的梯度。<del>在一定的输入下权重参数确实就是变量呢……数学渣的小心确认……</del>参考书上举的例子的话，对于一个只有一个形状为 $2 \times 3$ 的权重 $\boldsymbol{W}$ 的神经网络，损失函数用 $L$ 表示，梯度就可以用 $\frac{\partial L}{\partial \boldsymbol{W}}$ 表示。数学式如下：</p><p>$$ \boldsymbol{W} &#x3D; \begin{pmatrix} w_{1 1} &amp; w_{1 2} &amp; w_{1 3} \\ w_{2 1} &amp; w_{2 2} &amp; w_{2 3} \end{pmatrix} $$</p><p>$$ \frac{\partial L}{\partial \boldsymbol{W}} &#x3D; \begin{pmatrix} \frac{\partial L}{\partial w_{1 1}} &amp; \frac{\partial L}{\partial w_{1 2}} &amp; \frac{\partial L}{\partial w_{1 3}} \\ \frac{\partial L}{\partial w_{2 1}} &amp; \frac{\partial L}{\partial w_{2 2}} &amp; \frac{\partial L}{\partial w_{2 3}} \end{pmatrix} $$</p><p>$\frac{\partial L}{\partial \boldsymbol{W}}$ 的元素由各个元素对应的偏导数构成，形状与 $\boldsymbol{W}$ 相同。</p><p>就以这样一个神经网络为例，实现求梯度：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> common<span class="token punctuation">.</span>func <span class="token keyword">import</span> softmax<span class="token punctuation">,</span> cross_entropy_error<span class="token keyword">from</span> common<span class="token punctuation">.</span>gradient <span class="token keyword">import</span> numerical_gradient<span class="token keyword">class</span> <span class="token class-name">simpleNet</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>W <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment"># 利用高斯分布随机生成0到1之间的数，填充指定形状的多维数组</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>W<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        z <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>z<span class="token punctuation">)</span>        loss <span class="token operator">=</span> cross_entropy_error<span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token keyword">return</span> lossnet <span class="token operator">=</span> simpleNet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'net.W:\n'</span><span class="token punctuation">,</span> net<span class="token punctuation">.</span>W<span class="token punctuation">)</span>  <span class="token comment"># net 的权重参数</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.6</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">]</span><span class="token punctuation">)</span>p <span class="token operator">=</span> net<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'predict x:\n'</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>  <span class="token comment"># 输出</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index of max value:\n'</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 最大值索引</span>t <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'net.loss:\n'</span><span class="token punctuation">,</span> net<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 计算交叉熵损失</span><span class="token comment"># W 是伪参数，计算梯度时会执行 f，用到的是 net 内的 W</span><span class="token comment"># def f(W):</span><span class="token comment">#     return net.loss(x, t)</span><span class="token comment"># 也可以用 lambda 表达式</span>f <span class="token operator">=</span> <span class="token keyword">lambda</span> w<span class="token punctuation">:</span> net<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> t<span class="token punctuation">)</span>dW <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>f<span class="token punctuation">,</span> net<span class="token punctuation">.</span>W<span class="token punctuation">)</span>  <span class="token comment"># 求关于权重的梯度，权重自然是 f 的参数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'dW:\n'</span><span class="token punctuation">,</span> dW<span class="token punctuation">)</span></code></pre><p>某一次运行上面代码的输出：</p><pre class="language-bash" data-language="bash"><code class="language-bash">net.W: <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.03900802</span> <span class="token parameter variable">-0.24126244</span> -1.60380801<span class="token punctuation">]</span> <span class="token punctuation">[</span>-0.94332177  <span class="token number">1.36421781</span> -1.05313682<span class="token punctuation">]</span><span class="token punctuation">]</span>predict x: <span class="token punctuation">[</span>-0.82558478  <span class="token number">1.08303856</span> -1.91010794<span class="token punctuation">]</span>index of max value: <span class="token number">1</span>net.loss: <span class="token number">3.174142995517425</span>dW: <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.07424015</span>  <span class="token number">0.50066058</span> -0.57490072<span class="token punctuation">]</span> <span class="token punctuation">[</span> <span class="token number">0.11136022</span>  <span class="token number">0.75099087</span> -0.86235108<span class="token punctuation">]</span><span class="token punctuation">]</span></code></pre><p>计算 <code>dW</code> 得到的结果是与 <code>W</code> 形状一致的二维数组。看结果的话，例如 $\frac{\partial L}{\partial w_{1 2}}$ 的值约为 $0.5$，表示如果 $w_{1 2}$ 增加 $h$，损失函数的值会增加 $0.5 h$；再比方说 $\frac{\partial L}{\partial w_{2 3}}$ 的值约为 $-0.86$，表示如果 $w_{2 3}$ 增加 $h$，损失函数的值会减小 $0.86 h$。因为要减小损失函数的值，所以 $w_{1 2}$ 应该往负方向更新，$w_{2 3}$ 应该往正方向更新，且更新 $w_{2 3}$ 比更新 $w_{1 2}$ 效果更明显。</p><h2 id="实现学习算法"><a href="#实现学习算法" class="headerlink" title="实现学习算法"></a>实现学习算法</h2><blockquote><p>神经网络的学习步骤如下所示。</p><ul><li><strong>前提</strong><ul><li>神经网络存在合适的权重和偏置，调整权重和偏置以便拟合训练数据的过程称为“学习”。神经网络的学习分成下面4个步骤。</li></ul></li><li><strong>步骤1（mini-batch）</strong><ul><li>从训练数据中随机选出一部分数据，这部分数据称为 mini-batch。我们的目标是减小 mini-batch 的损失函数的值。</li></ul></li><li><strong>步骤2（计算梯度）</strong><ul><li>为了减小 mini-batch 的损失函数的值，需要求出各个权重参数的梯度。梯度表示损失函数的值减小最多的方向。</li></ul></li><li><strong>步骤3（更新参数）</strong><ul><li>将权重参数沿梯度方向进行微小更新。</li></ul></li><li><strong>步骤4（重复）</strong><ul><li>重复步骤1、步骤2、步骤3</li></ul></li></ul></blockquote><p>上面的方法通过梯度下降更新参数，因为使用了随机选择的 mini-batch，所以又叫做<strong>随机梯度下降法</strong>（stochastic gradient descent，SGD）。</p><p>下面跟着书上的指导实现手写数字识别的神经网络。以2层神经网络（有1层隐藏层）为对象，使用 MNIST 数据集进行学习。</p><h3 id="2层神经网络的类"><a href="#2层神经网络的类" class="headerlink" title="2层神经网络的类"></a>2层神经网络的类</h3><p>为2层神经网络实现一个类，如下所示：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> common<span class="token punctuation">.</span>func <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> common<span class="token punctuation">.</span>gradient <span class="token keyword">import</span> numerical_gradient<span class="token keyword">class</span> <span class="token class-name">TwoLayerNet</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>                 input_size<span class="token punctuation">,</span>                 hidden_size<span class="token punctuation">,</span>                 output_size<span class="token punctuation">,</span>                 weight_init_std<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 初始化权重偏置，注意各层参数的形状</span>        self<span class="token punctuation">.</span>params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_init_std <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>            input_size<span class="token punctuation">,</span> hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>hidden_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> weight_init_std <span class="token operator">*</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randn<span class="token punctuation">(</span>            hidden_size<span class="token punctuation">,</span> output_size<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>output_size<span class="token punctuation">)</span>    <span class="token comment"># 推理过程</span>    <span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        W1<span class="token punctuation">,</span> W2 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span>        b1<span class="token punctuation">,</span> b2 <span class="token operator">=</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span>        a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> W1<span class="token punctuation">)</span> <span class="token operator">+</span> b1        z1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>        a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z1<span class="token punctuation">,</span> W2<span class="token punctuation">)</span> <span class="token operator">+</span> b2        y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>        <span class="token keyword">return</span> y    <span class="token comment"># 计算损失函数的值</span>    <span class="token comment"># x 是输入数据，t 是监督数据</span>    <span class="token keyword">def</span> <span class="token function">loss</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> cross_entropy_error<span class="token punctuation">(</span>y<span class="token punctuation">,</span> t<span class="token punctuation">)</span>    <span class="token comment"># 计算识别精度</span>    <span class="token comment"># x 是输入数据，t 是监督数据</span>    <span class="token keyword">def</span> <span class="token function">accuracy</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">=</span> self<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment"># 获得输出</span>        y <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 取得输出最大值对应索引（标签）</span>        t <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>t<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        accuracy <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>y <span class="token operator">==</span> t<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> accuracy    <span class="token comment"># 求梯度</span>    <span class="token comment"># x 是输入数据，t 是监督数据</span>    <span class="token keyword">def</span> <span class="token function">numerical_gradient</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>        loss_W <span class="token operator">=</span> <span class="token keyword">lambda</span> W<span class="token punctuation">:</span> self<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x<span class="token punctuation">,</span> t<span class="token punctuation">)</span>        <span class="token comment"># 对每层的参数求梯度</span>        grads <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        grads<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        grads<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> numerical_gradient<span class="token punctuation">(</span>loss_W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>params<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> grads</code></pre><p>（<code>weight_init_std</code> 似乎是为了解决激活后分布集中在0和1附近？）</p><p>之前也提到过，根据数据集和要识别的目标，<code>input_size</code> 就是<code>784</code>，<code>output_size</code> 是<code>10</code>。这里的隐藏层神经元个数设置为一个合理的值就行。</p><h3 id="mini-batch-的实现"><a href="#mini-batch-的实现" class="headerlink" title="mini-batch 的实现"></a>mini-batch 的实现</h3><p>实现过程如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> ch04<span class="token punctuation">.</span>two_layer_net <span class="token keyword">import</span> TwoLayerNet<span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Load mnist dataset...'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                  one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 超参数</span>iters_num <span class="token operator">=</span> <span class="token number">10000</span>  <span class="token comment"># 梯度法更新次数</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 训练集大小</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># batch 大小</span>learning_rate <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 学习率</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Initialize network...'</span><span class="token punctuation">)</span>network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 从训练数据中随机获取 mini-batch</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">': choose mini-batch...'</span><span class="token punctuation">)</span>    batch_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>    x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    t_batch <span class="token operator">=</span> t_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    <span class="token comment"># 计算梯度</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">': calculate grads...'</span><span class="token punctuation">)</span>    grad <span class="token operator">=</span> network<span class="token punctuation">.</span>numerical_gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>    <span class="token comment"># 更新参数</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">': update params...'</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> grad<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment"># 记录学习过程</span>    loss <span class="token operator">=</span> network<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>    train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span></code></pre><p>上面的学习过程应该算很清楚了，共更新10000次参数，会记录每一次训练后的损失函数值。</p><h3 id="基于测试数据的评价"><a href="#基于测试数据的评价" class="headerlink" title="基于测试数据的评价"></a>基于测试数据的评价</h3><p>上面的学习过程得到的损失函数值其实是对训练数据的某个 mini-batch 的损失函数值，这个值减小说明学习过程确实在正常进行，但是不能保证神经网络能正确识别训练集以外的数据。要评价神经网络的泛化能力，就要使用不在训练集中的数据。</p><p>这里就涉及了 <strong>epoch</strong>（之前做比赛看队友的代码里出现过这个东西，不过当时不知道具体表示什么意思），一个 epoch 表示学习中所有训练数据均被使用过一次时的更新次数。比如对于10000笔训练数据，如果 mini-batch 的大小是100，那么重复梯度下降100次，所有的训练数据就都被使用过一次，此时100次就是一个 epoch。（一般的做法是把训练数据打乱，根据指定的批大小生成 mini-batch，遍历所有 mini-batch 完成一个 epoch。像前面直接每次随机选择不能保证每个数据都被用到。）</p><p>在学习过程中需要定期对训练数据和测试数据记录识别精度，这里每经过一个 epoch 就记录一次：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> os<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">from</span> ch04<span class="token punctuation">.</span>two_layer_net <span class="token keyword">import</span> TwoLayerNet<span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Load mnist dataset...'</span><span class="token punctuation">)</span><span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                                                  one_hot_label<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Initialize network...'</span><span class="token punctuation">)</span>network <span class="token operator">=</span> TwoLayerNet<span class="token punctuation">(</span>input_size<span class="token operator">=</span><span class="token number">784</span><span class="token punctuation">,</span> hidden_size<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> output_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment"># 超参数</span>iters_num <span class="token operator">=</span> <span class="token number">10000</span>  <span class="token comment"># 梯度法更新次数</span>train_size <span class="token operator">=</span> x_train<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token comment"># 训练集大小</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># batch 大小</span>learning_rate <span class="token operator">=</span> <span class="token number">0.1</span>  <span class="token comment"># 学习率</span>train_loss_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>train_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>test_acc_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment"># 平均每个 epoch 的重复次数</span>iter_per_epoch <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>train_size <span class="token operator">/</span> batch_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>iters_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取 mini-batch</span>    batch_mask <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>train_size<span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span>    x_batch <span class="token operator">=</span> x_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    t_batch <span class="token operator">=</span> t_train<span class="token punctuation">[</span>batch_mask<span class="token punctuation">]</span>    <span class="token comment"># 计算梯度</span>    grad <span class="token operator">=</span> network<span class="token punctuation">.</span>numerical_gradient<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>    <span class="token comment"># 更新参数</span>    <span class="token keyword">for</span> key <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'W1'</span><span class="token punctuation">,</span> <span class="token string">'b1'</span><span class="token punctuation">,</span> <span class="token string">'W2'</span><span class="token punctuation">,</span> <span class="token string">'b2'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        network<span class="token punctuation">.</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">-=</span> learning_rate <span class="token operator">*</span> grad<span class="token punctuation">[</span>key<span class="token punctuation">]</span>    <span class="token comment"># 记录学习过程</span>    loss <span class="token operator">=</span> network<span class="token punctuation">.</span>loss<span class="token punctuation">(</span>x_batch<span class="token punctuation">,</span> t_batch<span class="token punctuation">)</span>    train_loss_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>    <span class="token comment"># 每个 epoch 完成后计算识别精度</span>    <span class="token keyword">if</span> i <span class="token operator">%</span> iter_per_epoch <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        train_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span>        test_acc <span class="token operator">=</span> network<span class="token punctuation">.</span>accuracy<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span>        train_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span>        test_acc_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Train acc, test acc | '</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train_acc<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">','</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test_acc<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>画出识别精度关于 epoch 的曲线：</p><p><img src="https://s2.loli.net/2022/10/15/jE2J9w5pGhmbWfX.png" alt="识别精度" loading="lazy"></p><p>随着学习进行，使用训练数据和测试数据评价的识别精度都在提高，两者几乎没有差距，没有发生过拟合。</p><p><del>这一部分就到这里……</del></p><p>之前写过的 softmax 函数似乎要换成这样的实现，可能和多维数组有关（具体到这里就是二维的吧，因为数据都是 mini-batch 了，max 和 sum 都需要沿着第2维），不过是不是我还得想想……</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> x <span class="token operator">-</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment"># 防止 exp() 溢出</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> keepdims<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oreilly-japan/deep-learning-from-scratch&quot;&gt;上述书籍作者提</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="神经网络" scheme="https://afool.top/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门：神经网络</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-neural-network/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-neural-network/</id>
    <published>2022-10-05T13:17:12.000Z</published>
    <updated>2022-11-07T08:43:40.831Z</updated>
    
    <content type="html"><![CDATA[<p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li><li><a href="https://github.com/oreilly-japan/deep-learning-from-scratch">上述书籍作者提供的代码</a></li></ul><p>代码中如果出现 <code>np</code>，应该都是因为忽略了 <code>import numpy as np</code>，请不要在意。</p><h2 id="从感知机到神经网络"><a href="#从感知机到神经网络" class="headerlink" title="从感知机到神经网络"></a>从感知机到神经网络</h2><p>通过前面学的内容可以看出来感知机也能表示复杂的内容，但显然确定权重是个麻烦事。好消息是，现在有神经网络这个东西能自动从数据中学习到合适的权重参数。那就看看吧。</p><p>用图表示神经网络：</p><p><img src="https://s2.loli.net/2022/10/06/56M1dzptNKeiXIq.png" alt="神经网络的基本结构" loading="lazy"></p><p>中间层有时也被称为<strong>隐藏层</strong>（“肉眼看不见”）。</p><p>从图中可以看出，神经网络的形状和感知机很像。<em>实际上，就神经元的连接方式而言，与感知机并没有任何差异</em>。既然如此，它们有什么区别呢？就从信号的传递方式入手吧。</p><p>在探究神经网络之前，需要再看一下感知机，这是感知机的网络结构（这个图并没有表示出偏置，要体现偏置的话需要再加一个表示偏置的输入信号）：</p><p><img src="https://s2.loli.net/2022/10/06/9bpEaniNYfl7eq3.png" alt="感知机的结构" loading="lazy"></p><p>用数学式表示这个感知机：</p><p>$$ y &#x3D; \begin{cases} 0 &amp; (b + w_1 x_1 + w_2 x_2 \le 0) \\ 1 &amp; (b + w_1 x_1 + w_2 x_2 \gt 0) \end{cases} $$</p><p>这个数学式可以改写成：</p><p>$$ y &#x3D; h(b + w_1 x_1 + w_2 x_2) $$</p><p>其中：</p><p>$$ h(x) &#x3D; \begin{cases} 0 &amp; (x \le 0) \\ 1 &amp; (x \gt 0) \end{cases} $$</p><p>输入信号的总和被函数 $h(x)$ 转换之后才是输出 $y$。</p><h3 id="轮到激活函数上场……"><a href="#轮到激活函数上场……" class="headerlink" title="轮到激活函数上场……"></a>轮到激活函数上场……</h3><p>上面的 $h(x)$ 通常被称为<strong>激活函数</strong>，它决定如何激活输入信号的总和。那么上面的式子也可以表示为：</p><p>$$ a &#x3D; b + w_1 x_1 + w_2 x_2 \\ y &#x3D; h(a) $$</p><p>也就是说，计算输出的过程可以分为：计算输入信号的总和、用激活函数转换这一总和。在神经元中明确表示出激活函数的计算过程（下图包含偏置）：</p><p><img src="https://s2.loli.net/2022/10/06/sFzIqrO1hoN926V.png" alt="明确表示出激活函数的计算过程" loading="lazy"></p><h4 id="常用的激活函数"><a href="#常用的激活函数" class="headerlink" title="常用的激活函数"></a>常用的激活函数</h4><ul><li>阶跃函数<ul><li>输入不超过0时输出0，超过0时输出1。</li><li><img src="https://s2.loli.net/2022/10/06/fhCzFJSnbaIRpym.png" alt="阶跃函数的图形" loading="lazy"></li></ul></li><li>sigmoid 函数<ul><li>$h(x) &#x3D; \frac{1}{1 + exp(-x)}$，其中 $exp(-x)$ 表示 $e^{-x}$</li><li><img src="https://s2.loli.net/2022/10/06/hNPZtR67nGjQyBq.png" alt="sigmoid 函数的图形" loading="lazy"></li></ul></li></ul><p>可行的实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 阶跃函数，支持 numpy 数组的实现</span><span class="token keyword">def</span> <span class="token function">step_function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> x <span class="token operator">></span> <span class="token number">0</span>  <span class="token comment"># 对 numpy 数组进行不等号运算后，数组中的各个元素都会进行相应运算，生成一个布尔型数组</span>    <span class="token keyword">return</span> y<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>  <span class="token comment"># 将布尔型数组转换为 int32</span><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 由于 numpy 的广播功能，该实现可以支持 numpy 数组</span></code></pre><p>显然：</p><ul><li>sigmoid 函数图像是一条平滑曲线，阶跃函数以0为界，输出发生急剧变化；</li><li>阶跃函数只返回0或1，sigmoid 函数返回连续的实数值；</li><li>两者形状相似，且都是非线性函数；</li></ul><blockquote><p>激活函数必须使用非线性函数，为什么？</p><p>线性函数的问题在于，不管如何加深层数，总是存在与之等效的“无隐藏层的神经网络”。为了具体地（稍微直观地）理解这一点，我们来思考下面这个简单的例子。这里我们考虑把线性函数 $h(x) &#x3D; cx$ 作为激活函数，把 $y(x) &#x3D; h(h(h(x)))$ 的运算对应3层神经网络A。这个运算会进行 $y(x) &#x3D; c × c × c × x$ 的乘法运算，但是同样的处理可以由 $y(x) &#x3D; ax$（注意，$a &#x3D; c^3$）这一次乘法运算（即没有隐藏层的神经网络）来表示。如本例所示，使用线性函数时，无法发挥多层网络带来的优势。因此，为了发挥叠加层所带来的优势，激活函数必须使用非线性函数。</p></blockquote><p>据书上所说，最近使用 <strong>ReLU</strong> 函数的更多。这个函数很简单，输入大于0时直接输出该值，输入不大于0时输出0。</p><p>ReLU 函数的一种实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">relu</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>maximum<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></code></pre><h2 id="多维数组的运算"><a href="#多维数组的运算" class="headerlink" title="多维数组的运算"></a>多维数组的运算</h2><p>可以直接用 <code>numpy.array()</code> 来生成多维数组，比如：</p><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>可以用 <code>numpy.ndim()</code> 获取数组的维数，用数组实例的属性变量 <code>shape</code> （元组类型）获取其形状。</p><p>我们最常用的多维数组的运算应该是矩阵（二维数组）乘法了（我猜）。矩阵乘法怎么算就不说了，左边列数等于右边行数就行，在代码中可以用 <code>numpy.dot()</code> 来完成。矩阵乘法的例子：</p><pre class="language-python" data-language="python"><code class="language-python">A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span>A <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">19</span> <span class="token number">22</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">43</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">23</span> <span class="token number">53</span> <span class="token number">83</span><span class="token punctuation">]</span></code></pre><h3 id="神经网络的内积"><a href="#神经网络的内积" class="headerlink" title="神经网络的内积"></a>神经网络的内积</h3><p>矩阵乘法又和神经网络有什么关系呢？看这个网络：</p><p><img src="https://s2.loli.net/2022/10/06/GSolM6v7B3AcWDd.png" alt="神经网络和矩阵乘法" loading="lazy"></p><p>从图上可以看出，这个神经网络的计算相当于 X 矩阵点乘 W 矩阵，可以用矩阵运算一次性算出结果：</p><pre class="language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># x1 x2</span>w <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 权重</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>w<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>输出结果：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span>,<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token punctuation">[</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">2</span>, <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span> <span class="token number">5</span> <span class="token number">11</span> <span class="token number">17</span><span class="token punctuation">]</span></code></pre><p>所以我们就可以用矩阵运算简化信号传递的过程，可喜可贺。</p><h2 id="神经网络的实现"><a href="#神经网络的实现" class="headerlink" title="神经网络的实现"></a>神经网络的实现</h2><p><img src="https://s2.loli.net/2022/10/06/vbICLGd341DRlnz.png" alt="要实现的神经网络" loading="lazy"></p><p>实现该神经网络。其中：</p><ul><li>输入层（0）2个神经元；</li><li>第一个隐藏层（1）3个神经元，第二个隐藏层（2）2个神经元；</li><li>输出层（3）2个神经元。</li></ul><p>书中给我们定义了符号来表示神经元和信号，以权重的符号为例：</p><p><img src="https://s2.loli.net/2022/10/06/p8sriFWC2tVNb1O.png" alt="权重的符号" loading="lazy"></p><h3 id="信号传递"><a href="#信号传递" class="headerlink" title="信号传递"></a>信号传递</h3><p>示例，从输入层到第1层的信号传递，考虑偏置：</p><p><img src="https://s2.loli.net/2022/10/06/GkWuzmDV1QCqM2E.png" alt="输入层到第1层的信号传递" loading="lazy"></p><p>可以用数学式来表示 $a_1^{(1)}$：</p><p>$$ a_1^{(1)} &#x3D; w_{1 1}^{(1)}x_1 + w_{1 2}^{(1)}x_2 + b_1^{(1)} $$</p><p>如果使用矩阵乘法，可以将第1层的加权和表示为如下形式：</p><p>$$ \boldsymbol{A}^{(1)} &#x3D; \boldsymbol{X}\boldsymbol{W}^{(1)} + \boldsymbol{B}^{(1)} $$</p><p>其中：</p><p>$$ \boldsymbol{A}^{(1)} &#x3D; \begin{pmatrix} a_1^{(1)} &amp; a_2^{(1)} &amp; a_3^{(1)} \end{pmatrix} \\ \boldsymbol{X} &#x3D; \begin{pmatrix} x_1 &amp; x_2 \end{pmatrix} \\ \boldsymbol{B}^{(1)} &#x3D; \begin{pmatrix} b_1^{(1)} &amp; b_2^{(1)} &amp; b_3^{(1)} \end{pmatrix} \\ \boldsymbol{W}^{(1)} &#x3D;  \begin{pmatrix} w_{1 1}^{(1)} &amp; w_{2 1}^{(1)} &amp; w_{3 1}^{(1)} \\ w_{1 2}^{(1)} &amp; w_{2 2}^{(1)} &amp; w_{3 2}^{(1)} \end{pmatrix} $$</p><p>写成 Python 实现（手动指定权重和偏置）：</p><pre class="language-python" data-language="python"><code class="language-python">X <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># shape: (2, 3)</span>W1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># shape: (2,)</span>B1 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># shape: (3,)</span>A1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>X<span class="token punctuation">,</span> W1<span class="token punctuation">)</span> <span class="token operator">+</span> B1</code></pre><p>考虑激活函数，那么第1层的计算过程就是：</p><p><img src="https://s2.loli.net/2022/10/06/T3uDapWMw1eK9Xq.png" alt="输入层到第1层的信号传递2" loading="lazy"></p><p>上图中隐藏层的加权和（加权信号与偏置的和）用 $a$ 表示，被激活函数转换后的信号用 $z$ 表示。$h()$ 表示激活函数，如果使用 sigmoid 函数作为激活函数，$z$ 的计算方法就是 <code>Z1 = sigmoid(A1)</code>。</p><p>用同样的方法可以实现第1层到第2层的信号传递：</p><p><img src="https://s2.loli.net/2022/10/06/Q8c1eOVod6WFSZu.png" alt="第1层到第2层的信号传递" loading="lazy"></p><pre class="language-python" data-language="python"><code class="language-python">W2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Z1<span class="token punctuation">,</span> W2<span class="token punctuation">)</span> <span class="token operator">+</span> B2  <span class="token comment"># 第1层的输出是第2层的输入</span>Z2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>A2<span class="token punctuation">)</span></code></pre><p>从第2层到输出层的实现与上面也基本一致，将恒等函数作为激活函数（输出层的激活函数用 $\sigma()$ 表示）：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">identity_function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> xW3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>B3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>Z2<span class="token punctuation">,</span> W3<span class="token punctuation">)</span> <span class="token operator">+</span> B3Y <span class="token operator">=</span> identity_function<span class="token punctuation">(</span>A3<span class="token punctuation">)</span>  <span class="token comment"># 或者Y = A3</span></code></pre><p>整理上面的实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># 把权重记为大写字母，其他如偏置和中间结果等记为小写字母</span><span class="token keyword">def</span> <span class="token function">init_network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    network <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    network<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    network<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    network<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.3</span><span class="token punctuation">,</span> <span class="token number">0.6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    network<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    network<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.2</span><span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    network<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> network<span class="token comment"># 将输入信号转化为输出信号的过程（前向传播？）</span><span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    W1<span class="token punctuation">,</span> W2<span class="token punctuation">,</span> W3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span>    b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span>    a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> W1<span class="token punctuation">)</span> <span class="token operator">+</span> b1    z1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>    a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z1<span class="token punctuation">,</span> W2<span class="token punctuation">)</span> <span class="token operator">+</span> b2    z2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>    a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z2<span class="token punctuation">,</span> W3<span class="token punctuation">)</span> <span class="token operator">+</span> b3    y <span class="token operator">=</span> identity_function<span class="token punctuation">(</span>a3<span class="token punctuation">)</span>    <span class="token keyword">return</span> ynetwork <span class="token operator">=</span> init_network<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> forward<span class="token punctuation">(</span>network<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># [0.31682708 0.69627909]</span></code></pre><h2 id="输出层的设计"><a href="#输出层的设计" class="headerlink" title="输出层的设计"></a>输出层的设计</h2><p>神经网络可以用在分类问题和回归问题上，要根据情况改变使用的激活函数，一般回归问题用恒等函数，分类问题用 softmax 函数。softmax 函数可以用如下式子表示：</p><p>$$ y_k &#x3D; \frac{exp(a_k)}{\sum\limits_{i&#x3D;1}^{n}exp(a_i)} $$</p><p>其中 $exp()$ 是表示 $e^x$ 的指数函数。该式子假设输出层共有 $n$ 个神经元，计算第 $k$ 个神经元的输出 $y_k$。softmax 函数的分子是输入信号 $a_k$ 的指数函数，分母是所有输入信号的指数函数的和。</p><p>从上面可以看出输出层的各个神经元都受到所有输入信号的影响。用图表示这个函数，它的输出与所有的输入信号相连：</p><p><img src="https://s2.loli.net/2022/10/06/hANMxfLWD6pBvl5.png" alt="softmax 函数" loading="lazy"></p><h3 id="softmax-函数"><a href="#softmax-函数" class="headerlink" title="softmax 函数"></a>softmax 函数</h3><p>直接实现 softmax 函数：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    sum_exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>exp_a<span class="token punctuation">)</span>    y <span class="token operator">=</span> exp_a <span class="token operator">/</span> sum_exp_a    <span class="token keyword">return</span> y</code></pre><p>这个实现有缺陷，主要问题出在 <code>exp()</code> 上。<code>exp(x)</code> 表示 $e^x$，当 x 比较大的时候，结果很容易溢出（可以自行算一下，<code>int</code> 类型根本不够用）。书的作者介绍了一种常用的优化方法，首先看这个式子：</p><p>$$ \begin{aligned} y_k &amp;&#x3D; \frac{exp(a_k)}{\sum \limits_{i &#x3D; 1}^n exp(a_i)} \\ &amp;&#x3D; \frac{C exp(a_k)}{C \sum \limits_{i &#x3D; 1}^n exp(a_i)} \\ &amp;&#x3D; \frac{exp(a_k + \log C)}{\sum \limits_{i &#x3D; 1}^n exp(a_i + \log C)} \\ &amp;&#x3D; \frac{exp(a_k + C’)}{\sum \limits_{i &#x3D; 1}^n exp(a_i + C’)} \end{aligned} $$</p><p>从这个式子可以看出，计算时在指数上加减任意常数都不会改变运算结果。为了防止溢出，一般是减去输入信号中的最大值。作者给出的例子：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; a &#x3D; np.array([1010, 1000, 990])&gt;&gt;&gt; np.exp(a) &#x2F; np.sum(np.exp(a))  # softmax函数的运算array([ nan, nan, nan])  # 溢出&gt;&gt;&gt;&gt;&gt;&gt; c &#x3D; np.max(a) # 1010&gt;&gt;&gt; a - carray([ 0, -10, -20])&gt;&gt;&gt;&gt;&gt;&gt; np.exp(a - c) &#x2F; np.sum(np.exp(a - c))array([ 9.99954600e-01, 4.53978686e-05, 2.06106005e-09])</code></pre><p>所以 softmax 函数的实现就可以改成：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># 输入信号的最大值</span>    exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>a <span class="token operator">-</span> c<span class="token punctuation">)</span>  <span class="token comment"># 溢出对策</span>    sum_exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>exp_a<span class="token punctuation">)</span>    y <span class="token operator">=</span> exp_a <span class="token operator">/</span> sum_exp_a    <span class="token keyword">return</span> y</code></pre><p>softmax 函数的输出是0.0到1.0之间的实数，输出值的总和是1，所以 softmax 函数的输出也可以被解释为概，也因为这样，softmax 函数适用于分类问题。</p><p>由于 softmax 函数不会改变各个元素之间的大小关系（因为指数函数是单调递增的），如果只需要知道输出值最大的神经元对应的类别，可以忽略输出层的 softmax 函数以减少运算量。</p><h3 id="输出层的神经元数量"><a href="#输出层的神经元数量" class="headerlink" title="输出层的神经元数量"></a>输出层的神经元数量</h3><p>输出层的神经元数量取决于待解决的问题。对于分类问题，一般把输出层神经元数量设定为类别的数量。</p><h2 id="实际问题：手写数字识别"><a href="#实际问题：手写数字识别" class="headerlink" title="实际问题：手写数字识别"></a>实际问题：手写数字识别</h2><p>对于这个问题，书的作者提供了可以直接使用的学习结果，只需要实现神经网络的推理处理过程（前向传播）就可以了。</p><blockquote><p>使用 MNIST 数据集。该数据集由0到9的数字图像构成，训练图像6万张，测试图像1万张。先用训练图像进行学习，再用学习到的模型度量能在多大程度上对测试图像进行正确的分类。</p><p>MNIST的图像数据是28像素 × 28像素的灰度图像（1通道），各个像素的取值在0到255之间。每个图像数据都相应地标有“7”、“2”、“1”等标签。</p></blockquote><p>下载、加载数据集等需要提前准备的代码作者也给出来了，在<a href="https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/dataset/mnist.py">这里</a>。</p><p>需要实现的神经网络输入层有784个神经元（每张图片784像素），输出层有10个神经元（10个数字分类）。按照作者的提示，设置两个隐藏层，第一个隐藏层有50个神经元，第二个隐藏层有100个神经元。</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token keyword">import</span> pickle<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 实现 sigmoid 函数</span><span class="token comment"># 当然像这种通用的函数最好特意找个地方写实现，不要写得到处都是……</span><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 由于 numpy 的广播功能，该实现可以支持 numpy 数组</span><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>a <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token comment"># 溢出对策</span>    sum_exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>exp_a<span class="token punctuation">)</span>    y <span class="token operator">=</span> exp_a <span class="token operator">/</span> sum_exp_a    <span class="token keyword">return</span> y<span class="token comment"># 获取测试数据</span><span class="token comment"># 对数据进行了正规化处理（属于预处理），使数据的值在0.0～1.0的范围内</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> flatten<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> one_hot_label<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test<span class="token punctuation">,</span> t_test<span class="token comment"># 读入学习到的权重参数</span><span class="token keyword">def</span> <span class="token function">init_network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># rb, read as text, binary</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ch0203/sample_weight.pkl"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        network <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> network<span class="token comment"># 前向传播推理过程</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span>    b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span>    a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1    z1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>    a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span> <span class="token operator">+</span> b2    z2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>    a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z2<span class="token punctuation">,</span> w3<span class="token punctuation">)</span> <span class="token operator">+</span> b3    y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>a3<span class="token punctuation">)</span>    <span class="token keyword">return</span> yx<span class="token punctuation">,</span> t <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>network <span class="token operator">=</span> init_network<span class="token punctuation">(</span><span class="token punctuation">)</span>accuracy_cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 识别精度</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> predict<span class="token punctuation">(</span>network<span class="token punctuation">,</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y<span class="token punctuation">)</span>  <span class="token comment"># 取概率最高的元素的索引</span>    <span class="token keyword">if</span> p <span class="token operator">==</span> t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>        accuracy_cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>accuracy_cnt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>PS：如果去看作者给的<a href="https://github.com/oreilly-japan/deep-learning-from-scratch/blob/master/ch03/neuralnet_mnist.py">实现代码</a>，会发现最开始添加路径，作者添加了 <code>pardir</code>，我这里添加的是 <code>curdir</code>，读取权重时的文件路径也不太一样。这是因为我打开项目时的工作目录在 <code>ch0203</code>（相当于作者的 <code>ch03</code>）上面一层，而作者设定的工作目录就是 <code>ch03</code>……嗯，应该是这个原因吧，我还搜了挺长一段时间……😢</p><h3 id="批处理"><a href="#批处理" class="headerlink" title="批处理"></a>批处理</h3><p>观察一下神经网络各层权重的形状：</p><pre class="language-pycon" data-language="pycon"><code class="language-pycon">&gt;&gt;&gt; x, _ &#x3D; get_data()&gt;&gt;&gt; network &#x3D; init_network()&gt;&gt;&gt; W1, W2, W3 &#x3D; network[&#39;W1&#39;], network[&#39;W2&#39;], network[&#39;W3&#39;]&gt;&gt;&gt;&gt;&gt;&gt; x.shape(10000, 784)&gt;&gt;&gt; x[0].shape(784,)&gt;&gt;&gt; W1.shape(784, 50)&gt;&gt;&gt; W2.shape(50, 100)&gt;&gt;&gt; W3.shape(100, 10)</code></pre><p><del>显然符合矩阵运算的要求。</del>多维数组形状变化过程如图（$X$ 的形状也可以表示为 $1 \times 784$，同理 $Y$ 的形状也可以表示为 $1 \times 10$）：</p><p><img src="https://s2.loli.net/2022/10/07/l25NM8BjZ3ohcfg.png" alt="数组形状的变化" loading="lazy"></p><p>从整体的流程来看，输入一个由784个元素构成的一维数组后，输出一个有10个元素的一维数组。考虑一次性处理100张图片，那么输入数组的形状可以改成 $100 \times 784$，此时多维数组&#x2F;矩阵形状的变化过程就会是：</p><p><img src="https://s2.loli.net/2022/10/07/3eWDaKFkYHp6riU.png" alt="批处理中数组形状的变化" loading="lazy"></p><p>这样输出数据的形状就是 $100 \times 10$。<em>这表示输入的100张图像的结果被一次性输出了。比如，<code>x[0]</code>和<code>y[0]</code>中保存了第0张图像及其推理结果，x[1]和y[1]中保存了第1张图像及其推理结果，等等。</em> </p><p><em>这种打包式的输入数据被称为批（batch）。</em></p><p>批处理的实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">,</span> ossys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>curdir<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span class="token keyword">from</span> dataset<span class="token punctuation">.</span>mnist <span class="token keyword">import</span> load_mnist<span class="token keyword">import</span> pickle<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 实现 sigmoid 函数</span><span class="token comment"># 当然像这种通用的函数最好特意找个地方写实现，不要写得到处都是……</span><span class="token keyword">def</span> <span class="token function">sigmoid</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 由于 numpy 的广播功能，该实现可以支持 numpy 数组</span><span class="token keyword">def</span> <span class="token function">softmax</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>    exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>a <span class="token operator">-</span> c<span class="token punctuation">)</span> <span class="token comment"># 溢出对策</span>    sum_exp_a <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>exp_a<span class="token punctuation">)</span>    y <span class="token operator">=</span> exp_a <span class="token operator">/</span> sum_exp_a    <span class="token keyword">return</span> y<span class="token comment"># 获取测试数据</span><span class="token comment"># 对数据进行了正规化处理（属于预处理），使数据的值在0.0～1.0的范围内</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>x_train<span class="token punctuation">,</span> t_train<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>x_test<span class="token punctuation">,</span> t_test<span class="token punctuation">)</span> <span class="token operator">=</span> load_mnist<span class="token punctuation">(</span>normalize<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> flatten<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> one_hot_label<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x_test<span class="token punctuation">,</span> t_test<span class="token comment"># 读入学习到的权重参数</span><span class="token keyword">def</span> <span class="token function">init_network</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># rb, read as text, binary</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"ch0203/sample_weight.pkl"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        network <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">return</span> network<span class="token comment"># 前向传播推理过程</span><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>network<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> w3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'W1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'W3'</span><span class="token punctuation">]</span>    b1<span class="token punctuation">,</span> b2<span class="token punctuation">,</span> b3 <span class="token operator">=</span> network<span class="token punctuation">[</span><span class="token string">'b1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b2'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> network<span class="token punctuation">[</span><span class="token string">'b3'</span><span class="token punctuation">]</span>    a1 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> w1<span class="token punctuation">)</span> <span class="token operator">+</span> b1    z1 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a1<span class="token punctuation">)</span>    a2 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z1<span class="token punctuation">,</span> w2<span class="token punctuation">)</span> <span class="token operator">+</span> b2    z2 <span class="token operator">=</span> sigmoid<span class="token punctuation">(</span>a2<span class="token punctuation">)</span>    a3 <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>z2<span class="token punctuation">,</span> w3<span class="token punctuation">)</span> <span class="token operator">+</span> b3    y <span class="token operator">=</span> softmax<span class="token punctuation">(</span>a3<span class="token punctuation">)</span>    <span class="token keyword">return</span> yx<span class="token punctuation">,</span> t <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>network <span class="token operator">=</span> init_network<span class="token punctuation">(</span><span class="token punctuation">)</span>batch_size <span class="token operator">=</span> <span class="token number">100</span>  <span class="token comment"># “一批”的大小</span>accuracy_cnt <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 识别精度</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> batch_size<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># range(start, end, step)</span>    x_batch <span class="token operator">=</span> x<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>batch_size<span class="token punctuation">]</span>  <span class="token comment"># 按批取出数据</span>    y_batch <span class="token operator">=</span> predict<span class="token punctuation">(</span>network<span class="token punctuation">,</span> x_batch<span class="token punctuation">)</span>    p <span class="token operator">=</span> np<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>y_batch<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 在100*10的数组中，沿着第1维（从0开始数）方向找到值最大的元素的索引</span>    accuracy_cnt <span class="token operator">+=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>p <span class="token operator">==</span> t<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span>batch_size<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 使用比较运算符会生成布尔值数组，sum 会计算 True 的个数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Accuracy: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>accuracy_cnt<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><em>大多数处理数值计算的库都进行了能够高效处理大型数组运算的最优化</em>，而且批处理可以减少读取数据方面的开销，所以批处理计算大型数组比分开计算各个小数组速度快。</p><p>PPS：这一部分说是神经网络，其实应该说是神经网络的前向传播咯……那就先到这里。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/oreilly-japan/deep-learning-from-scratch&quot;&gt;上述书籍作者提</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="神经网络" scheme="https://afool.top/tags/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>深度学习入门：感知机</title>
    <link href="https://afool.top/learning/deep-learning-from-scratch-perception/"/>
    <id>https://afool.top/learning/deep-learning-from-scratch-perception/</id>
    <published>2022-10-01T13:38:41.000Z</published>
    <updated>2022-11-07T08:43:40.831Z</updated>
    
    <content type="html"><![CDATA[<p>内容参考：</p><ul><li>《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)</li></ul><h2 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a>感知机</h2><p>感知机（指“人工神经元”或“朴素感知机”）接收多个输入信号，输出一个信号。感知机的信号只有1和0两种取值。信号与权重的乘积之和超过<strong>阈值</strong> $\theta$ 时神经元被激活。</p><p>有两个输入的感知机：</p><p><img src="https://s2.loli.net/2022/10/01/jdJwRnHIMAU4pDz.png" alt="有两个输入的感知机-图片" loading="lazy"></p><p>用数学式可以表示为：</p><p>$$ y &#x3D; \begin{cases} 0 &amp; (w_1 x_1 + w_2 x_2 \le \theta) \\ 1 &amp; (w_1 x_1 + w_2 x_2 \gt \theta) \end{cases} $$</p><h3 id="用感知机表示逻辑电路"><a href="#用感知机表示逻辑电路" class="headerlink" title="用感知机表示逻辑电路"></a>用感知机表示逻辑电路</h3><p>就拿与门举例吧，与门的真值表：</p><table><thead><tr><th>$x_1$</th><th>$x_2$</th><th>$y$</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>0</td></tr><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>1</td><td>1</td><td>1</td></tr></tbody></table><p>调整权重和阈值就可以满足表中的条件，例如当 $(w_1, w_2, \theta) &#x3D; (0.5, 0.5, 0.7)$ 时，感知机就可以表示与门。</p><p>代码实现：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">AND</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    w1<span class="token punctuation">,</span> w2<span class="token punctuation">,</span> theta <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.7</span> <span class="token comment"># 权重和阈值</span>    tmp <span class="token operator">=</span> x1<span class="token operator">*</span>w1 <span class="token operator">+</span> x2<span class="token operator">*</span>w2    <span class="token keyword">if</span> tmp <span class="token operator">&lt;=</span> theta<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span></code></pre><p>这是最直接的实现，为了“以后的事情”（书中原话，具体是为了什么，我得往后学再说），引入偏置 $b$，将 $\theta$ 换成 $-b$，感知机会计算信号和权重的乘积，再加上偏置。那么有两个输入的感知机可以表示为：</p><p>$$ y &#x3D; \begin{cases} 0 &amp; (b + w_1 x_1 + w_2 x_2 \le 0) \\ 1 &amp; (b + w_1 x_1 + w_2 x_2 \gt 0) \end{cases} $$</p><p>利用 numpy 数组，用偏置和权重实现与门：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">AND</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">]</span><span class="token punctuation">)</span>    w <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">0.7</span>    temp <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span>w<span class="token operator">*</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> b    <span class="token keyword">if</span> temp <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span></code></pre><p>显然权重可以衡量信号的重要性，偏置反映了神经元被激活（输出为1）的容易程度。</p><p>通过尝试可以发现，调整权重和偏置，可以用几乎一样的代码实现与非门和或门，但是无法实现异或门。为什么？</p><h3 id="感知机的局限性"><a href="#感知机的局限性" class="headerlink" title="感知机的局限性"></a>感知机的局限性</h3><p>举一个例子，权重参数为 $(b, w_1, w_2) &#x3D; (-0.5, 1.0, 1.0)$ 时，感知机可以实现或门的逻辑。此时感知机会生成由直线 $-0.5 + x_1 + x_2 &#x3D; 0$ 分割开的两个空间，一个空间输出1,另一个空间输出0。如图所示：</p><p><img src="https://s2.loli.net/2022/10/01/lFgarC6HOzn2UNE.png" alt="一个或门的线性空间示意" loading="lazy"></p><p>或门在 $(x_1, x_2) &#x3D; (0, 0)$ 时输出0，在 $(x_1, x_2)$ 为 $(0, 1)$、$(1, 0)$、$(1, 1)$ 时输出1。图中 $\circ$ 表示输出0， $\triangle$ 表示输出1，感知机能做出一条直线将 $\circ$ 和 $\triangle$ 分开。与门和与非门的情况与之类似。</p><p>而异或门的输出空间如图：</p><p><img src="https://s2.loli.net/2022/10/01/3TBwZ5qSeRLOcUf.png" alt="异或门的输出空间" loading="lazy"></p><p>显然无法用一条直线将 $\circ$ 和 $\triangle$ 分开（不信可以多试试🤪），而感知机只能表示由一条直线分割的空间（线性空间，而上图这样由曲线分割的空间被称作非线性空间），所以就无法用感知机直接实现异或门（无法表示非线性空间）。</p><h3 id="多层感知机"><a href="#多层感知机" class="headerlink" title="多层感知机"></a>多层感知机</h3><p>但是实现异或门的方法很多，其中之一就是组合与门、与非门和或门，如图所示：</p><p><img src="https://s2.loli.net/2022/10/01/JXFVygiPfKe2B1x.png" alt="组合实现异或门" loading="lazy"></p><p>用 python 实现上图所示的异或门（假设已经实现了与门、与非门和或门）：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">XOR</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> NAND<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>    s2 <span class="token operator">=</span> OR<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span>    y <span class="token operator">=</span> AND<span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span>    <span class="token keyword">return</span> y</code></pre><p>这里我们就成功用多个感知机实现了异或门，做到了之前做不到的事！可以用感知机的表示方法来表示这个异或门：</p><p><img src="https://s2.loli.net/2022/10/01/lGJzhTYB5Xu4NgS.png" alt="用感知机表示异或门" loading="lazy"></p><p>这个感知机与前面代表与门等逻辑门的感知机不同。实际上，与门、或门等是单层感知机，而异或门是2层感知机（只有两层有权重，可以看作简单的神经网络）。</p><ol><li>第0层的两个神经元接收输入信号，并将信号发送至第1层的神经元。</li><li>第1层的神经元将信号发送至第2层的神经元，第2层的神经元输出 $y$。</li></ol><p>从上面这一部分能看出什么呢？叠加感知机的层数就可以更灵活地表示更复杂的东西，比如表示非线性空间，甚至可以作为神经网络的基础。通过一些相关的图解可以发现，神经网络中神经元的连接方式和感知机应该是一致的。</p><p>PS：在这一点上，感知机和它能直接表示的那些最简单的逻辑门很像，都能作为更复杂逻辑结构的基本单位。</p><p><del>感知机和神经网络？且听下回分解……</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;内容参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;《深度学习入门：基于 Python 的理论与实现》(斋藤康毅)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;感知机&quot;&gt;&lt;a href=&quot;#感知机&quot; class=&quot;headerlink&quot; title=&quot;感知机&quot;&gt;&lt;/a&gt;感知机&lt;/h2&gt;&lt;p&gt;感</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="深度学习" scheme="https://afool.top/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="感知机" scheme="https://afool.top/tags/%E6%84%9F%E7%9F%A5%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>尝试分析《到官》这首诗</title>
    <link href="https://afool.top/writing/trying-to-analyze-dao-guan/"/>
    <id>https://afool.top/writing/trying-to-analyze-dao-guan/</id>
    <published>2022-09-13T16:02:39.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>到官</strong></p><p>元 范梈</p><p>陶公到官八十日，今我到官逾半期。</p><p>劝农省俗了无补，暖衣饱食将何为？</p><p>常思在山深虎豹，几曾当道假狐狸？</p><p>英雄见义犹饥渴，可使文人有愧辞？</p></blockquote><span id="more"></span><h2 id="事情是这么来的"><a href="#事情是这么来的" class="headerlink" title="事情是这么来的"></a>事情是这么来的</h2><p>在秋招的列车上，我找了个风速稍缓的角落坐下来，看起了《银魂》。这个时候，力哥发来这首诗，后面跟着一条信息：有空帮我赏析一下？</p><p>虽然大学三年以来实在是荒废了读书（尤指非专业的书）一事，但是能帮得上的那肯定要帮。自己的理解可能有很多不到位的地方，献丑了。</p><h2 id="尝试直译"><a href="#尝试直译" class="headerlink" title="尝试直译"></a>尝试直译</h2><p>陶公（陶渊明）在官八十余日，如今我上任已过半年。勉励人们耕作、到处视察民俗都无所助益，（我）丰衣足食又是要做什么？常常想到隐于山野中的虎豹，何曾阻拦道路假作狐狸？英雄见到（行）正义之事（的机会）尚且会激动不已，又怎能让文人有虚假的言辞？</p><h2 id="一些分析"><a href="#一些分析" class="headerlink" title="一些分析"></a>一些分析</h2><p>首联意思比较明显，应该没有太多争议。“陶公”极大可能是指陶渊明，再加上“到官八十日”的描述，应该不会有错。将陶渊明在官八十余日自免去职与自己上任已过半年之事并举，可能是表达自己的处境与陶公类似，借前人故事抒发自己的感受，有欲效仿之意。</p><p>根据搜索到的结果，劝农、省俗分别指勉励人们耕作、视察民情。陶渊明亦有《劝农》诗劝勉人们重视和从事农业劳动；省俗观风，应该为视察民俗民风之意。“无补”可能是诗人认为自己在官半年多做的这些事只是表面功夫，并没有真的为百姓做实事。“暖衣饱食”即穿得暖吃得饱，类似于丰衣足食，“将何为”应该是诗人反问自己，即使自己丰衣足食又有何作为。（如果按“即使百姓能丰衣足食又有什么用”来理解的话感觉不是很搭。首先百姓“暖衣饱食”就不至于质问“何为”，其次既然认为自己在任没有做实事，拿百姓“暖衣饱食”来承接就显得矛盾。）</p><p>“在山深虎豹”从字面意义上讲应该是隐于深山的虎豹，我认为可以引申为隐退于市井的有志之士。“当道”意为阻挡道路，也指身居要位，“假狐狸”直译可能是假借狐狸的身份，与“虎豹”对应的话可能是说充当仗势欺人的小人。这一联应该是指自己宁愿坚守气节归隐山林，也不愿继续狐假虎威无所作为。</p><p>“英雄见义”自然要勇为，“饥渴”可能是强调“见义”后正义感的冲动。“愧”一般指使人羞惭之意，在这里“愧辞”应该是说不真实（从而使自己羞惭）的言辞（或者从《左传·襄公二十七年》：“夫子之家事治,言於晋国无隐情，其祝史陈信於鬼神无愧辞。”等处可以看出，“愧辞”二字可直接译为不真实的言辞）。表达自己不愿屈从、坚持表达真实想法之意。</p><h3 id="整首诗的意思或许就是……"><a href="#整首诗的意思或许就是……" class="headerlink" title="整首诗的意思或许就是……"></a>整首诗的意思或许就是……</h3><p>陶渊明上任仅仅八十余日就弃官归隐，而我现在就职半年有余，心中有效仿陶公之意。我在这里仅仅是劝勉人们辛勤耕作、到处视察民风民俗，逞尽官威，却对百姓的生活毫无助益。这样的话，即使我吃饱穿暖了又能有何作为？我常常想着宁愿怀抱自己的气节志向归隐山林，何曾想过要像现在这样尸位素餐？那些英雄人物见到行正义之事的机会都会想着积极行动，我作为文人又怎么能违背自己的本心？</p><p><del>看不惯官场的现状，我不做官啦！大概这样？</del></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上算是我个人的思路。对于这种比较冷门的诗文，直接上网查资料确实比我高中的时候翻书要方便些（虽然网上除了原文和作者简介之外就没有任何直接的分析了，这也太冷门了）。</p><p>希望不会有太离谱的错误，如果有的话请务必指出！谢谢大伙儿！</p><p>😄</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;到官&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;元 范梈&lt;/p&gt;
&lt;p&gt;陶公到官八十日，今我到官逾半期。&lt;/p&gt;
&lt;p&gt;劝农省俗了无补，暖衣饱食将何为？&lt;/p&gt;
&lt;p&gt;常思在山深虎豹，几曾当道假狐狸？&lt;/p&gt;
&lt;p&gt;英雄见义犹饥渴，可使文人有愧辞？&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="读点什么" scheme="https://afool.top/categories/%E8%AF%BB%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="诗歌" scheme="https://afool.top/tags/%E8%AF%97%E6%AD%8C/"/>
    
  </entry>
  
  <entry>
    <title>some-linux-tips</title>
    <link href="https://afool.top/post/some-linux-tips/"/>
    <id>https://afool.top/post/some-linux-tips/</id>
    <published>2022-08-23T03:09:33.000Z</published>
    <updated>2022-11-13T03:11:23.055Z</updated>
    
    <content type="html"><![CDATA[<p>这里放一些有关 Linux 的东西，有一些日常使用的感受，还有一些通过选修课等方式学到的、或多或少会用到的技巧。</p><p><em>正在施工中，可以查看大体框架的准备情况。</em></p><span id="more"></span><h2 id="各发行版之间最浅显的区别"><a href="#各发行版之间最浅显的区别" class="headerlink" title="各发行版之间最浅显的区别"></a>各发行版之间最浅显的区别</h2><p>我自己用过一段时间的 Arch Linux，最近因为搞比赛要用到 ROS，顺手也用上了 Ubuntu。除此之外，我也因为课程、个人兴趣等原因多多少少接触过 OpenSUSE 和 CentOS 等发行版。</p><p>要说各个发行版之间最明显的区别，我觉得应该是它们的包管理器。使用 Linux 发行版免不了用包管理器安装、更新软件，这方面的体验很可能会影响用户对发行版的第一印象。包管理带来的问题，比如依赖管理、版本冲突和更新发行方式等会直接影响整个 OS 环境的稳定性（再比方说发布式版本更新、滚动更新乃至像 <code>Nix</code> 这样的原子更新方式之间的区别对设置开发环境的体验影响还是很大的）。</p><p>与包管理联系紧密的因素之一是发行版的软件源。很多发行版都会标榜自己拥有多少多少软件包，如果官方软件源的覆盖范围足够广（哪怕官方软件源没有但是第三方提供支持也好），那这个发行版的推广难度就会小很多。很多第三方软件都只有 deb 和 rpm 包，虽然重新打包应该不算很难，但是对于更“初级”的用户（比如大多数非计算机行业的用户）来说，某个发行版没有自己常用的第三方软件（比如说 QQ 和微信😓️）就足以构成他们拒绝这个发行版的理由了。</p><h2 id="之前上过的-Unix-选修课"><a href="#之前上过的-Unix-选修课" class="headerlink" title="之前上过的 Unix 选修课"></a>之前上过的 Unix 选修课</h2><p><em>虽然我当时选这门课的时候课程名称里是 Unix，老师也发了以前用的 Unix 教材（基于 IBM AIX），但是实际上课的时候就直接按 Linux 的内容来讲了，当时的实验统一用了 CentOS。</em></p><h3 id="从文件开始"><a href="#从文件开始" class="headerlink" title="从文件开始"></a>从文件开始</h3><p>日常使用 Linux 肯定免不了跟它的文件系统打交道，其中最显而易见的几个要素大概就是 <code>ls</code> 时看到的那些，像这样：</p><pre class="language-bash" data-language="bash"><code class="language-bash">❯ <span class="token function">ls</span> <span class="token parameter variable">-l</span>total <span class="token number">12</span>-rw-r--r-- <span class="token number">1</span> chldu chldu  <span class="token number">259</span> Aug <span class="token number">18</span> 00:22 Cargo.toml-rw-r--r-- <span class="token number">1</span> chldu chldu <span class="token number">2698</span> Aug <span class="token number">18</span> 00:22 README.mddrwxr-xr-x <span class="token number">2</span> chldu chldu <span class="token number">4096</span> Aug <span class="token number">18</span> 00:22 src</code></pre><p>这里加上了 <code>-l</code> 来查看文件的详细信息，其它选项像常用的 <code>-a</code> 等就不赘述了，用 <code>--help</code> 就可以看到详细的解释。</p><h3 id="我是谁？我在哪？"><a href="#我是谁？我在哪？" class="headerlink" title="我是谁？我在哪？"></a>我是谁？我在哪？</h3><p><em>如 pwd 等</em></p><p><em>which 和 whereis 等</em></p><h3 id="积木-OR-砖瓦"><a href="#积木-OR-砖瓦" class="headerlink" title="积木 OR 砖瓦"></a>积木 OR 砖瓦</h3><p><em>“玩具”性质和“工具”性质</em></p><p><em>其他常用命令和技巧</em></p><p><em>grep</em> -&gt; <em>管道</em>……</p><p><em>shell 脚本相关</em></p><h2 id="一些奇怪的小知识"><a href="#一些奇怪的小知识" class="headerlink" title="一些奇怪的小知识"></a>一些奇怪的小知识</h2><p>关于显卡驱动：其实现在在 Linux 下安装显卡驱动也算不上一件太难的事，需要注意的就是如果系统的内核是 <code>zen</code> 等定制内核，nvidia 显卡就要用 <code>dkms</code> 驱动。</p><h2 id="如果是-WSL……"><a href="#如果是-WSL……" class="headerlink" title="如果是 WSL……"></a>如果是 WSL……</h2><p>WSL2 甚至不用另外装显卡驱动，只要 Windows 的驱动支持 WSL，装上 X 就可以直接用 Linux 下的 GUI 应用。（Wow!）</p><h2 id="使用之后的感受"><a href="#使用之后的感受" class="headerlink" title="使用之后的感受"></a>使用之后的感受</h2><p><em>一些个人的感受，优点和缺点</em></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;这里放一些有关 Linux 的东西，有一些日常使用的感受，还有一些通过选修课等方式学到的、或多或少会用到的技巧。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;正在施工中，可以查看大体框架的准备情况。&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="Linux" scheme="https://afool.top/tags/Linux/"/>
    
    <category term="Unix" scheme="https://afool.top/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Chamber：聊天小玩具</title>
    <link href="https://afool.top/post/a-toy-for-chatting-chamber/"/>
    <id>https://afool.top/post/a-toy-for-chatting-chamber/</id>
    <published>2022-08-12T12:51:45.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/charliedu2000/chamber">Chamber</a> 是什么？一个自娱自乐的小玩具，非常简单的聊天工具。</p><p>它有极其简洁的 TUI，</p><p><em>项目还在施工中，目前还是点进项目主页看一下 TODOs 吧~</em></p><span id="more"></span><p>包含在 <a href="https://github.com/charliedu2000/MyToys">MyToys</a> 中~</p><p>是的，这里会写我为什么写了这个小玩意以及写的时候在想什么。（好，flag 立下了。）</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/charliedu2000/chamber&quot;&gt;Chamber&lt;/a&gt; 是什么？一个自娱自乐的小玩具，非常简单的聊天工具。&lt;/p&gt;
&lt;p&gt;它有极其简洁的 TUI，&lt;/p&gt;
&lt;p&gt;&lt;em&gt;项目还在施工中，目前还是点进项目主页看一下 TODOs 吧~&lt;/em&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="TCP" scheme="https://afool.top/tags/TCP/"/>
    
    <category term="Rust" scheme="https://afool.top/tags/Rust/"/>
    
    <category term="TUI" scheme="https://afool.top/tags/TUI/"/>
    
    <category term="chat room" scheme="https://afool.top/tags/chat-room/"/>
    
  </entry>
  
  <entry>
    <title>真实轰然崩塌——冈岛二人《克莱因壶》</title>
    <link href="https://afool.top/post/klein-no-tsubo-by-futari-okajima/"/>
    <id>https://afool.top/post/klein-no-tsubo-by-futari-okajima/</id>
    <published>2022-06-20T23:39:55.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><img src="https://s2.loli.net/2022/06/21/S24u6PzL1iKlt7x.jpg" alt="klein-no-tsubo-by-futari-okajima" loading="lazy"></p><p>《克莱因壶》</p><p>（日）冈岛二人 著</p><p>张舟 译</p><p>化学工业出版社</p></blockquote><p><strong>个人强烈推荐</strong></p><h2 id="跃入克莱因之壶，“真实”的界限轰然崩塌"><a href="#跃入克莱因之壶，“真实”的界限轰然崩塌" class="headerlink" title="跃入克莱因之壶，“真实”的界限轰然崩塌"></a>跃入克莱因之壶，“真实”的界限轰然崩塌</h2><details><summary>剧透警告</summary><p>上世纪九十年代。</p><p>故事的开头是一份契约书，伊普西隆研发公司买下了主人公，也就是“我”，上杉彰彦的游戏书《脑部症候群》，作为他们新游戏的原作。“我”正在逃亡，原因似乎正是这份契约书。</p><p>究竟是怎么回事呢，这就要从“我”与“克莱因之壶”的初次接触开始讲起了。</p><p>伊普西隆的新游戏绝非那种常见的电子游戏，它将颠覆所有人对游戏的认知。“我”在研发人员百濑伸夫的陪同下尝试了伊普西隆游戏装置的试做品 K1（KLIEN 1），它看起来像是手套，但是可以完美模拟任何感觉。等待了一年半之后，百濑伸夫似乎完成了工作离开了这里，而这套装置已经发展成能够容纳整个人的躯体、把人完全置于虚拟世界之中的容器 K2。</p><p>“我”作为游戏的原作者，受邀与少女梨纱一同担任游戏测试员。梨纱还是个学生，面容姣好，楚楚动人，一出现就吸引了“我”的目光。她对这款即将颠覆时代的游戏好奇万分，也对写出了原作游戏书的“我”崇拜不已。在测试过程中，两个人被 K2 带来的极度真实的游戏体验所震撼，但由于需要保密，他们只能在两人之间交流感想，不能将任何信息透露出去。于是，两人在某种程度上成了亲密的伙伴，两颗心之间的距离渐渐缩短。</p><p>其实 K2 的模拟也并不是十全十美，在游戏过程中，“我”常常遇到眼前一黑、身体不受控制地下沉的情况，这时候总是有个男人的声音说着“回去”、“不可再继续下去”。这样的意外又一次出现，“我”不得不中断游戏。这时，伊普西隆的人突然告知“我”自己的家人出了车祸，需要马上赶往医院。“我”丢下仍在游戏中的梨纱急忙冲向医院，然而医院并没有接收到出车祸的急诊病人，“我”的家人安然无恙。</p><p>七美，一个自称是梨纱好友的女孩突然找上门来，她说梨纱已经失踪多日。公司的人也毫无征兆地告诉“我”梨纱辞职了。在寻找梨纱的过程中，“我”和七美都开始怀疑对方在说谎，因为两人的记忆完全对不上。“我”开始发现自己最近的经历变得匪夷所思：本该存在的东西消失不见，第二天却又原封不动地出现在自己身上；明明记得自己去了很多地方，在那些地方等待的七美却说“我”根本没有出现。</p><p>“我”和七美开始对行事谨慎的伊普西隆产生怀疑，对那个能够以假乱真的“克莱因壶”产生怀疑。这种装置真的只是游戏机吗？它给人的感觉是那样逼真，在游戏里能“感觉快要死了”，如果它能够超越单纯的“感觉”……“我”又想起了那个男人警告：“趁现在还可以控制，快逃吧。”那是百濑伸夫的声音。</p><p>梨纱是不是在 K2 里面遭遇了什么？“我”的记忆又是怎么回事？调查的线索全都指向了“克莱因壶”，既然它能够完美模拟现实，那么给“我”一个伪造的场景来混淆记忆应该也是轻而易举吧？</p><p>于是“我”假装自己生病，没有去测试游戏，实际上偷偷潜入了伊普西隆费尽心机隐藏的研究所，发现了项目的档案，发现了伊普西隆对“我”的调查，发现了“我”被骗到医院那天梨纱的遭遇——她的死状。在离开研究所的途中，“我”吸入了伊普西隆施放的毒气，失去意识……</p><p>醒来后，“我”发现梨纱没有失踪，“我们”就在研究所。“我”刚刚完成一场游戏，险些直接通关。伊普西隆的人说他们安排了惊喜，将游戏的舞台换成了现实的翻版，“我”在游戏里度过了六天，但实际上游戏只进行了一个小时。</p><p>从“我”被告知家人出车祸开始就已经全是游戏了，在那之后的内容并不是真实的，后来出现的七美等人也并不存在。</p><p>测试结束后，“我”被梨绘邀请到她的公寓，两人一起用餐，一起看电影。相拥，亲吻……</p><p>是这样吗？</p><p>“快回去。”</p><p>“趁现在还可以控制，快逃吧。”</p><p>是百濑的声音。</p><p>第二天，“我”离开了梨纱。</p><p>说来也是，究竟哪边才是真实的呢？此刻“我”究竟是在“壶内”还是在“壶外”呢？“我”是又被扔进了克莱因壶、被灌输着模拟的感受，还是被克莱因壶制造的幻影纠缠、难以自拔？</p><p>与克莱因壶接触的那一瞬，“我”就已经被吸入壶内。这壶的内外，或许本就没有什么区别。</p><p>要找到答案也不是没有办法，用生命去验证就好了。如果身在壶内，应该会游戏结束。如果身在壶外——</p></details><h2 id="清晨，我麻木的大脑"><a href="#清晨，我麻木的大脑" class="headerlink" title="清晨，我麻木的大脑"></a>清晨，我麻木的大脑</h2><h3 id="极致的阅读快感"><a href="#极致的阅读快感" class="headerlink" title="极致的阅读快感"></a>极致的阅读快感</h3><p>写得好啊，冈岛二人。我好久没有为了看小说而熬夜了，但是这本《克莱因壶》向我证明了它值得我熬。</p><p>我上面的总结<del>剧透</del>远远不能概括这部作品的魅力。作为一部科幻小说，《克莱因壶》的题材显然是领先于时代的。这本书首次出版应该是在 1989 年，那个时候“虚拟现实”这个概念可远远比不上今天这么火爆，大概是在九十年代后期，像《黑客帝国》这样的作品的出现才带起了一波热潮。当然现在大家已经把这个元素玩出花了，VR 元素有《头号玩家》、《刀剑神域》等，谈到混淆虚拟与现实的话《盗梦空间》之类的作品也算有异曲同工之妙。冈岛二人能够写出这样的题材、达到这样的高度，令人叹为观止。</p><p>作为一部推理小说，《克莱因壶》几乎把“精彩”二字揉进了书中的每一个角落。说实话，要猜测情节的大致走向不算太难，毕竟今天的读者对这种主人公受虚拟世界影响感觉虚实难辨的故事已经有点司空见惯了。但是，冈岛二人的高明之处在于将情节的矛盾冲突安排得恰到好处，主人公在游戏中一开始遇到程序异常，这没有什么（程序员都知道这是常态了，你说是吧），但是随着情节的发展，这个不怎么意外的异常成为了主人公对自己的经历产生怀疑的主要原因之一。“第一幕出现的枪，第三幕一定要响”。本作的各种伏笔细节也十分到位，悬念解开的一刹，即使已经多多少少猜到了故事的走向，我还是被震得头皮发麻。那种揭露真相的快感还有思考“壶内壶外”之后的心有余悸是这部作品送给我的终极大礼。</p><h3 id="对着梨纱幻想爱情"><a href="#对着梨纱幻想爱情" class="headerlink" title="对着梨纱幻想爱情"></a>对着梨纱幻想爱情</h3><p>有点不好意思，在读的过程中，我的脑子里还一直有个声音疯狂叫喊：梨纱卡哇伊！（我还老是想把她叫成梨绘，不知道为什么。）梨纱一出场就是直接的外貌描写，直接把“娇柔可爱”、“身材好”和“青春活泼”等标签扔到了我的脸上，各种不经意间的小动作，就差把“会和男主角暗生情愫”这句话直接写进设定了。我一个死宅哪见过这种场面，只好一边跟着故事情节坐过山车一边想着“嘿嘿，梨纱，我的梨纱……”或者“呜呜，梨纱，我的梨纱……”</p><h3 id="真实与虚幻，世界的真身"><a href="#真实与虚幻，世界的真身" class="headerlink" title="真实与虚幻，世界的真身"></a>真实与虚幻，世界的真身</h3><p><del>一小段梦话，没水平。</del></p><p>读完这样的作品，总是不由得思考人生。倒也没什么成果，就是没有摆脱中二的胡思乱想罢了。</p><p>如果真有机器能够完美模拟所有的感官，那它模拟出的和人感受到的真实有什么差别？答案可能是没有差别。我们对世界的认知取决于我们看待世界的方式。那么世界、物质这些东西到底有没有自己的准确形态呢？我认为有。但是我们还是要通过一定的方式去感知它们的存在形式和规律，所以我们认识到的形态其实还是与我们采取的认知方式有关。如果“感觉到一模一样”，那么对我们来说，它们应该就是一样。</p><p>只能说幸好技术还没有那么发达，不然我可能也要整日怀疑自己是不是个“缸中之脑”了。</p><h2 id="余谈——传奇般的二人"><a href="#余谈——传奇般的二人" class="headerlink" title="余谈——传奇般的二人"></a>余谈——传奇般的二人</h2><p>开始读正文之前，我的内心历程：</p><ul><li>（看封面）冈岛二人？这名字有点意思……“二”人有什么含义吗……</li><li>（开始读导读）原来“二人”就是字面意义上的二人！冈岛二人（Okajima Futari）发音近似“两个怪人”（Okashina Futari）啊……</li><li>“社会人”德山从生活中发现灵感、设想背景、线索和对话等，“宅男”井上负责大纲和整个故事主体，两人各自的习惯阅历等等成就了这个组合。</li><li>分开后果然是井上好作品更多啊……不过德山能继续在其他地方设计谜题也算是发挥了长处吧……</li><li>绑架的冈岛……嗯……皆杀的田中（无端）？</li><li>爱写赛马……我又无端想到东野圭吾爱写滑雪……</li><li>《然后，门被关上了》，记下，有机会找来看一看。</li><li>写作题材很丰富啊，两个人的合作优势明显。</li><li>（看到书衣上的译者简介）嗯？译者也是两人的写作组合？</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://s2.loli.net/2022/06/21/S24u6PzL1iKlt7x.jpg&quot; alt=&quot;klein-no-tsubo-by-futari-okajima&quot; loading=&quot;lazy&quot;&gt;&lt;/p&gt;
&lt;p&gt;</summary>
      
    
    
    
    <category term="读点什么" scheme="https://afool.top/categories/%E8%AF%BB%E7%82%B9%E4%BB%80%E4%B9%88/"/>
    
    
    <category term="小说" scheme="https://afool.top/tags/%E5%B0%8F%E8%AF%B4/"/>
    
    <category term="读后感" scheme="https://afool.top/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>用 tcod-rs 写个游戏，所以……</title>
    <link href="https://afool.top/learning/write-a-roguelike-game-with-tcod-rs/"/>
    <id>https://afool.top/learning/write-a-roguelike-game-with-tcod-rs/</id>
    <published>2022-05-15T15:45:35.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<p><del>这是一篇水文。</del></p><h2 id="为什么写了这个么东西呢？"><a href="#为什么写了这个么东西呢？" class="headerlink" title="为什么写了这个么东西呢？"></a>为什么写了这个么东西呢？</h2><p>这是个好问题，动机永远是关键。第一点呢，我这个人玩心很重，能不做任务就绝对不会做，用一切时间来玩（或者睡），在玩的过程中逐渐有了自己做个游戏的想法。正巧托室友的福，我发现了这个项目合集：<a href="https://github.com/codecrafters-io/build-your-own-x">Build your own x</a>，里面有好几个小游戏的实现教程。至于第二点，我最近对 Rust 比较感兴趣，还心血来潮用它写了个课程实验。看到合集里有 Rust 的游戏，我觉得有点惊喜，就选了一个跟着做一下。</p><span id="more"></span><p>就是<a href="https://tomassedovic.github.io/roguelike-tutorial/index.html">这个</a>，用 tcod-rs 来做的 Roguelike。之前玩 Hades 很上头，发现了 Roguelike 的吸引力，就它了。</p><p>那么，一知半解的 Rust + Roguelike 游戏之旅就这么拉开了序幕。</p><p><em>当然不会贴具体的代码和过程，毕竟基本上是按教程做的，不会有太多差异。</em></p><h2 id="什么是-Roguelike？"><a href="#什么是-Roguelike？" class="headerlink" title="什么是 Roguelike？"></a>什么是 Roguelike？</h2><blockquote><p><a href="https://zh.wikipedia.org/wiki/Roguelike">Roguelike - 维基百科</a></p></blockquote><p>根据维基百科的描述，Roguelike 游戏有一些明确的特点，包括随机生成地牢、使用永久死亡机制和回合制等等（柏林准则）。在最直观的元素——画面上，早期的 Roguelike 游戏往往使用一连串的 ASCII 或者 ANSI 字符来表示。其他的也没必要说太多，知道这些就够用了。</p><p>不过看了才知道，像 Hades 这样的游戏已经比传统的 Roguelike 简单了很多。这算是降低了一点门槛吧。</p><h2 id="游戏的逻辑"><a href="#游戏的逻辑" class="headerlink" title="游戏的逻辑"></a>游戏的逻辑</h2><p>真正上手做游戏之前最大的困惑就是游戏的运行逻辑该如何实现，各种元素应该如何放到代码里面组成想要的那个东西。趁着现在还没忘完，来梳理一下。</p><h3 id="游戏里的各种物体——组装！"><a href="#游戏里的各种物体——组装！" class="headerlink" title="游戏里的各种物体——组装！"></a>游戏里的各种物体——组装！</h3><p>游戏里最直观的就是能看到、能互动的各种物体了。它们会有很多不同，比如一个敌人单位和一个友好的 NPC 的属性、行为等当然会不一样。但是它们也会有很多相同之处，比方说敌人和 NPC 都可能会移动，这部分代码很可能一样，不太可能把它们分别写好几遍。怎么在代码层面描述这些不同和共同之处？</p><p>之前尝试用 Java 写的时候，可以利用面向对象的特点，把一些共同的部分——例如 move ——抽象成接口，不同的物体就可以分别实现这些接口，实现各种功能自由组合的直观效果。然而 Rust 似乎没有一般意义上的面向对象这个概念（它甚至都不是个面向对象的语言），所幸通过结构体的一些操作能实现一样的效果。利用特性可以实现一些接口，在子类中定义父类的实例可以变相实现继承。</p><p>比方说有一个具有战斗相关属性的类型 <code>Fighter</code>，如果是 Java 就可以把它写成接口，放在子类里面实现，而 Rust 要直接写出实现，在 <code>Object</code> 里定义一个 <code>Option&lt;Fighter&gt;</code>，当这个 <code>Fighter</code> 有确定的实例时它就是一个战斗单位（玩家、敌人等）。像是用各种零件组装出一个完整的机器一样。</p><p>这样一来就清楚了，可以把各种功能属性单独包装起来，用这种组合的方式实现具有复杂属性的类型。</p><h3 id="游戏循环——性能黑洞？"><a href="#游戏循环——性能黑洞？" class="headerlink" title="游戏循环——性能黑洞？"></a>游戏循环——性能黑洞？</h3><p>看过一些有关游戏实现的文章之后，我悟了：游戏可以在一个循环中进行，尤其是这种玩家行动-怪物行动的模式，实在是再合适不过了。</p><p>开始游戏其实就是进入程序的主循环，我按照教程做下来，主循环会依次完成这些任务：</p><ol><li>清除前一帧</li><li>检测、记录鼠标键盘输入事件</li><li>重新绘制画面</li><li>计算经验值</li><li>根据玩家行动退出游戏或使怪物行动</li></ol><p>具体每一步怎么实现就不赘述了，展示信息、修改属性数值什么的还算比较常规。</p><p>按照这样的思路，游戏的每一次循环都会对所有数据来一次检查，如果是比较复杂的游戏，计算量应该会很大。<del>游戏吃性能的原因之一？</del></p><h2 id="关于-Rust-本身"><a href="#关于-Rust-本身" class="headerlink" title="关于 Rust 本身"></a>关于 Rust 本身</h2><p>在整个实现过程中我又把之前忘掉的 Rust 相关的注意事项稍微拾起了一点，见识到了之前没来得及看的更高级操作，果然要把工具用得更好就是要多用。</p><h3 id="derive"><a href="#derive" class="headerlink" title="derive"></a>derive</h3><p>按照比较官方的说法，derive 应该是用来自动实现一些 trait （特性？），比方说用了 <code>#[derive(Debug)]</code>，就不用再为结构体手动写 <code>std::fmt::Debug</code> 的实现，算是非常方便了。还可以自己写 derive 宏。</p><blockquote><p>备注：<a href="https://doc.rust-lang.org/book/ch19-06-macros.html">Macros</a></p></blockquote><h3 id="所有权，所有权，还是所有权"><a href="#所有权，所有权，还是所有权" class="headerlink" title="所有权，所有权，还是所有权"></a>所有权，所有权，还是所有权</h3><p>Rust 对变量的生命周期控制得很严格，之前没怎么写 Rust 的我刚上手写这个游戏时总是碰一鼻子灰。回头又看了看 Rust “圣经”里面关于所有权和生命周期的章节，Rust 中变量与数据的交互包括移动和克隆，值得注意。不过这方面的错误应该过不了编译器那一关，多写写自然也就不会犯了。</p><p>关于所有权，比较有意思的还有 <code>Copy</code> trait、返回值转移所有权以及引用借用等。</p><p>话说为什么对所有权有这么多规定呢？可能和内存管理有关？先按下不表，之后再说（懒癌发作）。</p><p>那么就先到这里，写这篇水文距离我跟着教程做完已经有一段时间了，也忘了很多想写进来的东西，有一点遗憾。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;del&gt;这是一篇水文。&lt;/del&gt;&lt;/p&gt;
&lt;h2 id=&quot;为什么写了这个么东西呢？&quot;&gt;&lt;a href=&quot;#为什么写了这个么东西呢？&quot; class=&quot;headerlink&quot; title=&quot;为什么写了这个么东西呢？&quot;&gt;&lt;/a&gt;为什么写了这个么东西呢？&lt;/h2&gt;&lt;p&gt;这是个好问题，动机永远是关键。第一点呢，我这个人玩心很重，能不做任务就绝对不会做，用一切时间来玩（或者睡），在玩的过程中逐渐有了自己做个游戏的想法。正巧托室友的福，我发现了这个项目合集：&lt;a href=&quot;https://github.com/codecrafters-io/build-your-own-x&quot;&gt;Build your own x&lt;/a&gt;，里面有好几个小游戏的实现教程。至于第二点，我最近对 Rust 比较感兴趣，还心血来潮用它写了个课程实验。看到合集里有 Rust 的游戏，我觉得有点惊喜，就选了一个跟着做一下。&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="Rust" scheme="https://afool.top/tags/Rust/"/>
    
    <category term="游戏" scheme="https://afool.top/tags/%E6%B8%B8%E6%88%8F/"/>
    
  </entry>
  
  <entry>
    <title>生产者消费者模型</title>
    <link href="https://afool.top/learning/java-thread-producer-and-consumer/"/>
    <id>https://afool.top/learning/java-thread-producer-and-consumer/</id>
    <published>2021-10-07T11:37:53.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h2><p><del>书接上回……<a href="https://afool.top/learning/java-thread/">Java 中的多线程编程？</a>……</del></p><p>要讨论多线程问题，生产者消费者模型是绕不开的。简单来说，生产者消费者模型中有生产者和消费者两种角色，它们操作同一个“仓库”（或许仓库也可以算一个角色），生产者向仓库中存放资源，消费者从仓库中获取资源。</p><p><img src="https://i.loli.net/2021/10/08/uegpBx7DaF2IOZJ.png" alt="生产者消费者" loading="lazy"></p><p>显然，仓库已满的时候生产者不能再往仓库中存放资源，而仓库为空的时候消费者不能获取资源。</p><h2 id="所以……这就实现了？"><a href="#所以……这就实现了？" class="headerlink" title="所以……这就实现了？"></a>所以……这就实现了？</h2><p>按照上面所写的定义，我们写代码实现一下这个模型。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 仓库</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedList</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Storage</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> linkedList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linkedList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"生产者 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 生产，当前数量："</span> <span class="token operator">+</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    linkedList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者 "</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 消费，当前数量："</span> <span class="token operator">+</span> linkedList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">20</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> linkedList<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">thread1006<span class="token punctuation">.</span></span><span class="token class-name">MyRandom</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> storage<span class="token punctuation">.</span><span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库已满，生产者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">MyRandom</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        storage<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">thread1006<span class="token punctuation">.</span></span><span class="token class-name">MyRandom</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库为空，消费者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>          <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token class-name">MyRandom</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        storage<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Storage</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <code>Consumer</code> 类中写了程序入口。按照前面所讲的，我们的生产者和消费者线程应该会根据仓库中列表的大小完成我们预期的动作。</p><p>但是程序运行的结果却让我大跌眼镜，来看其中的一小段输出：</p><pre class="language-text" data-language="text"><code class="language-text">生产者 Thread-2 生产，当前数量：1消费者 Thread-4 消费，当前数量：0消费者 Thread-3 消费，当前数量：1生产者 Thread-1 生产，当前数量：2生产者 Thread-0 生产，当前数量：1生产者 Thread-0 生产，当前数量：2消费者 Thread-5 消费，当前数量：0生产者 Thread-0 生产，当前数量：3生产者 Thread-1 生产，当前数量：1消费者 Thread-4 消费，当前数量：0生产者 Thread-2 生产，当前数量：1消费者 Thread-4 消费，当前数量：3生产者 Thread-1 生产，当前数量：4生产者 Thread-1 生产，当前数量：4</code></pre><p>消费者消费数量与仓库中资源减少量不符，生产者生产后资源数量不变……</p><p>还有这种：</p><pre class="language-text" data-language="text"><code class="language-text">仓库为空，消费者 Thread-3 等待仓库为空，消费者 Thread-5 等待仓库为空，消费者 Thread-4 等待仓库已满，生产者 Thread-0 等待仓库已满，生产者 Thread-1 等待仓库已满，生产者 Thread-2 等待</code></pre><p>仓库到底是空还是满？</p><p>这些问题很严重。为什么会这样呢？原因很简单：这些线程没有同步。各个线程可以同时对仓库执行自己的动作，我们看到的输出就会乱作一团。设想一下，两个生产者同时生产，我们预期的结果是数量依次加1，但是我们实际看到的可能是两个生产者输出的数量都是原来的数量加2。</p><p>还有一个经典的例子：售卖车票。如果购票系统中的一个线程刚使票数减1，票卖完了，但操作没有结束，另一个线程就插进来，很可能导致系统卖出一张不存在的票。</p><p>为了避免这些情况，我们需要给这些线程加上同步锁，使线程互斥。</p><h2 id="还要加锁"><a href="#还要加锁" class="headerlink" title="还要加锁"></a>还要加锁</h2><p>在 Java 中加同步锁很简单，用 <code>synchronized (共享数据对象) &#123; 要同步的代码块 &#125;</code> 就可以。</p><p>加上锁的生产者和消费者如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 生产者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> storage<span class="token punctuation">.</span><span class="token function">getMAX_SIZE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库已满，生产者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          storage<span class="token punctuation">.</span><span class="token function">produce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 消费者</span><span class="token keyword">package</span> <span class="token namespace">thread1006</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">&#123;</span>  <span class="token class-name">Storage</span> storage<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span><span class="token class-name">Storage</span> storage<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>storage <span class="token operator">=</span> storage<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"仓库为空，消费者 "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 等待"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>          storage<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          storage<span class="token punctuation">.</span><span class="token function">getLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Storage</span> storage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Storage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Producer</span> producer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Consumer</span> consumer3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>storage<span class="token punctuation">)</span><span class="token punctuation">;</span>    producer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    producer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    consumer3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>仓库中的 <code>linkedList</code> 就是共享数据，所以要把它作为锁，把线程对它的操作作为同步代码块。这样的话在某一时刻就只有一个线程能拿到共享的数据，避免了前面的错误。</p><p>上面是用了 <code>wait()</code> 和 <code>notify()</code> 方法来完成线程的等待和唤醒，当然还有其他方法，就不一一展示了。</p><p>一小段输出结果：</p><pre class="language-text" data-language="text"><code class="language-text">仓库已满，生产者 Thread-2 等待仓库已满，生产者 Thread-0 等待仓库已满，生产者 Thread-1 等待消费者 Thread-3消费，当前数量：19消费者 Thread-3消费，当前数量：18消费者 Thread-3消费，当前数量：17消费者 Thread-3消费，当前数量：16消费者 Thread-3消费，当前数量：15消费者 Thread-3消费，当前数量：14消费者 Thread-3消费，当前数量：13生产者 Thread-1生产，当前数量：14生产者 Thread-1生产，当前数量：15生产者 Thread-1生产，当前数量：16生产者 Thread-1生产，当前数量：17生产者 Thread-1生产，当前数量：18生产者 Thread-1生产，当前数量：19生产者 Thread-1生产，当前数量：20仓库已满，生产者 Thread-1 等待消费者 Thread-3消费，当前数量：19消费者 Thread-3消费，当前数量：18生产者 Thread-2生产，当前数量：19生产者 Thread-2生产，当前数量：20仓库已满，生产者 Thread-2 等待消费者 Thread-5消费，当前数量：19消费者 Thread-5消费，当前数量：18消费者 Thread-5消费，当前数量：17消费者 Thread-5消费，当前数量：16消费者 Thread-5消费，当前数量：15消费者 Thread-5消费，当前数量：14消费者 Thread-5消费，当前数量：13</code></pre><h3 id="关于-wait-和-notify"><a href="#关于-wait-和-notify" class="headerlink" title="关于 wait() 和 notify()"></a>关于 wait() 和 notify()</h3><p>从上面可以看出调用 <code>wait()</code> 和 <code>notify()</code> 的对象是作为同步锁的共享资源 <code>Storage.linkedList</code>，为什么要用它来调用这两个方法呢？</p><p><code>wait()</code> 方法可以让一个线程进入等待状态并释放持有的锁，而 <code>notify() </code> 则是通知等待该锁的线程重新获得这个锁对象。显然，如果没有锁对象，这两个方法就没有意义。所以要使用这两个方法，必须指定锁对象，把要同步的部分写进同步代码块，通过锁对象来调用它们。</p><p><del>（话锋一转）</del>这也就解释了 <code>wait()</code> 和 <code>sleep()</code> 的本质区别。<code>wait()</code> 是通过线程通信来通知线程进入等待状态并释放锁，而 <code>sleep()</code> 是控制当前线程等待，并不释放所持有的资源。同时，由于 <code>wait()</code> 涉及到同步锁，我们必须在同步代码块中才能使用它，而 <code>sleep()</code> 与锁无关，我们可以在任何地方调用。</p><p>哦，还有一件事，<code>wait()</code> 属于 <code>Object</code> 类（毕竟同步锁可以是任何类的实例），而 <code>sleep()</code> 是 <code>Thread</code> 类的静态方法。这一点应该不难理解吧……</p><p>（欢迎捉虫，逃~）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;生产者消费者模型&quot;&gt;&lt;a href=&quot;#生产者消费者模型&quot; class=&quot;headerlink&quot; title=&quot;生产者消费者模型&quot;&gt;&lt;/a&gt;生产者消费者模型&lt;/h2&gt;&lt;p&gt;&lt;del&gt;书接上回……&lt;a href=&quot;https://afool.top/learning</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
    <category term="多线程" scheme="https://afool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何拥有一辆属于自己的三蹦子</title>
    <link href="https://afool.top/learning/how-to-own-a-tricycle/"/>
    <id>https://afool.top/learning/how-to-own-a-tricycle/</id>
    <published>2021-09-26T10:56:38.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<p>你是否经常感到空虚寂寞、百无聊赖？你是否缺少陪伴、倍感不安、想要在这喧嚣的城市里寻找一份慰藉？</p><p>毫无疑问，拥有属于自己的车、房可以在物质层面缓解这些焦虑（确信）。买房太难了，所以就先从车开始吧。</p><h2 id="三轮车也是车"><a href="#三轮车也是车" class="headerlink" title="三轮车也是车"></a>三轮车也是车</h2><p>打住，我要说的并不是这种车：</p><p><img src="https://i.loli.net/2021/09/26/ln7xH36LUbiZc9O.png" alt="车1网图" loading="lazy"></p><p><img src="https://i.loli.net/2021/09/26/GHQzW9Xd73DqvNF.png" alt="车2网图" loading="lazy"></p><p>或者这种车：</p><p><img src="https://i.loli.net/2021/09/26/E3CDyXLPTh5qFfS.png" alt="蝙蝠车网图" loading="lazy"></p><p><del>废话，你以为我买得起？</del></p><p>而是这种：</p><p><img src="https://i.loli.net/2021/09/26/En4idsW7mopQIlw.png" alt="三蹦子" loading="lazy"></p><p>什么？这不行？气抖冷，难道三轮车就不是车？玩具车就不能给慰藉了？</p><span id="more"></span><h2 id="从零（并不是）开始的造三轮生活"><a href="#从零（并不是）开始的造三轮生活" class="headerlink" title="从零（并不是）开始的造三轮生活"></a>从零（并不是）开始的造三轮生活</h2><p>是这样的，我想搞个小车已经很久了，大概大半年了？早早地就从某宝上买了亚克力板和电机、轮子（所以不算从零开始），准备大干一番，却一直没有动手。因为之前没有接触过单片机，丝毫没有头绪。<del>（懒）</del></p><p>事情的转机出现在今年夏季小学期，我们要基于单片机学电子系统设计了。狂喜，有人教了。于是在焊完板子学了一些案例后我们就放假回家了，老师特意说要自己想想选题（不过很多人不一定想了）嗯？这还用想？做车啊！</p><p><del>虽然这样说，我还是等到了暑假的最后一周才开始动手。</del></p><h3 id="电机驱动"><a href="#电机驱动" class="headerlink" title="电机驱动"></a>电机驱动</h3><p>对于车来说，最基本的是什么？当然是能跑。所以我首先测了电机能不能转。</p><p>我用的板子就是之前<a href="https://afool.top/learning/stc-beep-music/">蜂鸣器唱《国际歌》</a>的那块，芯片型号是 IAP15F2K60S2（基本等同于STC15F2K60S2）。板子上有三个拓展接口：EXT、SM 和 485。大概长这样：</p><p><img src="https://i.loli.net/2021/09/26/zn1dQPEOVopC6Nb.png" alt="拓展接口" loading="lazy"></p><p>最适合拿来控制两个电机的当然是 SM （步进电机）接口，给了一个 VCC 和四个引脚输出（EXT 接口蓝牙要用，485 只给了两个引脚和 GND）。直接把电机接到 VCC 和另一个引脚，没问题，但是接两个引脚给高低电平电机就不转，设推挽输出也没用，我是没想明白怎么回事。实在太逊了，这个样子连电机反转都搞不了，还怎么跑两个电机啊？</p><p>办法总比困难多，博闻强识的我（大嘘）怎么能想不到解决方案呢？好吧，其实是搜索引擎帮大忙。我借助了双路 L9110S 电机驱动来控制电机。</p><p><img src="https://i.loli.net/2021/09/26/sag6u8wGnzUjeJI.png" alt="电机驱动" loading="lazy"></p><p>这样就可以做到用 SM 的 VCC 和 485 的 GND 供电，用 S1 到 S4 控制两个电机。四个引脚分别接图里下方的 A-1A 这些。A-1A 和 A-1B 控制 Motor A，Motor A连接到一个电机的两端，Motor B 同理。嗯，完美解决。</p><p>让小车按命令动起来的话当然要写程序了，先给小车运动状态的基本定义：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">_MOVE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">_MOVE_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"STC15F2K60S2.H"</span></span><span class="token comment">// 接电机的引脚</span>sbit s1 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">1</span><span class="token punctuation">;</span>sbit s2 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>sbit s3 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span>sbit s4 <span class="token operator">=</span> P4 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 电机转动方向</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorStop</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorStop</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorFWD</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorFWD</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">0</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">RightMotorREV</span> <span class="token expression">s1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s2 <span class="token operator">=</span> <span class="token number">1</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LeftMotorREV</span> <span class="token expression">s3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s4 <span class="token operator">=</span> <span class="token number">1</span></span></span><span class="token comment">// 运动和停止</span><span class="token keyword">void</span> <span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 初始化</span><span class="token keyword">void</span> <span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre><p><del>分别给高低电平应该能看懂吧？</del></p><p>函数实现：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"move.h"</span></span><span class="token comment">// 前进</span><span class="token keyword">void</span> <span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorFWD<span class="token punctuation">;</span>RightMotorFWD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 后退</span><span class="token keyword">void</span> <span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorREV<span class="token punctuation">;</span>RightMotorREV<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 左转</span><span class="token keyword">void</span> <span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorREV<span class="token punctuation">;</span>RightMotorFWD<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 右转</span><span class="token keyword">void</span> <span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorFWD<span class="token punctuation">;</span>RightMotorREV<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 停车</span><span class="token keyword">void</span> <span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>LeftMotorStop<span class="token punctuation">;</span>RightMotorStop<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 初始化，s1 到 s4 推挽输出</span><span class="token keyword">void</span> <span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>P4M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token comment">//P0 = 0;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我觉得这些都算得上言简意赅（叉腰），就不多解释了。</p><h3 id="蓝牙遥控与串口通信"><a href="#蓝牙遥控与串口通信" class="headerlink" title="蓝牙遥控与串口通信"></a>蓝牙遥控与串口通信</h3><p>小车能动了，但是我们还需要控制。我最开始的想法就是做遥控，能用手机直接遥控就再好不过了。手机遥控？那就用蓝牙！</p><p>遥控器程序去手机的应用商店里搜“蓝牙串口”，最好是带按钮编辑的那种，一搜一大把，所以就先不关心了。</p><p>小车的蓝牙接收我是用 HC-06 来做的。</p><p>老师给出的样例里面有用到蓝牙串口通信的，遂“参考”之。</p><blockquote><p>STC15F2K60S2 系列单片机有2个高速异步串行通信端口，每个串口由2个数据缓冲器、一个移位寄存器、一个串行控制寄存器和一个波特率发生器等组成。</p><p>串口1已被用于下载电路，故本案例使用的是串口2来进行与蓝牙的通信。从芯片引脚电路图中，我们可以找到串口2对应的收发引脚分别为 P1.0 和 P1.1，将其的“接受”端和蓝牙模块的“发送”端相连，“发送”端和蓝牙模块的“接收端”端相连，再对应连接 VCC 和 GND 即实现了物理上电路的连通。</p><p>串口2只能使用定时器2作为波特率发生器，根据芯片使用手册的说明设置好定时器后，只要将要发送的数据写到 SBUF2 中，串口即自动发送缓存中的数据。</p><p><img src="https://i.loli.net/2021/09/26/3bd725qZpOjQaWt.png" alt="连接图示" loading="lazy"></p><p>——湖大超星 电子系统设计与创新基础训练 基于Andriod的数据采集系统</p></blockquote><p>如上所示，使用串口2进行蓝牙通信，串口2只能用定时器2作为波特率发生器，所以先初始化定时器：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">Uart2Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token comment">// 9600bps@11.0592MHz</span><span class="token punctuation">&#123;</span>S2CON <span class="token operator">=</span> <span class="token number">0x50</span><span class="token punctuation">;</span> <span class="token comment">// 8位数据，可变波特率</span>AUXR <span class="token operator">|=</span> <span class="token number">0x04</span><span class="token punctuation">;</span> <span class="token comment">// 定时器2时钟为Fosc，即1T</span>T2L <span class="token operator">=</span> <span class="token number">0xE0</span><span class="token punctuation">;</span>   <span class="token comment">// 设定定时初值</span>T2H <span class="token operator">=</span> <span class="token number">0xFE</span><span class="token punctuation">;</span>   <span class="token comment">// 设定定时初值</span>AUXR <span class="token operator">|=</span> <span class="token number">0x10</span><span class="token punctuation">;</span> <span class="token comment">//启动定时器2</span>IE2 <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>P_SW2 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>前面有注释的都是 STC-ISP 软件自动生成的，最后三句大概是中断使能、外设切换等<del>，没怎么看懂</del>。</p><p>然后是用于读取串口2接收数据的中断函数：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">UART2_Interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">8</span> <span class="token comment">// 中断8，用于串口2</span><span class="token punctuation">&#123;</span>  <span class="token keyword">unsigned</span> <span class="token keyword">char</span> temp<span class="token punctuation">;</span>    <span class="token comment">// 检查串口2控制寄存器</span>    <span class="token comment">// 将1字节的新数据赋给 ReceivedData</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>S2CON<span class="token operator">&amp;</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0x01</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>S2CON <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> S2BUF<span class="token punctuation">;</span>ReceivedData<span class="token operator">=</span>temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><del>这里似乎可以不用 <code>temp</code>。</del></p><p><code>ReceivedData</code> 是个 <code>unsigned char</code> 型的全局变量。在手机的蓝牙串口应用里编辑按钮发送不同数据，根据 <code>ReceivedData</code> 来调用小车的运动控制函数就能实现遥控。这部分程序就不写出来了，<code>switch</code> 或者 <code>if</code> 判断就行。</p><p><del>现在一看好简单啊！那为什么我暑假里写了好几天？</del></p><h2 id="当你拥有了现成的轮子"><a href="#当你拥有了现成的轮子" class="headerlink" title="当你拥有了现成的轮子"></a>当你拥有了现成的轮子</h2><p><strong>这部分可能不太具有复现性（湖大信息院学生除外，毕竟有老师给的 BSP）。</strong></p><p>上面这些是在八月的最后两三天完成的，一边摸鱼一边写程序，算是完成了蓝牙遥控小车的功能，想着就这样吧，也算个设计了，就这样交差。</p><p>令我没想到的是，暑假回来之后的下半个小学期，老师给出了一套功能完备的 BSP （Board Support Package，板级支持包），里面有板子上各种外设的驱动程序。比方说要让数码管显示一个数字，原来你需要这样：写段选、写位选、设置推挽输出、引脚赋值、循环内刷新……现在你只需要这样：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">DisplayerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 显示模块初始化</span><span class="token function">SetDisplayerArea</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 只用数码管最后一位</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管最后一位显示1</span></code></pre><p>初始化之后想显示什么直接调用 <code>Seg7Print()</code> 就行，十分快捷。</p><p>有了这样一套轮子，大家想做什么直接调库函数就行，完全不需要向我之前那样从定时器和中断开始写。于是同学们纷纷变身缝合怪，恨不得把所有模块都加到自己的设计中。</p><p><del>坏了，卷起来了。</del></p><p>没办法，我也只能多搞点东西了。先把蓝牙遥控换成了 BSP 的实现，加了上锁功能。此外在小车上加什么好呢？在咨询了<a href="https://blog.csdn.net/dasifhoaisfg?spm=1001.2014.3001.5509">隔壁老王</a>后，我确定了“超声波”这个方向，避障什么的自然是少不了，跟随式行李箱也有点意思。完成这些之后我又附加了一个红外遥控的模式。</p><p>嗯……比我的最初想法丰富多了……</p><h3 id="车身功能"><a href="#车身功能" class="headerlink" title="车身功能"></a>车身功能</h3><p><img src="https://i.loli.net/2021/09/27/Em4FxIQVOqHk23v.png" alt="车身功能" loading="lazy"></p><h3 id="程序构成"><a href="#程序构成" class="headerlink" title="程序构成"></a>程序构成</h3><p>小车整体的思想是依托 BSP 提供的<strong>设置事件回调函数</strong>的功能，持续获取外部和车身命令，维护几个系统变量，根据命令和这些变量判断当前小车应该执行的动作。</p><p><del>就没必要给整体流程图了吧？</del></p><p>由于 BSP 是学校老师写的，且其中函数实现被封装进了库文件，我就不太好意思上传了，只讲一下整体的结构和我自己写的函数吧。</p><h4 id="系统变量和函数声明"><a href="#系统变量和函数声明" class="headerlink" title="系统变量和函数声明"></a>系统变量和函数声明</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// main.h</span><span class="token comment">// 老师写的数码管显示码表就略过了</span><span class="token comment">/** * 提供四种模式： * 1. 红外遥控 * 2. 蓝牙串口遥控 * 3. 超声波避障 * 4. 跟随/保持距离 * 其中红外和蓝牙串口模式的运动状态均由 Remote() 控制 * 避障模式的运动状态由 AutoMove(int i) 控制，跟随模式的运动状态由 Follow(int i) 控制 * 系统利用 TenMsCallback()，每 10ms 进行运动控制，根据当前模式调用上述三个函数中的一个 */</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> rxd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 红外和蓝牙接收的数据</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> rxdHead <span class="token operator">=</span> <span class="token number">0xFA</span><span class="token punctuation">;</span> <span class="token comment">// 蓝牙校验，为配合红外的数据头校验，不特意使用 SetUart2Rxd() 设置</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> flag<span class="token punctuation">;</span><span class="token comment">// 标志位，是否允许操作，为1时允许操作</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedState<span class="token punctuation">;</span><span class="token comment">// PWM 控制标志</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedControl<span class="token punctuation">;</span> <span class="token comment">// 速度控制参数，将电机转速降为全速的 1/speedControl</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> speedLevel<span class="token punctuation">;</span><span class="token comment">// 速度档位，数字越大速度越快</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> dirFlag<span class="token punctuation">;</span><span class="token comment">// 避障转向选择</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> mode<span class="token punctuation">;</span><span class="token comment">// 模式标志</span><span class="token keyword">void</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 更改速度档位</span><span class="token keyword">void</span> <span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 遥控</span><span class="token keyword">void</span> <span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 避障</span><span class="token keyword">void</span> <span class="token function">Follow</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 维持距离</span><span class="token keyword">void</span> <span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 蓝牙遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 红外遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 避障模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 跟随&amp;控制距离模式初始化</span><span class="token keyword">void</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 切换模式</span><span class="token keyword">void</span> <span class="token function">KeyCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 按键事件回调函数</span><span class="token keyword">void</span> <span class="token function">Uart2Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 蓝牙接收数据回调函数，仅处理解锁上锁，运动控制被 TenMsCallback() 接管</span><span class="token keyword">void</span> <span class="token function">IRCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 红外接收数据回调函数，仅处理解锁上锁，运动控制被 TenMsCallback() 接管</span><span class="token keyword">void</span> <span class="token function">TenMsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 10ms 回调，实现电机转速控制</span></code></pre><p>以上函数均在 <code>main.c</code> 中实现，下面出现的没有在此处声明的函数都来自老师的 BSP。</p><h4 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Key_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 按键初始化</span><span class="token function">DisplayerInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 显示模块初始化</span><span class="token function">SetDisplayerArea</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用数码管范围</span><span class="token function">BeepInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 蜂鸣器初始化</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventKey<span class="token punctuation">,</span> KeyCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 设置按键回调函数，本机按键包括模式切换和上锁解锁</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventSys10mS<span class="token punctuation">,</span> TenMsCallback<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 每 10ms 进行运动控制</span>speedState <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 给PWM控制位赋初值</span>speedLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 默认速度档位</span>flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 启动时未上锁</span><span class="token function">MoveInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置 s1 到 s4 推挽输出</span><span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认启动红外遥控模式，即模式0</span><span class="token function">MySTC_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">MySTC_OS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">LedPrint</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> mode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 用 LED7 显示 flag 状态，亮起时表示未上锁</span> <span class="token comment">// LED0、1、2、3分别表示模式0、1、2、3</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="车身按键功能"><a href="#车身按键功能" class="headerlink" title="车身按键功能"></a>车身按键功能</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 按下车机按键的回调函数</span><span class="token keyword">void</span> <span class="token function">KeyCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 按下 key1 上锁解锁</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetKeyAct</span><span class="token punctuation">(</span>enumKey1<span class="token punctuation">)</span> <span class="token operator">==</span> enumKeyPress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 按下 key2 切换模式</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetKeyAct</span><span class="token punctuation">(</span>enumKey2<span class="token punctuation">)</span> <span class="token operator">==</span> enumKeyPress<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="运动控制中枢"><a href="#运动控制中枢" class="headerlink" title="运动控制中枢"></a>运动控制中枢</h4><p>直接控制电机的函数就是之前写的那些。</p><p>设置系统 10ms 事件回调函数来控制运动：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 简单的 PWM，将电机转速控制为全速的 1/speedControl</span><span class="token keyword">void</span> <span class="token function">TenMsCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">// 未上锁</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>speedState<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> <span class="token comment">// 根据当前模式选择运动控制函数</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token function">GetUltraSonic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">Follow</span><span class="token punctuation">(</span><span class="token function">GetUltraSonic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>speedState <span class="token operator">>=</span> speedControl<span class="token punctuation">)</span>speedState <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在程序中，0 &lt;&#x3D; speedState &lt; speedControl。系统每次执行回调函数 speedState 会自加，超出范围后再赋值为0。只有在 speedState 为0时小车才会运动。</p><p>系统每执行 speedControl 次回调函数，只会有一次允许小车运动，即调整速度为全速的 1&#x2F;speedControl。改变 speedControl 的值即可改变速度：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 调整速度，speedControl 的值是 3或4-speedLevel，所以speedLevel越大，速度越大</span><span class="token keyword">void</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>speedLevel<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>speedLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>你问我难道老师没有写速度控制？当然写了，可老师的 PWM 是控制 EXT 接口的，我用不了。步进电机那种从 S1 到 S4 依次扫描下来的方式也做不到控制两个直流电机。那就自己写咯……</p><h4 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h4><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 在四种模式之间轮换：红外->蓝牙->避障->跟随->红外...</span><span class="token keyword">void</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span><span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span><span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="红外和蓝牙遥控"><a href="#红外和蓝牙遥控" class="headerlink" title="红外和蓝牙遥控"></a>红外和蓝牙遥控</h4><p>红外遥控和蓝牙遥控都是一套逻辑，遥控器发送的命令数据和对应动作如下：</p><table><thead><tr><th><strong>命令</strong></th><th><strong>动作</strong></th></tr></thead><tbody><tr><td><strong>0xFA,0x00</strong></td><td>停车</td></tr><tr><td><strong>0xFA,0x01</strong></td><td>前进</td></tr><tr><td><strong>0xFA,0x02</strong></td><td>左转</td></tr><tr><td><strong>0xFA,0x03</strong></td><td>右转</td></tr><tr><td><strong>0xFA,0x04</strong></td><td>后退</td></tr><tr><td><strong>0xFA,0x05</strong></td><td>鸣笛</td></tr><tr><td><strong>0xFA,0x06</strong></td><td>模式转换</td></tr><tr><td><strong>0xFA,0x07</strong></td><td>上锁解锁</td></tr><tr><td><strong>0xFA,0x08</strong></td><td>切换速度档位</td></tr></tbody></table><p>红外遥控器就是另一块同样的板子，按下按键发送命令：</p><table><thead><tr><th><strong>按键</strong></th><th><strong>动作</strong></th></tr></thead><tbody><tr><td><strong>Up</strong></td><td>前进</td></tr><tr><td><strong>Left</strong></td><td>左转</td></tr><tr><td><strong>Right</strong></td><td>右转</td></tr><tr><td><strong>Down</strong></td><td>后退</td></tr><tr><td><strong>Center</strong></td><td>停车</td></tr><tr><td><strong>Key3</strong></td><td>不发给小车，用于切换Key1和Key2的模式</td></tr><tr><td><strong>Key1</strong> <strong>模式0</strong></td><td>鸣笛</td></tr><tr><td><strong>Key1</strong> <strong>模式1</strong></td><td>上锁解锁</td></tr><tr><td><strong>Key2</strong> <strong>模式0</strong></td><td>速度控制</td></tr><tr><td><strong>Key2</strong> <strong>模式1</strong></td><td>模式转换</td></tr></tbody></table><p>红外遥控器的程序就是简单的按键事件和导航按键事件回调函数，就不贴出来了。</p><p>至于蓝牙遥控器……<del>比卷，</del>我又写了个<a href="https://github.com/charliedu2000/BLESerial">安卓蓝牙遥控器</a>，界面上的按键名就是对应功能。</p><p>小车的红外模式、蓝牙模式初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 红外遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeIRRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 默认模式下显示速度等级和默认指令</span><span class="token function">IrInit</span><span class="token punctuation">(</span>NEC_R05d<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 设置红外协议基本时间片时长，接收到的数据在回调函数和 Remote() 中再进行内容校验</span><span class="token function">SetIrRxd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rxd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventIrRxd<span class="token punctuation">,</span> IRCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 蓝牙遥控模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeBTRemote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Uart2Init</span><span class="token punctuation">(</span><span class="token number">9600</span><span class="token punctuation">,</span> Uart2UsedforEXT<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将串口2的波特率设为9600，用于 EXT</span><span class="token function">SetUart2Rxd</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>rxd<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>rxdHead<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 将接收到的数据存到 rxd，不在此处设置校验</span>   <span class="token comment">// 放到 Remote() 中和红外接收的数据一样用 if 语句校验</span><span class="token function">SetEventCallBack</span><span class="token punctuation">(</span>enumEventUart2Rxd<span class="token punctuation">,</span> Uart2Callback<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>接收到数据的回调函数：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 红外接收到数据的回调函数</span><span class="token keyword">void</span> <span class="token function">IRCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">GetIrRxNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span> <span class="token comment">// 简单校验，剩下的与运动状态有关的指令在 Remote() 中校验</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管显示接收到的指令（0到8）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//IrPrint("CodeZone\n", sizeof("CodeZone\n"));</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> <span class="token comment">// 接收到7的时候进行上锁解锁操作</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 蓝牙接收到数据的回调函数</span><span class="token keyword">void</span> <span class="token function">Uart2Callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span> <span class="token comment">// 由于蓝牙初始化时不再设置校验，所以在这里简单校验</span>   <span class="token comment">// 运动状态指令和红外模式一样在 Remote() 中校验</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 数码管显示接收到的指令（0到8）</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SwitchModes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Uart2Print("CodeZone\n", sizeof("CodeZone\n"));</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> flag <span class="token operator">=</span> <span class="token operator">!</span>flag<span class="token punctuation">;</span> <span class="token comment">// 接收到7的时候进行上锁解锁操作</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ChangeSpeed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>遥控模式下的控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 遥控： * 现在 Remote() 由 TenMsCallback() 直接调用 * 这里不再包含上锁解锁等按下后只执行一次的操作 * 上述操作仅在接收数据事件的回调函数里判断并执行 */</span><span class="token keyword">void</span> <span class="token function">Remote</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">// 校验数据头</span><span class="token keyword">if</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> rxdHead<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>rxd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">440</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="避障"><a href="#避障" class="headerlink" title="避障"></a>避障</h4><p>避障模式的初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 避障模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeAuto</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">EXTInit</span><span class="token punctuation">(</span>enumEXTUltraSonic<span class="token punctuation">)</span><span class="token punctuation">;</span>dirFlag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>避障模式下的控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 显示距离数值，根据距离选择方向 * i 为距离值，单位是厘米 */</span><span class="token keyword">void</span> <span class="token function">AutoMove</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示速度等级、与障碍物间的距离</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dirFlag <span class="token operator">=</span> <span class="token operator">!</span>dirFlag<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 距离值过小时蜂鸣器报警</span><span class="token keyword">if</span> <span class="token punctuation">(</span>dirFlag<span class="token punctuation">)</span><span class="token function">TurnLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">TurnRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 当前可以看作随机转向，复杂情况下可能导致小车找不到可行路径</span><span class="token punctuation">&#125;</span></code></pre><p>运动逻辑：</p><p><img src="https://i.loli.net/2021/09/27/pFOxqZhGQ3ArHud.png" alt="避障模式运动逻辑" loading="lazy"></p><p><em>显然控制函数每 10ms 就可能被调用，这个流程图里就没有循环结构了。</em></p><p>不得不说这个运动逻辑很有问题。在这个逻辑下，小车遇到障碍时的转向算是随机的，但是在复杂情况下就可能使小车一会儿左转一会儿右转，最后转不出去。让小车始终转向一个方向会好些。</p><p>由于硬件限制，我装不上舵机，也装不上多个超声波模块，就只能做到让它避开正前方的障碍了。（连这一个超声波模块都要跟蓝牙模块抢 EXT 接口，换模式还得插拔……）</p><h4 id="跟随"><a href="#跟随" class="headerlink" title="跟随"></a>跟随</h4><p>说是跟随，其实就是和障碍物保持一定距离罢了。</p><p>模式初始化：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// 跟随模式初始化</span><span class="token keyword">void</span> <span class="token function">ModeFollow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">EXTInit</span><span class="token punctuation">(</span>enumEXTUltraSonic<span class="token punctuation">)</span><span class="token punctuation">;</span>mode <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>该模式下的运动控制：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/** * 显示距离数值，保持一定距离 * i 为距离值，单位是厘米 */</span><span class="token keyword">void</span> <span class="token function">Follow</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">Seg7Print</span><span class="token punctuation">(</span>speedLevel<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>i <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">,</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 显示速度等级、与障碍物间的距离</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">Forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>speedControl <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">-</span> speedLevel<span class="token punctuation">;</span><span class="token function">SetBeep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 距离值过小时蜂鸣器报警</span><span class="token function">Backward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token function">VStop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这个运动逻辑就简单了：</p><p><img src="https://i.loli.net/2021/09/27/u2kjTUFf97LInDW.png" alt="跟随模式运动逻辑" loading="lazy"></p><p>当然，“跟随”的目标也只限正前方。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>所以我得到了什么呢？一个有四种模式的三蹦子。甚好。最初的目标实现了，这下不会空虚寂寞了（笑）。这个设计也拿了院里竞赛的一等奖，爽到。</p><p>当然，这个三蹦子还有很多可以改进的地方，包括一些运动逻辑和硬件的改装等等……嗯，未来可期！</p><details><summary>一点负能量的东西……</summary>关于这门课的得分……自己把设计思路输出出去，还提供了一些技术指导，结果那个同学几乎完全复刻，缝合了他自己原本的设计，比我得分还高……多多少少会感觉心里不舒服……算了算了……</details>]]></content>
    
    
    <summary type="html">&lt;p&gt;你是否经常感到空虚寂寞、百无聊赖？你是否缺少陪伴、倍感不安、想要在这喧嚣的城市里寻找一份慰藉？&lt;/p&gt;
&lt;p&gt;毫无疑问，拥有属于自己的车、房可以在物质层面缓解这些焦虑（确信）。买房太难了，所以就先从车开始吧。&lt;/p&gt;
&lt;h2 id=&quot;三轮车也是车&quot;&gt;&lt;a href=&quot;#三轮车也是车&quot; class=&quot;headerlink&quot; title=&quot;三轮车也是车&quot;&gt;&lt;/a&gt;三轮车也是车&lt;/h2&gt;&lt;p&gt;打住，我要说的并不是这种车：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/ln7xH36LUbiZc9O.png&quot; alt=&quot;车1网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/GHQzW9Xd73DqvNF.png&quot; alt=&quot;车2网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;或者这种车：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/E3CDyXLPTh5qFfS.png&quot; alt=&quot;蝙蝠车网图&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;废话，你以为我买得起？&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;而是这种：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/09/26/En4idsW7mopQIlw.png&quot; alt=&quot;三蹦子&quot;&gt;&lt;/p&gt;
&lt;p&gt;什么？这不行？气抖冷，难道三轮车就不是车？玩具车就不能给慰藉了？&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="单片机" scheme="https://afool.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="小车" scheme="https://afool.top/tags/%E5%B0%8F%E8%BD%A6/"/>
    
  </entry>
  
  <entry>
    <title>Java 中的多线程编程？</title>
    <link href="https://afool.top/learning/java-thread/"/>
    <id>https://afool.top/learning/java-thread/</id>
    <published>2021-09-19T06:25:17.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，什么是线程"><a href="#首先，什么是线程" class="headerlink" title="首先，什么是线程"></a>首先，什么是线程</h2><p>在讨论“线程”这个概念之前，我们有必要知道它到底是什么。这个词经常和”进程”一起出现，那么这两者有什么区别呢？</p><p>进程是对 CPU 活动的称呼，简单说来就是执行的程序。当然它肯定不止“程序”这么简单，一个完整的进程应该包括代码段（文本）、数据段、栈、堆等部分。</p><p>至于线程，《操作系统概念》是这样定义它的：</p><blockquote><p>线程是 CPU 使用的一个基本单元；它包括线程 ID、程序计数器、寄存器组和堆栈。</p></blockquote><p>基于这些，我给出个人的理解：如果说进程是操作系统层面的程序基本单位，那么线程更像是 CPU 执行任务的基本单位。<del>众所周知，</del>一个进程可以包含多个线程，拥有多个控制线程的进程可以同时执行多个任务。</p><p>打个比方，多线程的程序就像眼睛盯着屏幕手里还搓着手柄的你，单线程的程序就像要看一眼屏幕再看一眼手柄上的按键才能操作的你。<del>是不是很形象？</del></p><p><img src="https://i.loli.net/2021/09/19/URq8ot6VmZCfJrX.gif" alt="说的就是你" loading="lazy"></p><p><del>嘶~或许还有点并行和并发的意思？</del></p><h2 id="在-Java-中使用线程"><a href="#在-Java-中使用线程" class="headerlink" title="在 Java 中使用线程"></a>在 Java 中使用线程</h2><p>为什么需要多线程编程？这就很好理解了。如果一个程序要同时处理多个任务，不管这些任务是相似的还是完全不同的，有多个线程时效率一般都会比较高（嗯）。</p><p>在 Java 中使用多线程很简单，可以直接使用继承线程（Thread）类，也可以实现 Runnable 接口。就稍微讲一下使用线程类的方法好了。</p><p><code>Thread</code> 类的对象和其他对象一样具有属性和方法。</p><h3 id="启动线程"><a href="#启动线程" class="headerlink" title="启动线程"></a>启动线程</h3><p><code>Thread</code> 类中有一个 <code>run()</code> 方法，其子类需要实现这个方法。实例化线程，创建对象之后，调用 <code>start()</code> 方法才算是启动了线程。</p><p><em>直接调用 <code>run()</code> 方法和调用普通方法没有区别，不会启动新的线程。</em></p><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>线程可以有如下几个状态：</p><ul><li>新建：实例化线程对象后，还未执行 <code>start()</code> 时；</li><li>就绪：调用  <code>start()</code> 后，处于就绪状态的线程等待调度；</li><li>运行：当线程获得 CPU 资源后就可以执行 <code>run()</code> 方法，此时线程就处于运行状态，处于运行状态的线程可能变为阻塞、就绪或死亡状态；</li><li>阻塞：线程失去所占用资源后进入阻塞状态，具体原因包括睡眠、等待以及同步锁被占用等等，重新获得资源后线程可以重新进入就绪状态；</li><li>死亡：线程执行完 <code>run()</code> 方法或者因其他原因终止时进入死亡状态，即结束。</li></ul><p>状态之间的转换构成了线程的生命周期。</p><h2 id="其他要讲的"><a href="#其他要讲的" class="headerlink" title="其他要讲的"></a>其他要讲的</h2><ul><li>在 Java 中，线程有优先级，取值范围从1到10，数值越大优先级越高，默认优先级是5；</li><li>多线程编程：线程间的同步、通信等内容……<del>先不写了，才不是因为懒。</del></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;首先，什么是线程&quot;&gt;&lt;a href=&quot;#首先，什么是线程&quot; class=&quot;headerlink&quot; title=&quot;首先，什么是线程&quot;&gt;&lt;/a&gt;首先，什么是线程&lt;/h2&gt;&lt;p&gt;在讨论“线程”这个概念之前，我们有必要知道它到底是什么。这个词经常和”进程”一起出现，那么这</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
    <category term="多线程" scheme="https://afool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>如何实现一个 Array List</title>
    <link href="https://afool.top/learning/java-implement-array-list/"/>
    <id>https://afool.top/learning/java-implement-array-list/</id>
    <published>2021-08-16T06:37:32.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<p><code>ArrayList</code> 是一种常用的数据结构，经常被拿来和 <code>LinkedList</code> 等进行对比。跟单纯的数组比起来，<code>ArrayList</code> 拥有许多使用方便的方法<del>，可谓居家旅行摸鱼 coding 必备之利器</del>。</p><p><del>虽然还没有多少实战经验，</del>我们还是来尝试实现一个具有增删改查等基本功能的 <code>ArrayList</code> 吧。</p><p><img src="https://i.loli.net/2021/08/17/1f8iAd2xUr9BcNR.jpg" alt="菜狗" loading="lazy"></p><span id="more"></span><h2 id="MyList-接口"><a href="#MyList-接口" class="headerlink" title="MyList 接口"></a>MyList 接口</h2><p>不管是哪种类型的 <code>List</code> 一些基本的方法声明都是一样的，所以我们先定义一个 <code>MyList</code> 接口，提供一些方法的抽象。（万一之后还能再用呢？）</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081401</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token comment">/** *  * @return 返回列表当前的大小 */</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 在列表末尾添加一个元素 * @param value 要添加的元素 */</span><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将此列表与另一个列表合并 * @param list 要合并的列表 */</span><span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 把一个数组合并进列表 * @param list 要合并的数组 */</span><span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将一个元素插入列表的指定下标处 * @param index 要插入位置对应的下标 * @param value 被插入的元素 */</span><span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将指定下标处的元素删除 * @param index 要删除元素的下标 */</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将指定元素删除 * @param value 要删除的元素 */</span><span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 清除所有元素 */</span><span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取指定下标处的元素 * @param index 目标元素的下标 * @return 获取到的元素对象 */</span><span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 获取指定元素的下标数组 * @param value 目标元素 * @return 获取到的元素下标数组 */</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 修改指定下标处的元素 * @param index 目标元素的下标 * @param value 修改后的元素 */</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 修改指定元素 * @param target 目标元素 * @param value 修改后的元素 */</span><span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> target<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 将列表中的元素按 hashcode 排序 */</span><span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="MyArrayList"><a href="#MyArrayList" class="headerlink" title="MyArrayList"></a>MyArrayList</h2><p>有了接口，我们现在可以来实现一个 <code>ArrayList</code>。</p><p>顾名思义，<code>ArrayList</code> 就是应该用数组来存储数据。嗯，没错！</p><p>那我们给一个数组，顺便用几个数分别表示数组中元素个数和允许的最大最小长度。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">int</span> size<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MIN_LENGTH</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">MAX_LENGTH</span> <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> values<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>我们重新写一个构造方法，在创建 <code>MyArrayList</code> 的时候就做必要的初始化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">MyArrayList</span><span class="token punctuation">(</span><span class="token keyword">int</span> arrLength<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>arrLength <span class="token operator">&lt;</span> <span class="token constant">MIN_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>arrLength <span class="token operator">=</span> <span class="token constant">MIN_LENGTH</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>arrLength<span class="token punctuation">]</span><span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在这里如果初始化时指定的数组长度太小或者是负数，我就直接把长度改成了允许的最小长度。其他情况下这个长度值不小于 <code>10</code> 且在 <code>int</code> 的范围内，可以直接用。<del>一般情况下应该不会用到那么长的<strong>数组</strong>吧……</del></p><p>既然要实现接口，就要把接口中的抽象方法都实现。最简单的一个，返回数组中的元素个数：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><p>添加单个元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> length <span class="token operator">=</span> values<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>size <span class="token operator">>=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> newLength <span class="token operator">=</span> <span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> length<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newLength <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newLength <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token constant">MAX_VALUE</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newLength<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>size<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>显然，如果数组已经被放满了就必须扩容。新建一个长度为原数组长度1.5倍的数组，把原来的数组元素都放进去，更新长度再替换原来的数组。<code>if(newLength &lt; 0)</code> 这里是对新长度溢出的一个简单处理。</p><p>把两个队列合并：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">MyList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> aSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token keyword">int</span> bSize <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> newSize <span class="token operator">=</span> aSize <span class="token operator">+</span> bSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newSize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newSize <span class="token operator">=</span> <span class="token constant">MAX_LENGTH</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> aSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i <span class="token operator">-</span> aSize<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>如果 <code>newSize &lt; 0</code> 就表示两个队列元素个数之和溢出，这里做了一个<del>不负责任的</del>处理：新的数组长度改成 <code>int</code> 的最大值，只把这个数组装满。这样会有一部分元素装不下。也可以输出提示信息并且做其他处理。</p><p>把队列和一个数组合并，和上一个方法类似：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> aSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token keyword">int</span> bSize <span class="token operator">=</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> newSize <span class="token operator">=</span> aSize <span class="token operator">+</span> bSize<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>newSize <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newSize <span class="token operator">=</span> <span class="token constant">MAX_LENGTH</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>newSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> aSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> aSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> newSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>newValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i <span class="token operator">-</span> aSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">=</span> newSize<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在指定位置插入元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"插入位置对应的的下标不在允许范围内。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">></span> index<span class="token punctuation">;</span> i <span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果指定的位置有误就输出一条提示，不进行其他操作。</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>删除指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除位置对应的的下标不在允许范围内。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>values<span class="token punctuation">[</span>size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>size <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>如果指定的位置有误就输出一条提示，不进行其他操作。</p><p>删除指定元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>删除所有元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> newValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>values <span class="token operator">=</span> newValues<span class="token punctuation">;</span>size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">E</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">E</span><span class="token punctuation">)</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>查询指定元素的下标：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> index<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>index<span class="token punctuation">[</span>index<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>修改指定位置的元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定的下标太小。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">>=</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"指定的下标太大。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>指定的下标有误时根据大小输出一条提示，不做其他处理。</p><p>修改指定元素：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">E</span> target<span class="token punctuation">,</span> <span class="token class-name">E</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>values<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>根据对象元素的 <code>hashCode</code> 来排序：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> theSize <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span><span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hashCodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>theSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>hashCodes<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token class-name">Object</span> tempObject<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> theSize<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> theSize <span class="token operator">-</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>temp <span class="token operator">=</span> hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>hashCodes<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>hashCodes<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>tempObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>values<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tempObject<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>用了简单的冒泡排序，当然其他排序方法也可以。没有借助 <code>Map</code> 一类的结构，因为它们似乎都不支持重复的 <code>key</code>。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>不重写 <code>toString()</code> 的话直接输出队列只能看到一行对人来说十分抽象的东西，所以还是重写一下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span> res <span class="token operator">=</span> <span class="token string">"["</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> values<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token string">", "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>res <span class="token operator">+=</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>res <span class="token operator">+=</span> <span class="token string">"]"</span><span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>简单验证一下各个方法的功能：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"i = "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10个对象："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"10!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n添加1个对象："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n与自己合并："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"123"</span><span class="token punctuation">,</span> <span class="token string">"214"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n与 &#123;“123”， “214”&#125; 合并："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n删除第2个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"10!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n删除 “10!!” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"One"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n在第2个位置插入 “One” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把第1个改成 “zero” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"zero"</span><span class="token punctuation">,</span> <span class="token string">"Zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把 “zero” 改成 “Zero” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"i = 2"</span><span class="token punctuation">,</span> <span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n把 “i= 2” 改成 “Two” "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n输出第14个对象"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n输出 “Two” 的下标数组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"Two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n按 hash 值排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n清空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">10个对象：10[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9]添加1个对象：11[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!]与自己合并：22[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!]与 &#123;“123”， “214”&#125; 合并：24[i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, 123, 214]删除第2个对象23[i = 0, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 10!!, 123, 214]删除 “10!!” 21[i = 0, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]在第2个位置插入 “One” 22[i = 0, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把第1个改成 “zero” 22[zero, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把 “zero” 改成 “Zero” 22[Zero, One, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, i = 2, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]把 “i= 2” 改成 “Two” 22[Zero, One, Two, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, i = 0, i = 1, Two, i = 3, i = 4, i = 5, i = 6, i = 7, i = 8, i = 9, 123, 214]输出第14个对象i = 3输出 “Two” 的下标数组[2, 12]按 hash 值排序22[123, 214, One, Two, Two, Zero, i = 0, i = 1, i = 3, i = 3, i = 4, i = 4, i = 5, i = 5, i = 6, i = 6, i = 7, i = 7, i = 8, i = 8, i = 9, i = 9]清空0[]</code></pre><p><code>MyArrayList</code> 的功能基本正常，那就算成功了罢。一些地方可能还不够合理，不过能实现总是好的。</p><p><img src="https://i.loli.net/2021/08/17/h5LYZmp2adNPVv6.jpg" alt="一条咸鱼" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;ArrayList&lt;/code&gt; 是一种常用的数据结构，经常被拿来和 &lt;code&gt;LinkedList&lt;/code&gt; 等进行对比。跟单纯的数组比起来，&lt;code&gt;ArrayList&lt;/code&gt; 拥有许多使用方便的方法&lt;del&gt;，可谓居家旅行摸鱼 coding 必备之利器&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;虽然还没有多少实战经验，&lt;/del&gt;我们还是来尝试实现一个具有增删改查等基本功能的 &lt;code&gt;ArrayList&lt;/code&gt; 吧。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/08/17/1f8iAd2xUr9BcNR.jpg&quot; alt=&quot;菜狗&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>对 Object 类的不完全解析</title>
    <link href="https://afool.top/learning/java-object-class/"/>
    <id>https://afool.top/learning/java-object-class/</id>
    <published>2021-08-13T06:42:55.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Object-类是什么"><a href="#Object-类是什么" class="headerlink" title="Object 类是什么"></a>Object 类是什么</h2><p><del>众所周知，</del><code>Object</code> 是 Java 中所有类的父类。当我们定义类的时候如果没有指定这个类继承的父类，默认父类就是 <code>Object</code> 。所以</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> aClass <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>等价于</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> aClass <span class="token keyword">extends</span> <span class="token class-name">Object</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h2 id="一些有用没用的东西"><a href="#一些有用没用的东西" class="headerlink" title="一些有用没用的东西"></a>一些有用没用的东西</h2><ul><li><code>Object</code> 是所有类的父类，那么我们可以把任何类型的对象赋给 <code>Object</code> 型的变量。</li></ul><h3 id="Object-的几个常用方法"><a href="#Object-的几个常用方法" class="headerlink" title="Object 的几个常用方法"></a>Object 的几个常用方法</h3><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><p><code>Object</code> 中 <code>toString</code> 方法如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>显然，这个方法的返回值是一个字符串，字符串的内容很简单，是“一个对象的运行时类名@对象的十六进制散列码值”。这个字符串表示了对象的一些信息。</p><p>使用示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TempObject</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Demo</span> demo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>demo<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">ex081001.Demo@27973e9bex081001.Demo@27973e9b</code></pre><p>可以看到在这种情况下直接输出 <code>demo</code> 和使用 <code>toString()</code> 方法再输出的结果是一样的，只要输出对象就会调用 <code>Object</code> 中的  <code>toString()</code> 方法。</p><p>当然，可以重写这个方法来取得对象的更多信息。例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span></code></pre><h4 id="hashCode-和-equals"><a href="#hashCode-和-equals" class="headerlink" title="hashCode() 和 equals()"></a>hashCode() 和 equals()</h4><p><code>hashCode()</code> 会给每个对象计算一个 hash 值，这个值在进行比较、查找的时候很有用。</p><p>需要注意：</p><ul><li>两个相同的对象的 hash 值一定相同。</li><li>两个不同的对象 hash 值也可能相同，可以使用双重散列等方法来减少这种情况带来的错误。</li></ul><p>至于 <code>equals()</code>，<del>从字面上看就能看出来</del>它是用来比较两个对象是否相同的，如果一个类没有重写这个方法，在调用它的时候就会自动调用 <code>Object</code> 中实现的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <code>Object</code> 中实现的 <code>equals()</code> 是直接把两个对象进行比较，看它们的内容是否相同。这样做非常简单并且容易理解，却会带来一个问题。</p><p>举个例子来说明这个问题：200等于200.0吗？</p><p><del>这么简单的问题？肯定有鬼，我选择不等于。</del></p><p>当然是等于（笑），但是看看下面这段代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Numbers</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token keyword">double</span> b <span class="token operator">=</span> <span class="token number">200.0</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token class-name">Double</span> d <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a == b: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i == d: "</span> <span class="token operator">+</span> i<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>让 <code>int</code> 型的 <code>200</code> 和 <code>double</code> 型的 <code>200.0</code> 作比较，结果当然是相等，那么把同样的值放到分别 <code>Integer</code> 和 <code>Double</code> 这两个包装类中也应该是一样的结果吧……</p><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">a == b: truei == d: false</code></pre><p>被打脸了，说好的200等于200.0，怎么放到包装类中变成对象就不一样了呢？问题的关键就在于这里其实是调用了 <code>Object</code> 中的 <code>equals()</code> ，直接把<code>double</code> 的 <code>b</code> 和 <code>Integer</code> 的 <code>i</code>进行比较，两个对象甚至都不是同一类，结果自然会是 <code>false</code>。</p><p>还有一种情况，像下面这样，我们假定名字和年龄相同的两个人就是同一个人：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">p<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p2<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">false</span></code></pre><p>这就更奇怪了，两个同类的对象，属性也是一样的，<code>equals</code> 给出的结果还是 <code>false</code>。这是因为 <code>Object</code> 中的 <code>equals()</code> 用 <code>==</code> 来比较两个对象，其实是<strong>比较两个对象的内存地址</strong>。上面的 <code>p1</code> 和 <code>p2</code> 两个对象的地址当然是不同的，所以我们得到了这样的结果。</p><p>要解决我们遇到的这些问题，就要重写 <code>equals()</code>。</p><h5 id="数之间的比较"><a href="#数之间的比较" class="headerlink" title="数之间的比较"></a>数之间的比较</h5><p>对数进行比较的话我们可以先看看 <code>Java</code> 中的基本数据类型，这里不再细说。<code>Java</code> 中数形式的数据对应的包装类包括：</p><ul><li>Byte</li><li>Short</li><li>Integer</li><li>Long</li><li>Float</li><li>Double</li></ul><p>这些类都继承了 <code>Number</code>，所以在比较时可以让它们都转型成 <code>Number</code> 再比较。同时，为了不丢失精度，避免出现123等于123.1的情况，都用它们的 <code>doubleValue()</code> 来比较。像这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Numbers</span> <span class="token punctuation">&#123;</span><span class="token comment">//public static boolean equals(Object obj,Object anObj) &#123;</span><span class="token comment">//    if(obj == null || anObj == null) return false;</span><span class="token comment">//if(obj == anObj) return true;</span><span class="token comment">//if(obj instanceof Number &amp;&amp; anObj instanceof Number) &#123;</span><span class="token comment">//return ((Number)obj).doubleValue() == ((Number)anObj).doubleValue();</span><span class="token comment">//&#125;</span><span class="token comment">//return false;</span><span class="token comment">//    &#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Number</span> num<span class="token punctuation">,</span> <span class="token class-name">Number</span> anNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> anNum <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> anNum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> anNum<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Byte</span> b <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Short</span> s <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token class-name">Long</span> l <span class="token operator">=</span> <span class="token number">123L</span><span class="token punctuation">;</span><span class="token class-name">Float</span> f <span class="token operator">=</span> <span class="token number">123.1f</span><span class="token punctuation">;</span><span class="token class-name">Double</span> d <span class="token operator">=</span> <span class="token number">123.0</span><span class="token punctuation">;</span><span class="token comment">//Byte one = 1;</span><span class="token comment">//Character charOne = '1';</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Short "</span> <span class="token operator">+</span> s <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Integer "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Long "</span> <span class="token operator">+</span> l <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Float "</span> <span class="token operator">+</span> f <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" and Double "</span> <span class="token operator">+</span> d <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> <span class="token function">equals</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//System.out.println();</span><span class="token comment">//System.out.println("Byte " + one + " and Character " + charOne + ": " + equals(one, charOne));</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">Byte 123 and Short 123: trueByte 123 and Integer 123: trueByte 123 and Long 123: trueByte 123 and Float 123.1: falseByte 123 and Double 123.0: true</code></pre><p>现在123和123.0相等了。</p><h5 id="某一个类的对象之间的比较"><a href="#某一个类的对象之间的比较" class="headerlink" title="某一个类的对象之间的比较"></a>某一个类的对象之间的比较</h5><p>就用上面的 <code>Person</code> 类来举例说明。要想让 <code>equals()</code> 把两个属性相同的 <code>Person</code> 对象判断成相同的，可以重写成这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 在 table 中的 value: "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">p1:Name: PeterAge: 33p2:Name: PeterAge: 33p1.equals(p2): truep2 在 table 中的 value: null</code></pre><p>虽然在直接比较的时候 <code>equals()</code> 返回了 <code>true</code>，但是我们把 <code>p1</code> 放到 <code>HashMap</code> 中，用和它相等的 <code>p2</code> 去查询 <code>value</code> 却找不到结果。<code>p1</code> 和 <code>p2</code> 明明是一样的，为什么会出现这种结果？按照我们的规定，<code>p1</code> 和 <code>p2</code>  既然是同一个人，最后应该能输出 <code>0</code> 才对。</p><p>问题的关键在于重写 <code>equals()</code> 的时候没有把 <code>hashCode()</code> 也进行重写。我们用 <code>equals()</code> 判断 <code>p1</code> 和 <code>p2</code> 确实是得到了想要的结果，但是 <code>HashMap</code> 是根据对象的 hash 值来判断有没有包含这个对象的，而在默认情况下，<code>hashCode()</code> 是将对象的存储地址进行映射，<code>p1</code> 和 <code>p2</code> 的地址不同，它们的 hash 值就不一样。正因如此，我们现在不能用 <code>p2</code> 获取 <code>p1</code> 在 <code>HashMap</code> 对应的 <code>value</code>。</p><p>如果想得到这个 <code>value</code> 值，只需要重写 <code>hashCode()</code>：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">ex081001</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Integer</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"Name: "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">"\nAge: "</span> <span class="token operator">+</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span>obj<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">41</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Peter"</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1:\n"</span> <span class="token operator">+</span> p1 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2:\n"</span> <span class="token operator">+</span> p2 <span class="token operator">+</span> <span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p1.equals(p2): "</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> table <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>table<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"p2 在 table 中的 value: "</span> <span class="token operator">+</span> table<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-java" data-language="java"><code class="language-java">p1<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p2<span class="token operator">:</span><span class="token class-name">Name</span><span class="token operator">:</span> <span class="token class-name">Peter</span><span class="token class-name">Age</span><span class="token operator">:</span> <span class="token number">33</span>p1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token boolean">true</span>p2 在 table 中的 value<span class="token operator">:</span> <span class="token number">0</span></code></pre><p>现在用 <code>p2</code> 也能获取 <code>p1</code> 的 <code>value</code>，这意味着就算用 hash 值校验，<code>p1</code> 和 <code>p2</code> 也是相同的。换句话说，重写 <code>equals()</code> 时也要重写 <code>hashCode()</code>，这样才能保持逻辑上的一致。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Object-类是什么&quot;&gt;&lt;a href=&quot;#Object-类是什么&quot; class=&quot;headerlink&quot; title=&quot;Object 类是什么&quot;&gt;&lt;/a&gt;Object 类是什么&lt;/h2&gt;&lt;p&gt;&lt;del&gt;众所周知，&lt;/del&gt;&lt;code&gt;Object&lt;/code</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>java-interface</title>
    <link href="https://afool.top/learning/java-interface/"/>
    <id>https://afool.top/learning/java-interface/</id>
    <published>2021-08-06T05:44:25.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接口是什么"><a href="#接口是什么" class="headerlink" title="接口是什么"></a>接口是什么</h2><p><strong>Java接口</strong>是一系列方法的声明，是一些方法特征的集合，一个<strong>接口</strong>只有方法的特征没有方法的实现，这些方法可以在不同的地方被不同的类实现，而这些实现可以具有不同的行为。</p><p>从定义可以看出接口中的方法应该都是抽象方法，事实上接口中的方法会被隐式地指定为<code>public abstract</code>。</p><p>接口中可以有属性变量，但这些变量会被隐性地指定为<code>public static final</code>变量。</p><h3 id="接口与类"><a href="#接口与类" class="headerlink" title="接口与类"></a>接口与类</h3><p>从上面可以看出，接口与类最明显的区别在于接口的方法没有方法体，因此接口不能被实例化。除此之外，类之间不支持多继承，而接口之间可以多继承。</p><p>除了普通的类，还有一种类是抽象类。抽象类介于类和接口之间，其内部的方法可以有具体实现，成员变量类型不限。一个类只能继承一个抽象类，但可以实现多个接口。</p><blockquote><p>在 JDK 1.8 之后，接口中可以有静态方法和方法体，可以有实现了的默认方法（用default修饰）。</p></blockquote><h3 id="使用接口的基本格式"><a href="#使用接口的基本格式" class="headerlink" title="使用接口的基本格式"></a>使用接口的基本格式</h3><p>声明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Name1</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> <span class="token class-name">Name2</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ClassName</span> <span class="token keyword">implements</span> <span class="token class-name">Name1</span><span class="token punctuation">,</span> <span class="token class-name">Name2</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">// 需要实现接口的所有抽象方法</span><span class="token punctuation">&#125;</span></code></pre><h2 id="为什么要使用接口"><a href="#为什么要使用接口" class="headerlink" title="为什么要使用接口"></a>为什么要使用接口</h2><p>关于这个问题，动动小手在网上搜一下就可以得到从各种角度阐述的答案。总的来说，接口的意义在于它的<strong>抽象性</strong>。借助接口可以实现调用与实现解耦，增强系统灵活性，也使得各个层次能够同时开发。</p><p>举个例子，我们用代码来描述乐器。乐器当然是可以用来演奏的，但是具体到各种乐器，它们的演奏方法又不一样，如果在一个乐器的类中写下所有的演奏方法未免显得太过臃肿，对每个实例判断乐器类型选择方法也会很麻烦。在这种情况下，就可以将乐器写成接口，只提供演奏的抽象方法，方法的实现就交给具体的类。就像这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Wind</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Wind:Play"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Stringed</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Stringed:Play"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><h2 id="使用接口的实例"><a href="#使用接口的实例" class="headerlink" title="使用接口的实例"></a>使用接口的实例</h2><p>用代码来表示乐队的一些行为。</p><p>首先定义乐器和歌手的接口，有一些简单的方法：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Instruments.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span><span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">": ready."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Singers.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Singers</span> <span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Say \"Hello!\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这里<code>Instruments</code>中有一个默认方法，<code>Singers</code>中有一个静态方法。</p><p>乐器的实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Guitar.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Guitar</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing guitar~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Bass.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bass</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing bass~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Drums.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Drums</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing drums~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Keyboard.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Keyboard</span> <span class="token keyword">implements</span> <span class="token class-name">Instruments</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Playing keyboard~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>可以发现接口中的默认方法就不用另写实现了。</p><p>歌手的实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Solo.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solo</span> <span class="token keyword">implements</span> <span class="token class-name">Singers</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Solo singer: start."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>有了上面这些定义和实现，我们就可以简单地描述一支乐队的行为：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Band.java</span><span class="token keyword">package</span> <span class="token namespace">band</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Band</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> insts<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> sings<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Band</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i<span class="token punctuation">,</span> <span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>insts <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>sings <span class="token operator">=</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 直接通过接口名调用静态方法</span><span class="token class-name">Singers</span><span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 调用接口中已经实现的默认方法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span> i <span class="token operator">:</span> insts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span><span class="token function">ready</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Instruments</span> i <span class="token operator">:</span> insts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>i<span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Singers</span> s <span class="token operator">:</span> sings<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s<span class="token punctuation">.</span><span class="token function">sing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Instruments</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Guitar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Bass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Drums</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Keyboard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Singers</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token keyword">new</span> <span class="token class-name">Solo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Band</span> newBand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Band</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>newBand<span class="token punctuation">.</span><span class="token function">getReady</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>newBand<span class="token punctuation">.</span><span class="token function">startPlay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>乐队的成员包括一些乐器<del>乐手们对不起</del>和歌手，这里定义乐队的行为：准备和开始演奏。程序的运行结果如下：</p><pre class="language-text" data-language="text"><code class="language-text">Say "Hello!".band.Guitar: ready.band.Bass: ready.band.Drums: ready.band.Keyboard: ready.Playing guitar~Playing bass~Playing drums~Playing keyboard~Solo singer: start.</code></pre><p>嗯嗯，就是这样。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;接口是什么&quot;&gt;&lt;a href=&quot;#接口是什么&quot; class=&quot;headerlink&quot; title=&quot;接口是什么&quot;&gt;&lt;/a&gt;接口是什么&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Java接口&lt;/strong&gt;是一系列方法的声明，是一些方法特征的集合，一个&lt;strong&gt;接口&lt;/</summary>
      
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>有关Java中类继承的二三事</title>
    <link href="https://afool.top/learning/java-inheritance/"/>
    <id>https://afool.top/learning/java-inheritance/</id>
    <published>2021-08-04T09:00:21.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>不问不知道，一问才发现之前学得实在太水，好多东西都没怎么搞明白。</p></blockquote><h2 id="继承是什么"><a href="#继承是什么" class="headerlink" title="继承是什么"></a>继承是什么</h2><p>继承是面向对象的三个基本特征之一，它使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。</p><span id="more"></span><p>Java 不支持多继承。</p><h3 id="类继承的格式"><a href="#类继承的格式" class="headerlink" title="类继承的格式"></a>类继承的格式</h3><p>在 Java 中类继承的一般格式如下：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> 父类 <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类 <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><p>实现接口时使用<code>implements</code>关键字，可以变相实现多继承：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span></code></pre><h2 id="为什么要继承"><a href="#为什么要继承" class="headerlink" title="为什么要继承"></a>为什么要继承</h2><p>这里我们用一个例子来说明。</p><p>假设要开发学生类，学生分别有大学生、中学生和小学生，属性都包括姓名、ID 和年龄，都有一个考试方法。如果不利用继承，就可能需要写这样的代码：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 大学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 中学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MidStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 小学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriStudent</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">PriStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>很容易看出来上面的代码存在很多重复的地方，而且要修改的时候也会很麻烦。要解决这些问题就要用到继承：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 学生父类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 大学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 中学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MidStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">MidStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// 小学生</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PriStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">PriStudent</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>把相同的部分放到父类，这样就减少了重复的代码，也就是提高了<strong>复用性</strong>。同时，继承也使类的等级层次更加清晰。</p><h2 id="继承的特性"><a href="#继承的特性" class="headerlink" title="继承的特性"></a>继承的特性</h2><h3 id="子类继承了父类的哪些东西"><a href="#子类继承了父类的哪些东西" class="headerlink" title="子类继承了父类的哪些东西"></a>子类继承了父类的哪些东西</h3><blockquote><p>这题我知道，非私有的！</p><p>（其实并不是，子类继承了父类所有的属性与方法。）</p></blockquote><p>比方说，我们知道子类不能直接调用父类私有的属性和方法，那么到底有没有继承呢？还是通过例子来说明：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span> <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>这样当然是不可以的，就好像<code>UniStudent</code>没有<code>id</code>这个属性一样。</p><p>但是如果是这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setID</span><span class="token punctuation">(</span><span class="token keyword">int</span> myID<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> myID<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printID</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ID:"</span> <span class="token operator">+</span> <span class="token function">getID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>显然<code>UniStudent</code>也可以获取<code>id</code>并且在屏幕上打印出来。所以尽管<code>id</code>是<code>Student</code>私有的，<code>UniStudent</code>还是能够继承它，只是不能直接调用，需要借助构造方法和不受访问权限限制的其他方法。</p><p>既然子类继承了父类所有的属性与方法，那么新的问题就出现了：</p><h3 id="子类和子类对象可以调用继承到的哪些属性与方法"><a href="#子类和子类对象可以调用继承到的哪些属性与方法" class="headerlink" title="子类和子类对象可以调用继承到的哪些属性与方法"></a>子类和子类对象可以调用继承到的哪些属性与方法</h3><p>子类能够调用的属性和方法与访问权限修饰符有关。</p><table><thead><tr><th>作用域</th><th>当前类</th><th>同一包中</th><th>其他包的子类</th><th>其他包非子类</th></tr></thead><tbody><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td>×</td></tr><tr><td>default</td><td>√</td><td>√</td><td>×</td><td>×</td></tr><tr><td>private</td><td>√</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><h2 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h2><p>子类可以对父类允许访问的方法进行重新编写，根据需要实现父类的方法。</p><p>重写后的方法被子类优先调用，可以使用<code>super</code>关键字调用父类中被重写的方法。</p><p>举例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">UniStudent</span> unistu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unistu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行结果：</p><pre class="language-text" data-language="text"><code class="language-text">考试考试大学生考试</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>一般情况下重写方法时除了方法体之外的其他部分都应该与父类的方法一致，但情况不总是这样。</p><p>在重写方法时，参数列表必须保持一致，但是访问权限修饰符和返回值类型可以修改。</p><ul><li>返回值类型可以不同，但必须是父类对应方法返回值的派生类。</li><li>访问权限不能比父类中对应方法的访问权限更低。比如父类中的<code>public</code>方法，在子类中重写该方法时就不能声明为<code>protected</code>。</li></ul><h2 id="转型"><a href="#转型" class="headerlink" title="转型"></a>转型</h2><p>简单来说，就是父类引用指向子类对象。</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><p>例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UniStudent</span> <span class="token keyword">extends</span> <span class="token class-name">Student</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大学生考试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manage</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> stu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Student</span> unistu <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上转型，大学生是学生</span>        stu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        unistu<span class="token punctuation">.</span><span class="token function">exam</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在这里，<code>Student unistu = new UniStudent();</code>就是向上转型，不需要强制转型。</p><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Son</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 向上转型</span><span class="token class-name">Son</span> s2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f2<span class="token punctuation">;</span> <span class="token comment">// 向下转型，需要强制转型</span></code></pre><p>因为这里的<code>f2</code>实际上指向的是子类的对象，向下转型不会出错。</p><p>如果是这样：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Father</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Son</span> s3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Son</span><span class="token punctuation">)</span>f3<span class="token punctuation">;</span> <span class="token comment">// 编译不会出错但运行时会出错</span></code></pre><p>会出现运行时错误。</p><p>向下转型时要注意对象原本是什么类型的实例。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;不问不知道，一问才发现之前学得实在太水，好多东西都没怎么搞明白。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;继承是什么&quot;&gt;&lt;a href=&quot;#继承是什么&quot; class=&quot;headerlink&quot; title=&quot;继承是什么&quot;&gt;&lt;/a&gt;继承是什么&lt;/h2&gt;&lt;p&gt;继承是面向对象的三个基本特征之一，它使得子类具有父类的属性和方法或者重新定义、追加属性和方法等。&lt;/p&gt;</summary>
    
    
    
    <category term="快去学习" scheme="https://afool.top/categories/%E5%BF%AB%E5%8E%BB%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Java" scheme="https://afool.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>用单片机蜂鸣器播放音乐</title>
    <link href="https://afool.top/learning/stc-beep-music/"/>
    <id>https://afool.top/learning/stc-beep-music/</id>
    <published>2021-07-12T09:28:11.000Z</published>
    <updated>2022-11-07T08:43:40.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="这是怎么一回事"><a href="#这是怎么一回事" class="headerlink" title="这是怎么一回事"></a>这是怎么一回事</h2><p>是的，我又来水了。</p><p>话说回来，虽然暑假开始已经将近两周了，但是我们并没有回家。为什么呢？</p><p>你可知道这世上有一物唤作“小学期”吗？</p><p><img src="https://i.loli.net/2021/07/13/Kz3emPhy7xDvNMu.jpg" alt="滑稽" loading="lazy"></p><p>每年暑假，我们学院大二的学生都会被拉到工训中心愉悦地学习课程，其名为——焊板子！<del>（学会了，明天就进电子厂。）</del></p><p><img src="https://i.loli.net/2021/07/13/YqjBUElkJ2VW8DX.jpg" alt="板子成品" loading="lazy"></p><p>好吧，其实正式名称应该是电子系统设计与创新基础训练，上面说的算是实训的一部分。在焊板子之外，我们要做的事情是通过学习各种案例理解其中的原理，最终自己编程实现想要的功能。</p><p>老师给我们提供了很多案例，不过根据观察，大家玩得最 High 的还是电子音乐，就是让蜂鸣器按指定的曲调发出声音。<del>（电子系统设计？不，是 8-bit 音乐大赏。）</del></p><span id="more"></span><h2 id="蜂鸣器电子音乐"><a href="#蜂鸣器电子音乐" class="headerlink" title="蜂鸣器电子音乐"></a>蜂鸣器电子音乐</h2><p>电子音乐的案例代码如下，感谢我校老师：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/**********************myMusic 音乐播放型号:IAP15F2K60S2 主频:12MHz************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;STC15F2K60S2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uint</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uchar</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span></span></span><span class="token comment">/*---------引脚别名定义---------*/</span>sbit sbtBeep <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment">//蜂鸣器</span><span class="token comment">/*---------变量定义---------*/</span>uchar ucTimerH<span class="token punctuation">,</span> ucTimerL<span class="token punctuation">;</span>   <span class="token comment">//定义定时器的重装值</span>uchar code arrMusic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>     <span class="token comment">//音乐代码，歌曲为《同一首歌》，格式为: 音符, 节拍</span><span class="token punctuation">&#123;</span><span class="token comment">//音符的十位代表是低中高八度，1代表高八度，2代表中八度，3代表高八度</span><span class="token comment">//个位代表简谱的音符，例如0x15代表低八度的S0，0x21代表中八度的DO。</span><span class="token comment">//节拍则是代表音长，例如：0x10代表一拍，0x20代表两拍，0x08代表1/2拍</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x30</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x31</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x27</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x18</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x26</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x25</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x24</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x23</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x17</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x08</span><span class="token punctuation">,</span><span class="token number">0x15</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x16</span><span class="token punctuation">,</span><span class="token number">0x10</span><span class="token punctuation">,</span><span class="token number">0x21</span><span class="token punctuation">,</span><span class="token number">0x40</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>uchar code arrMusicToTimerNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>    <span class="token comment">//此数组数据为各个音符在定时器中的重装值，第一列是高位，第二列是低位</span>    <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span>   <span class="token comment">//低八度，低1</span>    <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span>    <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>   <span class="token comment">//低3</span>    <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span>    <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span>   <span class="token comment">//低5</span>    <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span>   <span class="token comment">//低7</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span>   <span class="token comment">//中央C调</span>    <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span>   <span class="token comment">//中2</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span>   <span class="token comment">//中4</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span>    <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span>   <span class="token comment">//中6</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span>   <span class="token comment">//高八度，高1</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span>   <span class="token comment">//高3</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span>   <span class="token comment">//高5</span>    <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span>    <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x03</span>    <span class="token comment">//高7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*---------延时子函数---------*/</span><span class="token keyword">void</span> <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> xms <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span> i <span class="token operator">=</span> xms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span> <span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------取址子函数---------*/</span><span class="token comment">//取出tem音符在arrMusicToTimerNum数组中的位置值</span>uchar <span class="token function">GetPosition</span><span class="token punctuation">(</span> uchar tem <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    uchar ucBase<span class="token punctuation">,</span> ucOffset<span class="token punctuation">,</span> ucPosition<span class="token punctuation">;</span>     <span class="token comment">//定义曲调，音符和位置</span>    ucBase <span class="token operator">=</span> tem <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>            <span class="token comment">//高4位是曲调值,基址</span>    ucOffset <span class="token operator">=</span> tem <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>          <span class="token comment">//低4位是音符，偏移量</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>              <span class="token comment">//当曲调值为1时，即是低八度，基址为0</span>        ucBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>          <span class="token comment">//当曲调值为2时，即是中八度，基址为14</span>        ucBase <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucBase <span class="token operator">==</span> <span class="token number">3</span> <span class="token punctuation">)</span>          <span class="token comment">//当曲调值为3时，即是高八度，基址为28</span>        ucBase <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    <span class="token comment">//通过基址加上偏移量，即可定位此音符在arrMusicToTimerNum数组中的位置</span>    ucPosition <span class="token operator">=</span> ucBase <span class="token operator">+</span> <span class="token punctuation">(</span> ucOffset <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ucPosition<span class="token punctuation">;</span>            <span class="token comment">//返回这一个位置值</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------播放音乐功能函数---------*/</span><span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uchar ucNoteTmp<span class="token punctuation">,</span> ucRhythmTmp<span class="token punctuation">,</span> tem<span class="token punctuation">;</span> <span class="token comment">// ucNoteTmp为音符，ucRhythmTmp为节拍</span>    uchar i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        ucNoteTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//如果碰到结束符,延时1秒,回到开始再来一遍</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> ucNoteTmp <span class="token operator">==</span> <span class="token number">0x00</span> <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span> ucNoteTmp <span class="token operator">==</span> <span class="token number">0xff</span> <span class="token punctuation">)</span>  <span class="token comment">//若碰到休止符,延时100ms,继续取下一音符</span>        <span class="token punctuation">&#123;</span>            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token function">DelayMs</span><span class="token punctuation">(</span> <span class="token number">100</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>            TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>                     <span class="token comment">//正常情况下取音符和节拍</span>        <span class="token punctuation">&#123;</span>            <span class="token comment">//取出当前音符在arrMusicToTimerNum数组中的位置值</span>            tem <span class="token operator">=</span> <span class="token function">GetPosition</span><span class="token punctuation">(</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                          <span class="token comment">//把音符相应的计时器重装载值赋予ucTimerH和ucTimerL</span>            ucTimerH <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem<span class="token punctuation">]</span><span class="token punctuation">;</span>              ucTimerL <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>            TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>           <span class="token comment">//把ucTimerH和ucTimerL赋予计时器</span>            TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>            ucRhythmTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//取得节拍</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token comment">//开定时器1</span>        <span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//等待节拍完成, 通过P3^4口输出音频</span>        TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">//关定时器1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------初始化子函数---------*/</span><span class="token comment">//功能是配置IO口</span><span class="token keyword">void</span> <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P0M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    P0M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P2M0 <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>    P2M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P3M0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    P3M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0初始化子函数---------*/</span><span class="token keyword">void</span> <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TMOD <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    TH0 <span class="token operator">=</span> <span class="token number">0xD8</span><span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>    EA <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ET0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------主函数---------*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0中断处理函数---------*/</span><span class="token comment">//重新装值，并把sbtBeep值取反，产生方波</span><span class="token keyword">void</span> <span class="token function">T0_Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span>                     <span class="token comment">//计时器控制频率</span><span class="token punctuation">&#123;</span>    TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token operator">~</span>sbtBeep<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>头文件的内容就不贴了，主要是跟寄存器有关的。电子音乐工程有好几个版本，包括可以切换内容的、可以震动感应的，甚至还有可以显示歌词的……但是我现在要说的只需要用到上面这个（不要把偷懒说得这么堂而皇之啊喂）。</p><h2 id="问题以及修改"><a href="#问题以及修改" class="headerlink" title="问题以及修改"></a>问题以及修改</h2><p>上面这个程序是让蜂鸣器以《同一首歌》的旋律发出声音，以“做中学”为准则的我院学生怎么能只听它唱呢？<del>最起码换成咱们的曲子。</del></p><p>于是问题就出现了，当我们把自己选的曲子按格式写进去、构建程序并且下载之后，播放出来却很明显比预想的节奏快很多，而且时不时会有很怪的调调出现。除此之外，休止符的效果也不能让我们满意。</p><h3 id="音高"><a href="#音高" class="headerlink" title="音高"></a>音高</h3><p>经过几次试验，我们发现音高的问题主要出现在高音3，这个音不对劲。那么怎么修改呢？</p><p>根据原理说明和源代码，程序指定音高的时候是根据写入的音乐代码重定位到音符在定时器中的重装值。这个重装值又是什么？</p><p><img src="https://i.loli.net/2021/07/13/ug95cZrwiSLT4dU.jpg" alt="简谱码" loading="lazy"></p><p>这是课程网站给出的一张图。经过进制转换可以发现图中的简谱码就是前面所说的重装值。这样一来就好办了，老师给出的工程文件中高音3的重装值是<code>0xfe, 0x6e</code>，就是<code>0xff6e</code>，而高音3的简谱码<code>65157</code>转换成16进制应该是<code>0xfe85</code>，把重装值改成<code>0xfe, 0x85</code>就好了。</p><p>同理，也可以用这种方式校准其它音，只要有简谱码，甚至可以实现半音和不在这个表格中的音。表格给出了一部分，不在这一部分的可以通过如下公式来计算：</p><blockquote><p><a href="https://zhidao.baidu.com/question/73525053.html">百度知道</a></p><p>N&#x3D;Fi÷2÷Fr</p><p>N：计数值</p><p>Fi：内部计时频率12MHz，应该和硬件有关</p><p>Fr：要产生的频率</p><p>T&#x3D;65536-N&#x3D;65536-Fi÷2÷Fr </p></blockquote><p>T值就是我们需要的简谱码，转换成16进制就可以在程序中使用了。</p><h3 id="节拍"><a href="#节拍" class="headerlink" title="节拍"></a>节拍</h3><p>音高的问题解决了，下面是节拍。源代码是这样写的：</p><pre class="language-c" data-language="c"><code class="language-c">TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                          <span class="token comment">//开定时器1</span><span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">180</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//等待节拍完成, 通过P3^4口输出音频</span>TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                          <span class="token comment">//关定时器1</span></code></pre><p>其实节拍应该不算是个问题，因为不同歌曲的速度也会不同。经过试验（主要是听，毕竟不懂），我自己用的大部分歌曲改成这样会比较好：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token function">DelayMs</span><span class="token punctuation">(</span> ucRhythmTmp <span class="token operator">*</span> <span class="token number">360</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不过具体写多少还是取决于目标音乐的速度。</p><h3 id="休止符"><a href="#休止符" class="headerlink" title="休止符"></a>休止符</h3><p>至于休止符，我在音符的重装值最后加上了<code>0xff,0xff</code>，只要当前音符是<code>0xn0</code>（n 不为0，因为<code>0x00</code>表示播放结束，回到开头），就让程序把重装值定位到42的位置（前面3个八度需要42个16进制数，从第0到第41），这样获取的重装值的高低位相等（其它的重装值还没有高低位相等的），直接关掉定时器再等待节拍，蜂鸣器在休止期间就不会发声。</p><pre class="language-c" data-language="c"><code class="language-c">TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                       <span class="token comment">// 开定时器1</span><span class="token keyword">if</span><span class="token punctuation">(</span> ucTimerH <span class="token operator">==</span> ucTimerL <span class="token punctuation">)</span>     <span class="token comment">// 是休止符直接关掉定时器</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token function">DelayMs</span><span class="token punctuation">(</span> parameter <span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 等待节拍完成</span>TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                       <span class="token comment">// 关定时器1</span></code></pre><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>我还加上了根据音符来点亮不同数量 LED 灯的功能，实现了按键控制暂停和继续播放，<del>其实就是把其他案例复制粘贴。</del>除此之外，我把<code>PlayMusic</code>函数中<code>i</code>的类型从<code>uchar</code>改成<code>uint</code>来支持更长的音乐。</p><p>好像没什么技术力的说……</p><h2 id="让蜂鸣器唱起《国际歌》"><a href="#让蜂鸣器唱起《国际歌》" class="headerlink" title="让蜂鸣器唱起《国际歌》"></a>让蜂鸣器唱起《国际歌》</h2><p>上视频：</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="////player.bilibili.com/player.html?aid=461634310&bvid=BV16L411W7Ay&cid=370583013&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;" ></iframe></div><p>修改后的代码，没有定义半音：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">/**********************myMusic 音乐播放型号:IAP15F2K60S2 主频:12MHz************************/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;STC15F2K60S2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uint</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">int</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">uchar</span> <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span></span></span><span class="token comment">/*---------引脚别名定义---------*/</span>sbit sbtBeep <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">// 蜂鸣器</span>sbit key1 <span class="token operator">=</span> P3 <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">// 按键1</span>sbit sbtLedSel <span class="token operator">=</span> P2 <span class="token operator">^</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 数码管与 LED 灯切换引脚</span><span class="token comment">/*---------变量定义---------*/</span>uchar code arrLed<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// LED 值</span>uchar ucTimerH<span class="token punctuation">,</span> ucTimerL<span class="token punctuation">;</span>                                                     <span class="token comment">// 定义定时器的重装值</span>bit flag<span class="token punctuation">;</span>                                                                     <span class="token comment">// 标志位，暂停或播放</span>uchar code arrMusic<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>                                                       <span class="token comment">// 音乐代码，格式为: 音符, 节拍</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 音符的十位代表是低中高八度，1代表高八度，2代表中八度，3代表高八度</span>        <span class="token comment">// 个位代表简谱的音符，例如0x15代表低八度的S0，0x21代表中八度的DO。</span>        <span class="token comment">// 节拍则是代表音长，例如：0x10代表一拍，0x20代表两拍，0x08代表1/2拍</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span>        <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>        <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span>        <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>uchar code arrMusicToTimerNum<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// 此数组数据为各个音符在定时器中的重装值，第一列是高位，第二列是低位</span>        <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token comment">// 低八度，低1</span>        <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span>        <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token comment">// 低3</span>        <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span>        <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token comment">// 低5</span>        <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token comment">// 低7</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token comment">// 中央 C 调</span>        <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token comment">// 中2</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token comment">// 中4</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span>        <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token comment">// 中6</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token comment">// 高八度，高1</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token comment">// 高3</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token comment">// 高5</span>        <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span>        <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token comment">// 高7</span>        <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/*---------延时子函数---------*/</span><span class="token keyword">void</span> <span class="token function">DelayMs</span><span class="token punctuation">(</span>uint xms<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uint i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> xms<span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">124</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------取址子函数---------*/</span><span class="token comment">// 取出 tem 音符在 arrMusicToTimerNum 数组中的位置值</span>uchar <span class="token function">GetPosition</span><span class="token punctuation">(</span>uchar tem<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    uchar ucBase<span class="token punctuation">,</span> ucOffset<span class="token punctuation">,</span> ucPosition<span class="token punctuation">;</span> <span class="token comment">// 定义曲调、音符和位置</span>    ucBase <span class="token operator">=</span> tem <span class="token operator">/</span> <span class="token number">16</span><span class="token punctuation">;</span>                  <span class="token comment">// 高4位是曲调值，基址</span>    ucOffset <span class="token operator">=</span> tem <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">;</span>                <span class="token comment">// 低4位是音符，偏移量</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ucOffset <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                  <span class="token comment">// 当音符为0时，位置是42</span>    <span class="token punctuation">&#123;</span>        P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 点亮对应数量的 LED</span>    P0 <span class="token operator">=</span> arrLed<span class="token punctuation">[</span>ucOffset<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为1时，即是低八度，基址为0</span>        ucBase <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为2时，即是中八度，基址为14</span>        ucBase <span class="token operator">=</span> <span class="token number">14</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>ucBase <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment">// 当曲调值为3时，即是高八度，基址为28</span>        ucBase <span class="token operator">=</span> <span class="token number">28</span><span class="token punctuation">;</span>    <span class="token comment">// 通过基址加上偏移量，即可定位此音符在 arrMusicToTimerNum 数组中的位置</span>    ucPosition <span class="token operator">=</span> ucBase <span class="token operator">+</span> <span class="token punctuation">(</span>ucOffset <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ucPosition<span class="token punctuation">;</span> <span class="token comment">// 返回这一个位置值</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------播放音乐功能函数---------*/</span><span class="token keyword">void</span> <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ucNoteTmp 为音符，ucRhythmTmp 为节拍</span>    uchar ucNoteTmp<span class="token punctuation">,</span> ucRhythmTmp<span class="token punctuation">,</span> tem<span class="token punctuation">;</span>    <span class="token comment">// 这里把 uchar 型改成 uint 型，否则 i 最大为255，只能支持128个音符，甚至放不完《国际歌》的旋律</span>    uint i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 播放状态</span>        <span class="token punctuation">&#123;</span>            ucNoteTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>ucNoteTmp <span class="token operator">==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token comment">// 如果碰到结束符,延时1秒,回到开始再来一遍</span>            <span class="token punctuation">&#123;</span>                i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>                sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token comment">// 其他情况下取音符和节拍</span>            <span class="token punctuation">&#123;</span>                tem <span class="token operator">=</span> <span class="token function">GetPosition</span><span class="token punctuation">(</span>arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 取出当前音符在 arrMusicToTimerNum 数组中的位置值</span>                ucTimerH <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 把音符相应的计时器重装载值赋予 ucTimerH 和 ucTimerL</span>                ucTimerL <span class="token operator">=</span> arrMusicToTimerNum<span class="token punctuation">[</span>tem <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span> <span class="token comment">// 把 ucTimerH 和 ucTimerL 赋予计时器</span>                TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>                ucRhythmTmp <span class="token operator">=</span> arrMusic<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 取得节拍</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                TR0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                  <span class="token comment">// 开定时器1</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>ucTimerH <span class="token operator">==</span> ucTimerL<span class="token punctuation">)</span> <span class="token comment">// 休止直接关掉定时器</span>                    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token function">DelayMs</span><span class="token punctuation">(</span>ucRhythmTmp <span class="token operator">*</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 等待节拍完成, 通过 P3^4 口输出音频</span>                TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    <span class="token comment">// 关定时器1</span>                sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// 暂停</span>                <span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------初始化子函数---------*/</span><span class="token comment">// 功能是配置 IO 口</span><span class="token keyword">void</span> <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    P0M0 <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span>    P0M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P2M0 <span class="token operator">=</span> <span class="token number">0x08</span><span class="token punctuation">;</span>    P2M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P3M0 <span class="token operator">=</span> <span class="token number">0x10</span><span class="token punctuation">;</span>    P3M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P4M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    P5M1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    sbtLedSel <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0初始化子函数---------*/</span><span class="token keyword">void</span> <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    TMOD <span class="token operator">=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>    TH0 <span class="token operator">=</span> <span class="token number">0xD8</span><span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> <span class="token number">0xEF</span><span class="token punctuation">;</span>    IE <span class="token operator">=</span> <span class="token number">0x87</span><span class="token punctuation">;</span> <span class="token comment">// 1000 0111  EA=1,EX0=1,ET0=1,EX1=0;</span>    IP <span class="token operator">=</span> <span class="token number">0x02</span><span class="token punctuation">;</span> <span class="token comment">// 0000 0010  PT0=1;   定时器0优先级高</span>    TR0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------主函数---------*/</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">InitSys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">InitT0</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    P0 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>    key1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">PlayMusic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------定时器0中断处理函数---------*/</span><span class="token comment">// 重新装值，并把 sbtBeep 值取反，产生方波</span><span class="token keyword">void</span> <span class="token function">T0_Process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">1</span> <span class="token comment">// 计时器控制频率</span><span class="token punctuation">&#123;</span>    TH0 <span class="token operator">=</span> ucTimerH<span class="token punctuation">;</span>    TL0 <span class="token operator">=</span> ucTimerL<span class="token punctuation">;</span>    sbtBeep <span class="token operator">=</span> <span class="token operator">~</span>sbtBeep<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*---------按键1中断处理函数---------*/</span><span class="token comment">// 从其他案例抄过来的</span><span class="token keyword">void</span> <span class="token function">ex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> interrupt <span class="token number">0</span><span class="token punctuation">&#123;</span>    <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">// 判断 key1 是否按下</span>    <span class="token punctuation">&#123;</span>        <span class="token function">DelayMs</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>key1<span class="token punctuation">)</span>                <span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token operator">~</span>flag<span class="token punctuation">;</span> <span class="token comment">// 播放中断位取反，播放或者暂停</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;这是怎么一回事&quot;&gt;&lt;a href=&quot;#这是怎么一回事&quot; class=&quot;headerlink&quot; title=&quot;这是怎么一回事&quot;&gt;&lt;/a&gt;这是怎么一回事&lt;/h2&gt;&lt;p&gt;是的，我又来水了。&lt;/p&gt;
&lt;p&gt;话说回来，虽然暑假开始已经将近两周了，但是我们并没有回家。为什么呢？&lt;/p&gt;
&lt;p&gt;你可知道这世上有一物唤作“小学期”吗？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/13/Kz3emPhy7xDvNMu.jpg&quot; alt=&quot;滑稽&quot;&gt;&lt;/p&gt;
&lt;p&gt;每年暑假，我们学院大二的学生都会被拉到工训中心愉悦地学习课程，其名为——焊板子！&lt;del&gt;（学会了，明天就进电子厂。）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/13/YqjBUElkJ2VW8DX.jpg&quot; alt=&quot;板子成品&quot;&gt;&lt;/p&gt;
&lt;p&gt;好吧，其实正式名称应该是电子系统设计与创新基础训练，上面说的算是实训的一部分。在焊板子之外，我们要做的事情是通过学习各种案例理解其中的原理，最终自己编程实现想要的功能。&lt;/p&gt;
&lt;p&gt;老师给我们提供了很多案例，不过根据观察，大家玩得最 High 的还是电子音乐，就是让蜂鸣器按指定的曲调发出声音。&lt;del&gt;（电子系统设计？不，是 8-bit 音乐大赏。）&lt;/del&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="奇怪的知识增加了" scheme="https://afool.top/categories/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86%E5%A2%9E%E5%8A%A0%E4%BA%86/"/>
    
    
    <category term="单片机" scheme="https://afool.top/tags/%E5%8D%95%E7%89%87%E6%9C%BA/"/>
    
    <category term="c" scheme="https://afool.top/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>夏天的风和雨</title>
    <link href="https://afool.top/diary/2021-middle/"/>
    <id>https://afool.top/diary/2021-middle/</id>
    <published>2021-07-02T14:48:31.000Z</published>
    <updated>2022-11-07T08:43:40.831Z</updated>
    
    <content type="html"><![CDATA[    <div id="aplayer-LTxoufaj" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="499027" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><h2 id="快来点凉风吧"><a href="#快来点凉风吧" class="headerlink" title="快来点凉风吧"></a>快来点凉风吧</h2><p>这几天还是和往常一样闷热，我有点怀疑自己是不是在蒸桑拿。正好考试周刚过，就躺在床上不动好了，既省力又不会被外面的酷暑打扰。</p><p>躺着是不可能就只是躺着的，经过考试的洗礼，我不禁对自己过去一段时间的生活和学习产生了深深的怀疑。<del>（笑，希望不要又是死不悔改）。</del></p><p><img src="https://i.loli.net/2021/07/02/6eLrusJTcW4w3jG.gif" alt="emmm" loading="lazy"></p><span id="more"></span><p>怎么说呢，作为当代摸鱼大学生，学习什么的其实也是看得很重的，只是不知道为什么，自己总是不能很好地集中精力去做这些事情，学着学着就去干别的了。<del>比如一到考试周游戏就变得特别好玩，简直要成为某种定律了。</del></p><p>于是就这样日复一日，平常该学的东西就掌握个半斤八两，复习的时候也就是用一两天的时间过一遍而已，最后拿到一个很一般的分数，排名不上不下。要说差嘛，也没有很差，但总觉得不应该是这样的。</p><p>转眼间大学生活已经过去一半了，<del>就这？这就过去一半了？</del>有的同学的技术水平已经可以出去实习了（甚至被抢着要），有的同学也用课余时间做了很多有趣的事情，每次看到这些我都会忍不住再看看自己。我到底是来做什么的呢？</p><p>来回顾一下自己曾经立下的flag吧：</p><ul><li><input disabled="" type="checkbox"> 拿到奖学金</li><li><input disabled="" type="checkbox"> 写出小说的第一部</li><li><input disabled="" type="checkbox"> 学会弹吉他</li><li><input disabled="" type="checkbox"> 看完《冰与火之歌》</li></ul><p>显而易见，这些我都还没有完成。</p><p>去年的奖学金因为挂了高数二泡汤了，不挂的话看综测排名应该是有希望的。今年的要等9月开学才知道能不能拿到（暑假有小学期，这之后还要进行综测排名）。至于后面的几个，之前的空闲时间不是刷视频就是玩游戏，直到看到自己曾经列下的目标才想起来。</p><h2 id="窗前听雨"><a href="#窗前听雨" class="headerlink" title="窗前听雨"></a>窗前听雨</h2><p>要是让两年前的我看到自己现在这副摸样，一定会嗤之以鼻的吧。这个人怎么就这么丧呢？看起来毫无生气。</p><p><img src="https://i.loli.net/2021/07/02/pM5BYo7iWa3knI9.jpg" alt="流泪" loading="lazy"></p><p>不得不承认，我对不起从前的自己，对不起已经失去的时间，对不起给过我鼓励和信任的人。但我也很清楚，就这么丧下去是绝对不行的，要行动就要趁现在，不能拖延。<del>就知道说。</del></p><blockquote><p>种一棵树，最好的时间是十年前，其次是现在。</p></blockquote><p>经常看到很多大佬自嘲为废物并决定躺平，但我觉得那不是真的就躺平不动了。所谓躺平只是一种心态，只是平和地对待生活中的不如意罢了。面对不确定的未来，还是要做好自己决定做的事情才能抓住机会。</p><p>希望两年后的我会变成自己期望的样子吧。</p><p><del>果然心情低落又迷茫的时候写出来的东西也会有点空洞乏味。</del></p><p><del>也可能是因为我今天睡得太久有点不舒服吧。</del></p><h2 id="美好的东西和值得吐槽的事情"><a href="#美好的东西和值得吐槽的事情" class="headerlink" title="美好的东西和值得吐槽的事情"></a>美好的东西和值得吐槽的事情</h2><p>也并不是所有事情都一无是处，至少风景还是一样美。</p><p>食堂的饭还算不错，能让人吃得感到满足。<del>价格就先不提了。</del></p><p>让子弹飞很好看。</p><p>Switch Lite真的很香。</p><p>泽野弘之的音乐还是一样好听，只是最近几年貌似都是风格差不多的番剧找泽野配乐啊……感觉很少听到像The Moment of Dreams和A Letter这样风格的歌了，今年的86也是把比较日常的部分都给了山本康太。山本水平也不错，但还是希望有人能让泽野来点风格更多样的曲子。</p><p>在寝室学习或者构思都需要一点耐心，毕竟每个人的节奏不是同步的。</p><p><img src="https://i.loli.net/2021/07/02/U5jciBYNrxG3bXH.jpg" alt="呵呵" loading="lazy"></p>]]></content>
    
    
    <summary type="html">&lt;div id=&quot;aplayer-LTxoufaj&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot;
         data-id=&quot;499027&quot; data-server=&quot;netease&quot; data-type=&quot;song&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;auto&quot; data-theme=&quot;#C20C0C&quot;
    &gt;&lt;/div&gt;

&lt;h2 id=&quot;快来点凉风吧&quot;&gt;&lt;a href=&quot;#快来点凉风吧&quot; class=&quot;headerlink&quot; title=&quot;快来点凉风吧&quot;&gt;&lt;/a&gt;快来点凉风吧&lt;/h2&gt;&lt;p&gt;这几天还是和往常一样闷热，我有点怀疑自己是不是在蒸桑拿。正好考试周刚过，就躺在床上不动好了，既省力又不会被外面的酷暑打扰。&lt;/p&gt;
&lt;p&gt;躺着是不可能就只是躺着的，经过考试的洗礼，我不禁对自己过去一段时间的生活和学习产生了深深的怀疑。&lt;del&gt;（笑，希望不要又是死不悔改）。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.loli.net/2021/07/02/6eLrusJTcW4w3jG.gif&quot; alt=&quot;emmm&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="往事如烟" scheme="https://afool.top/categories/%E5%BE%80%E4%BA%8B%E5%A6%82%E7%83%9F/"/>
    
    
    <category term="杂记" scheme="https://afool.top/tags/%E6%9D%82%E8%AE%B0/"/>
    
    <category term="负能量警告" scheme="https://afool.top/tags/%E8%B4%9F%E8%83%BD%E9%87%8F%E8%AD%A6%E5%91%8A/"/>
    
  </entry>
  
</feed>
